
nucleo-testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e80  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009150  08009150  0000a150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080091f8  080091f8  0000a1f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009200  08009200  0000a200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009204  08009204  0000a204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08009208  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800926c  0000b064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  080092cc  0000b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d20  24000124  0800932c  0000b124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004e44  0800932c  0000be44  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b124  2**0
                  CONTENTS, READONLY
 12 .debug_info   000249fe  00000000  00000000  0000b152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e05  00000000  00000000  0002fb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00033958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001438  00000000  00000000  00035340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004636  00000000  00000000  00036778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f041  00000000  00000000  0003adae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015c4de  00000000  00000000  00059def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b62cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071ec  00000000  00000000  001b6310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001bd4fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000124 	.word	0x24000124
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009138 	.word	0x08009138

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000128 	.word	0x24000128
 800030c:	08009138 	.word	0x08009138

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fcf0 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f82a 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f938 	bl	8000880 <MX_GPIO_Init>
  MX_ETH_Init();
 8000610:	f000 f896 	bl	8000740 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000614:	f000 f8e0 	bl	80007d8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000618:	f000 f92a 	bl	8000870 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800061c:	f005 fef4 	bl	8006408 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000620:	4a09      	ldr	r2, [pc, #36]	@ (8000648 <main+0x48>)
 8000622:	2100      	movs	r1, #0
 8000624:	4809      	ldr	r0, [pc, #36]	@ (800064c <main+0x4c>)
 8000626:	f005 ff39 	bl	800649c <osThreadNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a08      	ldr	r2, [pc, #32]	@ (8000650 <main+0x50>)
 800062e:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000630:	4a08      	ldr	r2, [pc, #32]	@ (8000654 <main+0x54>)
 8000632:	2100      	movs	r1, #0
 8000634:	4808      	ldr	r0, [pc, #32]	@ (8000658 <main+0x58>)
 8000636:	f005 ff31 	bl	800649c <osThreadNew>
 800063a:	4603      	mov	r3, r0
 800063c:	4a07      	ldr	r2, [pc, #28]	@ (800065c <main+0x5c>)
 800063e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000640:	f005 ff06 	bl	8006450 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <main+0x44>
 8000648:	08009178 	.word	0x08009178
 800064c:	08000a79 	.word	0x08000a79
 8000650:	240002bc 	.word	0x240002bc
 8000654:	0800919c 	.word	0x0800919c
 8000658:	08000a99 	.word	0x08000a99
 800065c:	240002c0 	.word	0x240002c0

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	@ 0x70
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800066a:	224c      	movs	r2, #76	@ 0x4c
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f008 fc7a 	bl	8008f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2220      	movs	r2, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f008 fc74 	bl	8008f68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000680:	2002      	movs	r0, #2
 8000682:	f001 fc11 	bl	8001ea8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	4b2c      	ldr	r3, [pc, #176]	@ (800073c <SystemClock_Config+0xdc>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a2b      	ldr	r2, [pc, #172]	@ (800073c <SystemClock_Config+0xdc>)
 8000690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b29      	ldr	r3, [pc, #164]	@ (800073c <SystemClock_Config+0xdc>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a2:	bf00      	nop
 80006a4:	4b25      	ldr	r3, [pc, #148]	@ (800073c <SystemClock_Config+0xdc>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006b0:	d1f8      	bne.n	80006a4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006b2:	2321      	movs	r3, #33	@ 0x21
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006cc:	f240 1313 	movw	r3, #275	@ 0x113
 80006d0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006de:	2304      	movs	r3, #4
 80006e0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fc14 	bl	8001f1c <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006fa:	f000 f9e5 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	233f      	movs	r3, #63	@ 0x3f
 8000700:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800070a:	2308      	movs	r3, #8
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800070e:	2340      	movs	r3, #64	@ 0x40
 8000710:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000712:	2340      	movs	r3, #64	@ 0x40
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800071c:	2340      	movs	r3, #64	@ 0x40
 800071e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2103      	movs	r1, #3
 8000724:	4618      	mov	r0, r3
 8000726:	f001 ffd3 	bl	80026d0 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000730:	f000 f9ca 	bl	8000ac8 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3770      	adds	r7, #112	@ 0x70
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	58024800 	.word	0x58024800

08000740 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <MX_ETH_Init+0x80>)
 8000746:	4a1f      	ldr	r2, [pc, #124]	@ (80007c4 <MX_ETH_Init+0x84>)
 8000748:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800074a:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <MX_ETH_Init+0x88>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000750:	4b1d      	ldr	r3, [pc, #116]	@ (80007c8 <MX_ETH_Init+0x88>)
 8000752:	2280      	movs	r2, #128	@ 0x80
 8000754:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000756:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_ETH_Init+0x88>)
 8000758:	22e1      	movs	r2, #225	@ 0xe1
 800075a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800075c:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <MX_ETH_Init+0x88>)
 800075e:	2200      	movs	r2, #0
 8000760:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_ETH_Init+0x88>)
 8000764:	2200      	movs	r2, #0
 8000766:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_ETH_Init+0x88>)
 800076a:	2200      	movs	r2, #0
 800076c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_ETH_Init+0x80>)
 8000770:	4a15      	ldr	r2, [pc, #84]	@ (80007c8 <MX_ETH_Init+0x88>)
 8000772:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_ETH_Init+0x80>)
 8000776:	2201      	movs	r2, #1
 8000778:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_ETH_Init+0x80>)
 800077c:	4a13      	ldr	r2, [pc, #76]	@ (80007cc <MX_ETH_Init+0x8c>)
 800077e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_ETH_Init+0x80>)
 8000782:	4a13      	ldr	r2, [pc, #76]	@ (80007d0 <MX_ETH_Init+0x90>)
 8000784:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_ETH_Init+0x80>)
 8000788:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800078c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800078e:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <MX_ETH_Init+0x80>)
 8000790:	f000 fd7a 	bl	8001288 <HAL_ETH_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800079a:	f000 f995 	bl	8000ac8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800079e:	2238      	movs	r2, #56	@ 0x38
 80007a0:	2100      	movs	r1, #0
 80007a2:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <MX_ETH_Init+0x94>)
 80007a4:	f008 fbe0 	bl	8008f68 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <MX_ETH_Init+0x94>)
 80007aa:	2221      	movs	r2, #33	@ 0x21
 80007ac:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <MX_ETH_Init+0x94>)
 80007b0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007b4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007b6:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <MX_ETH_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	24000178 	.word	0x24000178
 80007c4:	40028000 	.word	0x40028000
 80007c8:	240002c4 	.word	0x240002c4
 80007cc:	240000c4 	.word	0x240000c4
 80007d0:	24000064 	.word	0x24000064
 80007d4:	24000140 	.word	0x24000140

080007d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007dc:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 80007de:	4a23      	ldr	r2, [pc, #140]	@ (800086c <MX_USART3_UART_Init+0x94>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e2:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000820:	4811      	ldr	r0, [pc, #68]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 8000822:	f004 fbcd 	bl	8004fc0 <HAL_UART_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800082c:	f000 f94c 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	480d      	ldr	r0, [pc, #52]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 8000834:	f005 fcd9 	bl	80061ea <HAL_UARTEx_SetTxFifoThreshold>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800083e:	f000 f943 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4808      	ldr	r0, [pc, #32]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 8000846:	f005 fd0e 	bl	8006266 <HAL_UARTEx_SetRxFifoThreshold>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000850:	f000 f93a 	bl	8000ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_USART3_UART_Init+0x90>)
 8000856:	f005 fc8f 	bl	8006178 <HAL_UARTEx_DisableFifoMode>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 f932 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	24000228 	.word	0x24000228
 800086c:	40004800 	.word	0x40004800

08000870 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
	...

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	@ 0x30
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b71      	ldr	r3, [pc, #452]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 8000898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800089c:	4a6f      	ldr	r2, [pc, #444]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a6:	4b6d      	ldr	r3, [pc, #436]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	61bb      	str	r3, [r7, #24]
 80008b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b4:	4b69      	ldr	r3, [pc, #420]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ba:	4a68      	ldr	r2, [pc, #416]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c4:	4b65      	ldr	r3, [pc, #404]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b62      	ldr	r3, [pc, #392]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d8:	4a60      	ldr	r2, [pc, #384]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008da:	f043 0301 	orr.w	r3, r3, #1
 80008de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	4a59      	ldr	r2, [pc, #356]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000900:	4b56      	ldr	r3, [pc, #344]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090e:	4b53      	ldr	r3, [pc, #332]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000914:	4a51      	ldr	r2, [pc, #324]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091e:	4b4f      	ldr	r3, [pc, #316]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 800092e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000932:	4a4a      	ldr	r2, [pc, #296]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 8000934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000938:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800093c:	4b47      	ldr	r3, [pc, #284]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094a:	4b44      	ldr	r3, [pc, #272]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000950:	4a42      	ldr	r2, [pc, #264]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095a:	4b40      	ldr	r3, [pc, #256]	@ (8000a5c <MX_GPIO_Init+0x1dc>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800096e:	483c      	ldr	r0, [pc, #240]	@ (8000a60 <MX_GPIO_Init+0x1e0>)
 8000970:	f001 fa66 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800097a:	483a      	ldr	r0, [pc, #232]	@ (8000a64 <MX_GPIO_Init+0x1e4>)
 800097c:	f001 fa60 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	2102      	movs	r1, #2
 8000984:	4838      	ldr	r0, [pc, #224]	@ (8000a68 <MX_GPIO_Init+0x1e8>)
 8000986:	f001 fa5b 	bl	8001e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4833      	ldr	r0, [pc, #204]	@ (8000a6c <MX_GPIO_Init+0x1ec>)
 80009a0:	f001 f8a6 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80009a4:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4828      	ldr	r0, [pc, #160]	@ (8000a60 <MX_GPIO_Init+0x1e0>)
 80009be:	f001 f897 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80009c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4822      	ldr	r0, [pc, #136]	@ (8000a64 <MX_GPIO_Init+0x1e4>)
 80009dc:	f001 f888 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80009e0:	2380      	movs	r3, #128	@ 0x80
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	481e      	ldr	r0, [pc, #120]	@ (8000a70 <MX_GPIO_Init+0x1f0>)
 80009f6:	f001 f87b 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4819      	ldr	r0, [pc, #100]	@ (8000a74 <MX_GPIO_Init+0x1f4>)
 8000a10:	f001 f86e 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a26:	230a      	movs	r3, #10
 8000a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4810      	ldr	r0, [pc, #64]	@ (8000a74 <MX_GPIO_Init+0x1f4>)
 8000a32:	f001 f85d 	bl	8001af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4806      	ldr	r0, [pc, #24]	@ (8000a68 <MX_GPIO_Init+0x1e8>)
 8000a4e:	f001 f84f 	bl	8001af0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a52:	bf00      	nop
 8000a54:	3730      	adds	r7, #48	@ 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	58024400 	.word	0x58024400
 8000a60:	58020400 	.word	0x58020400
 8000a64:	58020c00 	.word	0x58020c00
 8000a68:	58021000 	.word	0x58021000
 8000a6c:	58020800 	.word	0x58020800
 8000a70:	58021800 	.word	0x58021800
 8000a74:	58020000 	.word	0x58020000

08000a78 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000a80:	2102      	movs	r1, #2
 8000a82:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <StartBlink01+0x1c>)
 8000a84:	f001 f9f5 	bl	8001e72 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000a88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a8c:	f005 fd98 	bl	80065c0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8000a90:	bf00      	nop
 8000a92:	e7f5      	b.n	8000a80 <StartBlink01+0x8>
 8000a94:	58021000 	.word	0x58021000

08000a98 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <StartBlink02+0x8>

08000aa4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d101      	bne.n	8000aba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ab6:	f000 fad3 	bl	8001060 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40001000 	.word	0x40001000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <Error_Handler+0x8>

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <HAL_MspInit+0x38>)
 8000adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <HAL_MspInit+0x38>)
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000aea:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <HAL_MspInit+0x38>)
 8000aec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	210f      	movs	r1, #15
 8000afc:	f06f 0001 	mvn.w	r0, #1
 8000b00:	f000 fb9a 	bl	8001238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58024400 	.word	0x58024400

08000b10 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	@ 0x38
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a59      	ldr	r2, [pc, #356]	@ (8000c94 <HAL_ETH_MspInit+0x184>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	f040 80ab 	bne.w	8000c8a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b34:	4b58      	ldr	r3, [pc, #352]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000b36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b3a:	4a57      	ldr	r2, [pc, #348]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000b3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b40:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b44:	4b54      	ldr	r3, [pc, #336]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000b46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b4e:	623b      	str	r3, [r7, #32]
 8000b50:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b52:	4b51      	ldr	r3, [pc, #324]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000b54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b58:	4a4f      	ldr	r2, [pc, #316]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b62:	4b4d      	ldr	r3, [pc, #308]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000b64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b70:	4b49      	ldr	r3, [pc, #292]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000b72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b76:	4a48      	ldr	r2, [pc, #288]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b80:	4b45      	ldr	r3, [pc, #276]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000b82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b42      	ldr	r3, [pc, #264]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	4a40      	ldr	r2, [pc, #256]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b3a      	ldr	r3, [pc, #232]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb2:	4a39      	ldr	r2, [pc, #228]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbc:	4b36      	ldr	r3, [pc, #216]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b33      	ldr	r3, [pc, #204]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	4a31      	ldr	r2, [pc, #196]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000bd2:	f043 0302 	orr.w	r3, r3, #2
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bda:	4b2f      	ldr	r3, [pc, #188]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	4a2a      	ldr	r2, [pc, #168]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <HAL_ETH_MspInit+0x188>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c06:	2332      	movs	r3, #50	@ 0x32
 8000c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c16:	230b      	movs	r3, #11
 8000c18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	481e      	ldr	r0, [pc, #120]	@ (8000c9c <HAL_ETH_MspInit+0x18c>)
 8000c22:	f000 ff65 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c26:	2386      	movs	r3, #134	@ 0x86
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c36:	230b      	movs	r3, #11
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4817      	ldr	r0, [pc, #92]	@ (8000ca0 <HAL_ETH_MspInit+0x190>)
 8000c42:	f000 ff55 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c58:	230b      	movs	r3, #11
 8000c5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4810      	ldr	r0, [pc, #64]	@ (8000ca4 <HAL_ETH_MspInit+0x194>)
 8000c64:	f000 ff44 	bl	8001af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c68:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4808      	ldr	r0, [pc, #32]	@ (8000ca8 <HAL_ETH_MspInit+0x198>)
 8000c86:	f000 ff33 	bl	8001af0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3738      	adds	r7, #56	@ 0x38
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40028000 	.word	0x40028000
 8000c98:	58024400 	.word	0x58024400
 8000c9c:	58020800 	.word	0x58020800
 8000ca0:	58020000 	.word	0x58020000
 8000ca4:	58020400 	.word	0x58020400
 8000ca8:	58021800 	.word	0x58021800

08000cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0b8      	sub	sp, #224	@ 0xe0
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	22b8      	movs	r2, #184	@ 0xb8
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f008 f94b 	bl	8008f68 <memset>
  if(huart->Instance==USART3)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a27      	ldr	r2, [pc, #156]	@ (8000d74 <HAL_UART_MspInit+0xc8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d146      	bne.n	8000d6a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cdc:	f04f 0202 	mov.w	r2, #2
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f002 f8ba 	bl	8002e6c <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cfe:	f7ff fee3 	bl	8000ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d02:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d08:	4a1b      	ldr	r2, [pc, #108]	@ (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d12:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d20:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d30:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <HAL_UART_MspInit+0xcc>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000d3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <HAL_UART_MspInit+0xd0>)
 8000d66:	f000 fec3 	bl	8001af0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d6a:	bf00      	nop
 8000d6c:	37e0      	adds	r7, #224	@ 0xe0
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40004800 	.word	0x40004800
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58020c00 	.word	0x58020c00

08000d80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b090      	sub	sp, #64	@ 0x40
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	d827      	bhi.n	8000dde <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	2036      	movs	r0, #54	@ 0x36
 8000d94:	f000 fa50 	bl	8001238 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d98:	2036      	movs	r0, #54	@ 0x36
 8000d9a:	f000 fa67 	bl	800126c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000d9e:	4a29      	ldr	r2, [pc, #164]	@ (8000e44 <HAL_InitTick+0xc4>)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000da4:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <HAL_InitTick+0xc8>)
 8000da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000daa:	4a27      	ldr	r2, [pc, #156]	@ (8000e48 <HAL_InitTick+0xc8>)
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000db4:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <HAL_InitTick+0xc8>)
 8000db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dba:	f003 0310 	and.w	r3, r3, #16
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc2:	f107 0210 	add.w	r2, r7, #16
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4611      	mov	r1, r2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 f80b 	bl	8002de8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d106      	bne.n	8000dea <HAL_InitTick+0x6a>
 8000ddc:	e001      	b.n	8000de2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e02b      	b.n	8000e3a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000de2:	f001 ffd5 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8000de6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000de8:	e004      	b.n	8000df4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dea:	f001 ffd1 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8000dee:	4603      	mov	r3, r0
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000df6:	4a15      	ldr	r2, [pc, #84]	@ (8000e4c <HAL_InitTick+0xcc>)
 8000df8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfc:	0c9b      	lsrs	r3, r3, #18
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e02:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <HAL_InitTick+0xd0>)
 8000e04:	4a13      	ldr	r2, [pc, #76]	@ (8000e54 <HAL_InitTick+0xd4>)
 8000e06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <HAL_InitTick+0xd0>)
 8000e0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e0e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e10:	4a0f      	ldr	r2, [pc, #60]	@ (8000e50 <HAL_InitTick+0xd0>)
 8000e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e14:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <HAL_InitTick+0xd0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <HAL_InitTick+0xd0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e22:	480b      	ldr	r0, [pc, #44]	@ (8000e50 <HAL_InitTick+0xd0>)
 8000e24:	f003 fde4 	bl	80049f0 <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d104      	bne.n	8000e38 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e2e:	4808      	ldr	r0, [pc, #32]	@ (8000e50 <HAL_InitTick+0xd0>)
 8000e30:	f003 fe40 	bl	8004ab4 <HAL_TIM_Base_Start_IT>
 8000e34:	4603      	mov	r3, r0
 8000e36:	e000      	b.n	8000e3a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3740      	adds	r7, #64	@ 0x40
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	24000008 	.word	0x24000008
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	431bde83 	.word	0x431bde83
 8000e50:	240002cc 	.word	0x240002cc
 8000e54:	40001000 	.word	0x40001000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <NMI_Handler+0x4>

08000e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <MemManage_Handler+0x4>

08000e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <TIM6_DAC_IRQHandler+0x10>)
 8000e96:	f003 fe93 	bl	8004bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	240002cc 	.word	0x240002cc

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b32      	ldr	r3, [pc, #200]	@ (8000f74 <SystemInit+0xd0>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eae:	4a31      	ldr	r2, [pc, #196]	@ (8000f74 <SystemInit+0xd0>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f78 <SystemInit+0xd4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 030f 	and.w	r3, r3, #15
 8000ec0:	2b06      	cmp	r3, #6
 8000ec2:	d807      	bhi.n	8000ed4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f78 <SystemInit+0xd4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f023 030f 	bic.w	r3, r3, #15
 8000ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8000f78 <SystemInit+0xd4>)
 8000ece:	f043 0307 	orr.w	r3, r3, #7
 8000ed2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ed4:	4b29      	ldr	r3, [pc, #164]	@ (8000f7c <SystemInit+0xd8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a28      	ldr	r2, [pc, #160]	@ (8000f7c <SystemInit+0xd8>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ee0:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <SystemInit+0xd8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ee6:	4b25      	ldr	r3, [pc, #148]	@ (8000f7c <SystemInit+0xd8>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4924      	ldr	r1, [pc, #144]	@ (8000f7c <SystemInit+0xd8>)
 8000eec:	4b24      	ldr	r3, [pc, #144]	@ (8000f80 <SystemInit+0xdc>)
 8000eee:	4013      	ands	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ef2:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <SystemInit+0xd4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d007      	beq.n	8000f0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000efe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <SystemInit+0xd4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f023 030f 	bic.w	r3, r3, #15
 8000f06:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <SystemInit+0xd4>)
 8000f08:	f043 0307 	orr.w	r3, r3, #7
 8000f0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <SystemInit+0xd8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f14:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <SystemInit+0xd8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <SystemInit+0xd8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f20:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <SystemInit+0xd8>)
 8000f22:	4a18      	ldr	r2, [pc, #96]	@ (8000f84 <SystemInit+0xe0>)
 8000f24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f26:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <SystemInit+0xd8>)
 8000f28:	4a17      	ldr	r2, [pc, #92]	@ (8000f88 <SystemInit+0xe4>)
 8000f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f2c:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <SystemInit+0xd8>)
 8000f2e:	4a17      	ldr	r2, [pc, #92]	@ (8000f8c <SystemInit+0xe8>)
 8000f30:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <SystemInit+0xd8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <SystemInit+0xd8>)
 8000f3a:	4a14      	ldr	r2, [pc, #80]	@ (8000f8c <SystemInit+0xe8>)
 8000f3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <SystemInit+0xd8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <SystemInit+0xd8>)
 8000f46:	4a11      	ldr	r2, [pc, #68]	@ (8000f8c <SystemInit+0xe8>)
 8000f48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <SystemInit+0xd8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <SystemInit+0xd8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a09      	ldr	r2, [pc, #36]	@ (8000f7c <SystemInit+0xd8>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <SystemInit+0xd8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <SystemInit+0xec>)
 8000f64:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00
 8000f78:	52002000 	.word	0x52002000
 8000f7c:	58024400 	.word	0x58024400
 8000f80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f84:	02020200 	.word	0x02020200
 8000f88:	01ff0000 	.word	0x01ff0000
 8000f8c:	01010280 	.word	0x01010280
 8000f90:	52004000 	.word	0x52004000

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f98:	f7ff ff84 	bl	8000ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f008 f82f 	bl	8009024 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fb1b 	bl	8000600 <main>
  bx  lr
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fcc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000fd0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fd4:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8000fd8:	08009208 	.word	0x08009208
  ldr r2, =_sbss
 8000fdc:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8000fe0:	24004e44 	.word	0x24004e44

08000fe4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC3_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fee:	2003      	movs	r0, #3
 8000ff0:	f000 f917 	bl	8001222 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ff4:	f001 fd22 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <HAL_Init+0x68>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	0a1b      	lsrs	r3, r3, #8
 8001000:	f003 030f 	and.w	r3, r3, #15
 8001004:	4913      	ldr	r1, [pc, #76]	@ (8001054 <HAL_Init+0x6c>)
 8001006:	5ccb      	ldrb	r3, [r1, r3]
 8001008:	f003 031f 	and.w	r3, r3, #31
 800100c:	fa22 f303 	lsr.w	r3, r2, r3
 8001010:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <HAL_Init+0x68>)
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <HAL_Init+0x6c>)
 800101c:	5cd3      	ldrb	r3, [r2, r3]
 800101e:	f003 031f 	and.w	r3, r3, #31
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	fa22 f303 	lsr.w	r3, r2, r3
 8001028:	4a0b      	ldr	r2, [pc, #44]	@ (8001058 <HAL_Init+0x70>)
 800102a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800102c:	4a0b      	ldr	r2, [pc, #44]	@ (800105c <HAL_Init+0x74>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001032:	200f      	movs	r0, #15
 8001034:	f7ff fea4 	bl	8000d80 <HAL_InitTick>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e002      	b.n	8001048 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001042:	f7ff fd47 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	58024400 	.word	0x58024400
 8001054:	080091c0 	.word	0x080091c0
 8001058:	24000004 	.word	0x24000004
 800105c:	24000000 	.word	0x24000000

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2400000c 	.word	0x2400000c
 8001084:	24000318 	.word	0x24000318

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	24000318 	.word	0x24000318

080010a0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80010b0:	4904      	ldr	r1, [pc, #16]	@ (80010c4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	58000400 	.word	0x58000400

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001108 <__NVIC_SetPriorityGrouping+0x40>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f0:	4b06      	ldr	r3, [pc, #24]	@ (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f6:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <__NVIC_SetPriorityGrouping+0x40>)
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	60d3      	str	r3, [r2, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00
 800110c:	05fa0000 	.word	0x05fa0000

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	@ (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	@ (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	@ 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff4c 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001246:	f7ff ff63 	bl	8001110 <__NVIC_GetPriorityGrouping>
 800124a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	68b9      	ldr	r1, [r7, #8]
 8001250:	6978      	ldr	r0, [r7, #20]
 8001252:	f7ff ffb3 	bl	80011bc <NVIC_EncodePriority>
 8001256:	4602      	mov	r2, r0
 8001258:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff82 	bl	8001168 <__NVIC_SetPriority>
}
 8001264:	bf00      	nop
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff56 	bl	800112c <__NVIC_EnableIRQ>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e0e3      	b.n	8001462 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d106      	bne.n	80012b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2223      	movs	r2, #35	@ 0x23
 80012a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fc2f 	bl	8000b10 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b2:	4b6e      	ldr	r3, [pc, #440]	@ (800146c <HAL_ETH_Init+0x1e4>)
 80012b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012b8:	4a6c      	ldr	r2, [pc, #432]	@ (800146c <HAL_ETH_Init+0x1e4>)
 80012ba:	f043 0302 	orr.w	r3, r3, #2
 80012be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012c2:	4b6a      	ldr	r3, [pc, #424]	@ (800146c <HAL_ETH_Init+0x1e4>)
 80012c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7a1b      	ldrb	r3, [r3, #8]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d103      	bne.n	80012e0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80012d8:	2000      	movs	r0, #0
 80012da:	f7ff fee1 	bl	80010a0 <HAL_SYSCFG_ETHInterfaceSelect>
 80012de:	e003      	b.n	80012e8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80012e0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80012e4:	f7ff fedc 	bl	80010a0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80012e8:	4b61      	ldr	r3, [pc, #388]	@ (8001470 <HAL_ETH_Init+0x1e8>)
 80012ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001302:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001304:	f7ff fec0 	bl	8001088 <HAL_GetTick>
 8001308:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800130a:	e011      	b.n	8001330 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800130c:	f7ff febc 	bl	8001088 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800131a:	d909      	bls.n	8001330 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2204      	movs	r2, #4
 8001320:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	22e0      	movs	r2, #224	@ 0xe0
 8001328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e098      	b.n	8001462 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1e4      	bne.n	800130c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f89e 	bl	8001484 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001348:	f001 fcf2 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 800134c:	4603      	mov	r3, r0
 800134e:	4a49      	ldr	r2, [pc, #292]	@ (8001474 <HAL_ETH_Init+0x1ec>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	0c9a      	lsrs	r2, r3, #18
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3a01      	subs	r2, #1
 800135c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fa81 	bl	8001868 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800136e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001372:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800137e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001382:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d009      	beq.n	80013a6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2201      	movs	r2, #1
 8001396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	22e0      	movs	r2, #224	@ 0xe0
 800139e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e05d      	b.n	8001462 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80013b2:	4b31      	ldr	r3, [pc, #196]	@ (8001478 <HAL_ETH_Init+0x1f0>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6952      	ldr	r2, [r2, #20]
 80013ba:	0051      	lsls	r1, r2, #1
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	430b      	orrs	r3, r1
 80013c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013c6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fae9 	bl	80019a2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 fb2f 	bl	8001a34 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	3305      	adds	r3, #5
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	021a      	lsls	r2, r3, #8
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	3304      	adds	r3, #4
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	3303      	adds	r3, #3
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	061a      	lsls	r2, r3, #24
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	3302      	adds	r3, #2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	041b      	lsls	r3, r3, #16
 8001408:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	3301      	adds	r3, #1
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001414:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001422:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001424:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_ETH_Init+0x1f4>)
 8001436:	430b      	orrs	r3, r1
 8001438:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <HAL_ETH_Init+0x1f8>)
 800144a:	430b      	orrs	r3, r1
 800144c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2210      	movs	r2, #16
 800145c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	58024400 	.word	0x58024400
 8001470:	58000400 	.word	0x58000400
 8001474:	431bde83 	.word	0x431bde83
 8001478:	ffff8001 	.word	0xffff8001
 800147c:	0c020060 	.word	0x0c020060
 8001480:	0c20c000 	.word	0x0c20c000

08001484 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001494:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800149c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800149e:	f001 fc47 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 80014a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001510 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d804      	bhi.n	80014b6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	e022      	b.n	80014fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	4a16      	ldr	r2, [pc, #88]	@ (8001514 <HAL_ETH_SetMDIOClockRange+0x90>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d204      	bcs.n	80014c8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e019      	b.n	80014fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4a13      	ldr	r2, [pc, #76]	@ (8001518 <HAL_ETH_SetMDIOClockRange+0x94>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d915      	bls.n	80014fc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4a12      	ldr	r2, [pc, #72]	@ (800151c <HAL_ETH_SetMDIOClockRange+0x98>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d804      	bhi.n	80014e2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	e00c      	b.n	80014fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001520 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d804      	bhi.n	80014f4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	e003      	b.n	80014fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80014fa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	02160ebf 	.word	0x02160ebf
 8001514:	03938700 	.word	0x03938700
 8001518:	05f5e0ff 	.word	0x05f5e0ff
 800151c:	08f0d17f 	.word	0x08f0d17f
 8001520:	0ee6b27f 	.word	0x0ee6b27f

08001524 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001536:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	791b      	ldrb	r3, [r3, #4]
 800153c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800153e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	7b1b      	ldrb	r3, [r3, #12]
 8001544:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001546:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	7b5b      	ldrb	r3, [r3, #13]
 800154c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800154e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	7b9b      	ldrb	r3, [r3, #14]
 8001554:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001556:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	7bdb      	ldrb	r3, [r3, #15]
 800155c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800155e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	7c12      	ldrb	r2, [r2, #16]
 8001564:	2a00      	cmp	r2, #0
 8001566:	d102      	bne.n	800156e <ETH_SetMACConfig+0x4a>
 8001568:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800156c:	e000      	b.n	8001570 <ETH_SetMACConfig+0x4c>
 800156e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001570:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	7c52      	ldrb	r2, [r2, #17]
 8001576:	2a00      	cmp	r2, #0
 8001578:	d102      	bne.n	8001580 <ETH_SetMACConfig+0x5c>
 800157a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800157e:	e000      	b.n	8001582 <ETH_SetMACConfig+0x5e>
 8001580:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	7c9b      	ldrb	r3, [r3, #18]
 8001588:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800158a:	431a      	orrs	r2, r3
               macconf->Speed |
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001590:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001596:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	7f1b      	ldrb	r3, [r3, #28]
 800159c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800159e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	7f5b      	ldrb	r3, [r3, #29]
 80015a4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80015a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	7f92      	ldrb	r2, [r2, #30]
 80015ac:	2a00      	cmp	r2, #0
 80015ae:	d102      	bne.n	80015b6 <ETH_SetMACConfig+0x92>
 80015b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b4:	e000      	b.n	80015b8 <ETH_SetMACConfig+0x94>
 80015b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80015b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	7fdb      	ldrb	r3, [r3, #31]
 80015be:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80015c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	d102      	bne.n	80015d2 <ETH_SetMACConfig+0xae>
 80015cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015d0:	e000      	b.n	80015d4 <ETH_SetMACConfig+0xb0>
 80015d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80015d4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80015da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80015e2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80015e4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b56      	ldr	r3, [pc, #344]	@ (8001750 <ETH_SetMACConfig+0x22c>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6812      	ldr	r2, [r2, #0]
 80015fc:	68f9      	ldr	r1, [r7, #12]
 80015fe:	430b      	orrs	r3, r1
 8001600:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001606:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800160e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001610:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001618:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800161a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001622:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001624:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800162c:	2a00      	cmp	r2, #0
 800162e:	d102      	bne.n	8001636 <ETH_SetMACConfig+0x112>
 8001630:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001634:	e000      	b.n	8001638 <ETH_SetMACConfig+0x114>
 8001636:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001638:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4b42      	ldr	r3, [pc, #264]	@ (8001754 <ETH_SetMACConfig+0x230>)
 800164a:	4013      	ands	r3, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	68f9      	ldr	r1, [r7, #12]
 8001652:	430b      	orrs	r3, r1
 8001654:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800165c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001662:	4313      	orrs	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	4b3a      	ldr	r3, [pc, #232]	@ (8001758 <ETH_SetMACConfig+0x234>)
 800166e:	4013      	ands	r3, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	68f9      	ldr	r1, [r7, #12]
 8001676:	430b      	orrs	r3, r1
 8001678:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001680:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001686:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800168e:	2a00      	cmp	r2, #0
 8001690:	d101      	bne.n	8001696 <ETH_SetMACConfig+0x172>
 8001692:	2280      	movs	r2, #128	@ 0x80
 8001694:	e000      	b.n	8001698 <ETH_SetMACConfig+0x174>
 8001696:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001698:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016a0:	4313      	orrs	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80016aa:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80016ae:	4013      	ands	r3, r2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	68f9      	ldr	r1, [r7, #12]
 80016b6:	430b      	orrs	r3, r1
 80016b8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80016c0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80016c8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d6:	f023 0103 	bic.w	r1, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80016ee:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800170a:	2a00      	cmp	r2, #0
 800170c:	d101      	bne.n	8001712 <ETH_SetMACConfig+0x1ee>
 800170e:	2240      	movs	r2, #64	@ 0x40
 8001710:	e000      	b.n	8001714 <ETH_SetMACConfig+0x1f0>
 8001712:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001714:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800171c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800171e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001726:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001728:	4313      	orrs	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001734:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	430a      	orrs	r2, r1
 8001740:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	00048083 	.word	0x00048083
 8001754:	c0f88000 	.word	0xc0f88000
 8001758:	fffffef0 	.word	0xfffffef0

0800175c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <ETH_SetDMAConfig+0xf8>)
 8001772:	4013      	ands	r3, r2
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	6811      	ldr	r1, [r2, #0]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	430b      	orrs	r3, r1
 800177e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001782:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	791b      	ldrb	r3, [r3, #4]
 8001788:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800178e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	7b1b      	ldrb	r3, [r3, #12]
 8001794:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001858 <ETH_SetDMAConfig+0xfc>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	68f9      	ldr	r1, [r7, #12]
 80017ae:	430b      	orrs	r3, r1
 80017b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017b4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	7b5b      	ldrb	r3, [r3, #13]
 80017ba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80017d0:	4b22      	ldr	r3, [pc, #136]	@ (800185c <ETH_SetDMAConfig+0x100>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	68f9      	ldr	r1, [r7, #12]
 80017da:	430b      	orrs	r3, r1
 80017dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017e0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	7d1b      	ldrb	r3, [r3, #20]
 80017ec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80017ee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	7f5b      	ldrb	r3, [r3, #29]
 80017f4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001802:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001806:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <ETH_SetDMAConfig+0x104>)
 8001808:	4013      	ands	r3, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	68f9      	ldr	r1, [r7, #12]
 8001810:	430b      	orrs	r3, r1
 8001812:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001816:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	7f1b      	ldrb	r3, [r3, #28]
 800181e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001824:	4313      	orrs	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001830:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <ETH_SetDMAConfig+0x108>)
 8001836:	4013      	ands	r3, r2
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	68f9      	ldr	r1, [r7, #12]
 800183e:	430b      	orrs	r3, r1
 8001840:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001844:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	ffff87fd 	.word	0xffff87fd
 8001858:	ffff2ffe 	.word	0xffff2ffe
 800185c:	fffec000 	.word	0xfffec000
 8001860:	ffc0efef 	.word	0xffc0efef
 8001864:	7fc0ffff 	.word	0x7fc0ffff

08001868 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0a4      	sub	sp, #144	@ 0x90
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001870:	2301      	movs	r3, #1
 8001872:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001876:	2300      	movs	r3, #0
 8001878:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001886:	2301      	movs	r3, #1
 8001888:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800188c:	2301      	movs	r3, #1
 800188e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001892:	2301      	movs	r3, #1
 8001894:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80018b0:	2300      	movs	r3, #0
 80018b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80018c0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80018c4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80018cc:	2300      	movs	r3, #0
 80018ce:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80018e2:	2300      	movs	r3, #0
 80018e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80018ea:	2300      	movs	r3, #0
 80018ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001900:	2320      	movs	r3, #32
 8001902:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001906:	2301      	movs	r3, #1
 8001908:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001912:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001918:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800191c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001924:	2302      	movs	r3, #2
 8001926:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800193c:	2301      	movs	r3, #1
 800193e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001942:	2300      	movs	r3, #0
 8001944:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001946:	2301      	movs	r3, #1
 8001948:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800194c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001950:	4619      	mov	r1, r3
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fde6 	bl	8001524 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001958:	2301      	movs	r3, #1
 800195a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800195c:	2301      	movs	r3, #1
 800195e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001972:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001976:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800197c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001980:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001988:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800198c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800198e:	f107 0308 	add.w	r3, r7, #8
 8001992:	4619      	mov	r1, r3
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff fee1 	bl	800175c <ETH_SetDMAConfig>
}
 800199a:	bf00      	nop
 800199c:	3790      	adds	r7, #144	@ 0x90
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	e01d      	b.n	80019ec <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68d9      	ldr	r1, [r3, #12]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	440b      	add	r3, r1
 80019c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2200      	movs	r2, #0
 80019cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	3206      	adds	r2, #6
 80019e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3301      	adds	r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d9de      	bls.n	80019b0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a00:	461a      	mov	r2, r3
 8001a02:	2303      	movs	r3, #3
 8001a04:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a14:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a24:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e023      	b.n	8001a8a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6919      	ldr	r1, [r3, #16]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2200      	movs	r2, #0
 8001a76:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	3212      	adds	r2, #18
 8001a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b03      	cmp	r3, #3
 8001a8e:	d9d8      	bls.n	8001a42 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	2303      	movs	r3, #3
 8001aba:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aca:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ade:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	@ 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001afe:	4b86      	ldr	r3, [pc, #536]	@ (8001d18 <HAL_GPIO_Init+0x228>)
 8001b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b02:	e18c      	b.n	8001e1e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2101      	movs	r1, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 817e 	beq.w	8001e18 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d005      	beq.n	8001b34 <HAL_GPIO_Init+0x44>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d130      	bne.n	8001b96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	f003 0201 	and.w	r2, r3, #1
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d017      	beq.n	8001bd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d123      	bne.n	8001c26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	08da      	lsrs	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3208      	adds	r2, #8
 8001be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	08da      	lsrs	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3208      	adds	r2, #8
 8001c20:	69b9      	ldr	r1, [r7, #24]
 8001c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0203 	and.w	r2, r3, #3
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80d8 	beq.w	8001e18 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c68:	4b2c      	ldr	r3, [pc, #176]	@ (8001d1c <HAL_GPIO_Init+0x22c>)
 8001c6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8001d1c <HAL_GPIO_Init+0x22c>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c78:	4b28      	ldr	r3, [pc, #160]	@ (8001d1c <HAL_GPIO_Init+0x22c>)
 8001c7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c86:	4a26      	ldr	r2, [pc, #152]	@ (8001d20 <HAL_GPIO_Init+0x230>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a1d      	ldr	r2, [pc, #116]	@ (8001d24 <HAL_GPIO_Init+0x234>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d04a      	beq.n	8001d48 <HAL_GPIO_Init+0x258>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d28 <HAL_GPIO_Init+0x238>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d02b      	beq.n	8001d12 <HAL_GPIO_Init+0x222>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <HAL_GPIO_Init+0x23c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d025      	beq.n	8001d0e <HAL_GPIO_Init+0x21e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d30 <HAL_GPIO_Init+0x240>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01f      	beq.n	8001d0a <HAL_GPIO_Init+0x21a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a19      	ldr	r2, [pc, #100]	@ (8001d34 <HAL_GPIO_Init+0x244>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d019      	beq.n	8001d06 <HAL_GPIO_Init+0x216>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a18      	ldr	r2, [pc, #96]	@ (8001d38 <HAL_GPIO_Init+0x248>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_GPIO_Init+0x212>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a17      	ldr	r2, [pc, #92]	@ (8001d3c <HAL_GPIO_Init+0x24c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00d      	beq.n	8001cfe <HAL_GPIO_Init+0x20e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a16      	ldr	r2, [pc, #88]	@ (8001d40 <HAL_GPIO_Init+0x250>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0x20a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a15      	ldr	r2, [pc, #84]	@ (8001d44 <HAL_GPIO_Init+0x254>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_GPIO_Init+0x206>
 8001cf2:	2309      	movs	r3, #9
 8001cf4:	e029      	b.n	8001d4a <HAL_GPIO_Init+0x25a>
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	e027      	b.n	8001d4a <HAL_GPIO_Init+0x25a>
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	e025      	b.n	8001d4a <HAL_GPIO_Init+0x25a>
 8001cfe:	2306      	movs	r3, #6
 8001d00:	e023      	b.n	8001d4a <HAL_GPIO_Init+0x25a>
 8001d02:	2305      	movs	r3, #5
 8001d04:	e021      	b.n	8001d4a <HAL_GPIO_Init+0x25a>
 8001d06:	2304      	movs	r3, #4
 8001d08:	e01f      	b.n	8001d4a <HAL_GPIO_Init+0x25a>
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e01d      	b.n	8001d4a <HAL_GPIO_Init+0x25a>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e01b      	b.n	8001d4a <HAL_GPIO_Init+0x25a>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e019      	b.n	8001d4a <HAL_GPIO_Init+0x25a>
 8001d16:	bf00      	nop
 8001d18:	58000080 	.word	0x58000080
 8001d1c:	58024400 	.word	0x58024400
 8001d20:	58000400 	.word	0x58000400
 8001d24:	58020000 	.word	0x58020000
 8001d28:	58020400 	.word	0x58020400
 8001d2c:	58020800 	.word	0x58020800
 8001d30:	58020c00 	.word	0x58020c00
 8001d34:	58021000 	.word	0x58021000
 8001d38:	58021400 	.word	0x58021400
 8001d3c:	58021800 	.word	0x58021800
 8001d40:	58021c00 	.word	0x58021c00
 8001d44:	58022400 	.word	0x58022400
 8001d48:	2300      	movs	r3, #0
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	f002 0203 	and.w	r2, r2, #3
 8001d50:	0092      	lsls	r2, r2, #2
 8001d52:	4093      	lsls	r3, r2
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5a:	4938      	ldr	r1, [pc, #224]	@ (8001e3c <HAL_GPIO_Init+0x34c>)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001dbc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f47f ae6b 	bne.w	8001b04 <HAL_GPIO_Init+0x14>
  }
}
 8001e2e:	bf00      	nop
 8001e30:	bf00      	nop
 8001e32:	3724      	adds	r7, #36	@ 0x24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	58000400 	.word	0x58000400

08001e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	807b      	strh	r3, [r7, #2]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e50:	787b      	ldrb	r3, [r7, #1]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e56:	887a      	ldrh	r2, [r7, #2]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e5c:	e003      	b.n	8001e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	041a      	lsls	r2, r3, #16
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	619a      	str	r2, [r3, #24]
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e84:	887a      	ldrh	r2, [r7, #2]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	041a      	lsls	r2, r3, #16
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	43d9      	mvns	r1, r3
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	400b      	ands	r3, r1
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001eb0:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_PWREx_ConfigSupply+0x70>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d00a      	beq.n	8001ed2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ebc:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <HAL_PWREx_ConfigSupply+0x70>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e01f      	b.n	8001f0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e01d      	b.n	8001f0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ed2:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_PWREx_ConfigSupply+0x70>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f023 0207 	bic.w	r2, r3, #7
 8001eda:	490f      	ldr	r1, [pc, #60]	@ (8001f18 <HAL_PWREx_ConfigSupply+0x70>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ee2:	f7ff f8d1 	bl	8001088 <HAL_GetTick>
 8001ee6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ee8:	e009      	b.n	8001efe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001eea:	f7ff f8cd 	bl	8001088 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ef8:	d901      	bls.n	8001efe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e007      	b.n	8001f0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_PWREx_ConfigSupply+0x70>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f0a:	d1ee      	bne.n	8001eea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	58024800 	.word	0x58024800

08001f1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	@ 0x30
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e3c8      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8087 	beq.w	800204a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3c:	4b88      	ldr	r3, [pc, #544]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f46:	4b86      	ldr	r3, [pc, #536]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	d007      	beq.n	8001f62 <HAL_RCC_OscConfig+0x46>
 8001f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f54:	2b18      	cmp	r3, #24
 8001f56:	d110      	bne.n	8001f7a <HAL_RCC_OscConfig+0x5e>
 8001f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d10b      	bne.n	8001f7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f62:	4b7f      	ldr	r3, [pc, #508]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d06c      	beq.n	8002048 <HAL_RCC_OscConfig+0x12c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d168      	bne.n	8002048 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e3a2      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x76>
 8001f84:	4b76      	ldr	r3, [pc, #472]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a75      	ldr	r2, [pc, #468]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e02e      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd4>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x98>
 8001f9a:	4b71      	ldr	r3, [pc, #452]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a70      	ldr	r2, [pc, #448]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001fa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	4b6e      	ldr	r3, [pc, #440]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6d      	ldr	r2, [pc, #436]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001fac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	e01d      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd4>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fbc:	d10c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0xbc>
 8001fbe:	4b68      	ldr	r3, [pc, #416]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a67      	ldr	r2, [pc, #412]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	4b65      	ldr	r3, [pc, #404]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a64      	ldr	r2, [pc, #400]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e00b      	b.n	8001ff0 <HAL_RCC_OscConfig+0xd4>
 8001fd8:	4b61      	ldr	r3, [pc, #388]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a60      	ldr	r2, [pc, #384]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8001fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d013      	beq.n	8002020 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f846 	bl	8001088 <HAL_GetTick>
 8001ffc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002000:	f7ff f842 	bl	8001088 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	@ 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e356      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002012:	4b53      	ldr	r3, [pc, #332]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0xe4>
 800201e:	e014      	b.n	800204a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff f832 	bl	8001088 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002028:	f7ff f82e 	bl	8001088 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	@ 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e342      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800203a:	4b49      	ldr	r3, [pc, #292]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x10c>
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 808c 	beq.w	8002170 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002058:	4b41      	ldr	r3, [pc, #260]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002060:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002062:	4b3f      	ldr	r3, [pc, #252]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8002064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002066:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <HAL_RCC_OscConfig+0x162>
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	2b18      	cmp	r3, #24
 8002072:	d137      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1c8>
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d132      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800207e:	4b38      	ldr	r3, [pc, #224]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_RCC_OscConfig+0x17a>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e314      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002096:	4b32      	ldr	r3, [pc, #200]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0219 	bic.w	r2, r3, #25
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	492f      	ldr	r1, [pc, #188]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe ffee 	bl	8001088 <HAL_GetTick>
 80020ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b0:	f7fe ffea 	bl	8001088 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e2fe      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020c2:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ce:	4b24      	ldr	r3, [pc, #144]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	061b      	lsls	r3, r3, #24
 80020dc:	4920      	ldr	r1, [pc, #128]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e2:	e045      	b.n	8002170 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d026      	beq.n	800213a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f023 0219 	bic.w	r2, r3, #25
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4919      	ldr	r1, [pc, #100]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7fe ffc3 	bl	8001088 <HAL_GetTick>
 8002102:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002106:	f7fe ffbf 	bl	8001088 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e2d3      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002118:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	061b      	lsls	r3, r3, #24
 8002132:	490b      	ldr	r1, [pc, #44]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
 8002138:	e01a      	b.n	8002170 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213a:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a08      	ldr	r2, [pc, #32]	@ (8002160 <HAL_RCC_OscConfig+0x244>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002146:	f7fe ff9f 	bl	8001088 <HAL_GetTick>
 800214a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800214c:	e00a      	b.n	8002164 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214e:	f7fe ff9b 	bl	8001088 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d903      	bls.n	8002164 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e2af      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
 8002160:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002164:	4b96      	ldr	r3, [pc, #600]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1ee      	bne.n	800214e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b00      	cmp	r3, #0
 800217a:	d06a      	beq.n	8002252 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217c:	4b90      	ldr	r3, [pc, #576]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002184:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002186:	4b8e      	ldr	r3, [pc, #568]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 8002188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b08      	cmp	r3, #8
 8002190:	d007      	beq.n	80021a2 <HAL_RCC_OscConfig+0x286>
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b18      	cmp	r3, #24
 8002196:	d11b      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2b4>
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d116      	bne.n	80021d0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021a2:	4b87      	ldr	r3, [pc, #540]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_RCC_OscConfig+0x29e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	2b80      	cmp	r3, #128	@ 0x80
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e282      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021ba:	4b81      	ldr	r3, [pc, #516]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	061b      	lsls	r3, r3, #24
 80021c8:	497d      	ldr	r1, [pc, #500]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021ce:	e040      	b.n	8002252 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d023      	beq.n	8002220 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021d8:	4b79      	ldr	r3, [pc, #484]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a78      	ldr	r2, [pc, #480]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80021de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe ff50 	bl	8001088 <HAL_GetTick>
 80021e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021ec:	f7fe ff4c 	bl	8001088 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e260      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021fe:	4b70      	ldr	r3, [pc, #448]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800220a:	4b6d      	ldr	r3, [pc, #436]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	061b      	lsls	r3, r3, #24
 8002218:	4969      	ldr	r1, [pc, #420]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 800221a:	4313      	orrs	r3, r2
 800221c:	60cb      	str	r3, [r1, #12]
 800221e:	e018      	b.n	8002252 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002220:	4b67      	ldr	r3, [pc, #412]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a66      	ldr	r2, [pc, #408]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 8002226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800222a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7fe ff2c 	bl	8001088 <HAL_GetTick>
 8002230:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002234:	f7fe ff28 	bl	8001088 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e23c      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002246:	4b5e      	ldr	r3, [pc, #376]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d036      	beq.n	80022cc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d019      	beq.n	800229a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002266:	4b56      	ldr	r3, [pc, #344]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 8002268:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800226a:	4a55      	ldr	r2, [pc, #340]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7fe ff09 	bl	8001088 <HAL_GetTick>
 8002276:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800227a:	f7fe ff05 	bl	8001088 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e219      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800228c:	4b4c      	ldr	r3, [pc, #304]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 800228e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x35e>
 8002298:	e018      	b.n	80022cc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229a:	4b49      	ldr	r3, [pc, #292]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 800229c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800229e:	4a48      	ldr	r2, [pc, #288]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80022a0:	f023 0301 	bic.w	r3, r3, #1
 80022a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7fe feef 	bl	8001088 <HAL_GetTick>
 80022aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ae:	f7fe feeb 	bl	8001088 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1ff      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022c0:	4b3f      	ldr	r3, [pc, #252]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80022c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1f0      	bne.n	80022ae <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d036      	beq.n	8002346 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d019      	beq.n	8002314 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022e0:	4b37      	ldr	r3, [pc, #220]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a36      	ldr	r2, [pc, #216]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80022e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022ec:	f7fe fecc 	bl	8001088 <HAL_GetTick>
 80022f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022f4:	f7fe fec8 	bl	8001088 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e1dc      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002306:	4b2e      	ldr	r3, [pc, #184]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x3d8>
 8002312:	e018      	b.n	8002346 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002314:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a29      	ldr	r2, [pc, #164]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 800231a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800231e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002320:	f7fe feb2 	bl	8001088 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002328:	f7fe feae 	bl	8001088 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1c2      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800233a:	4b21      	ldr	r3, [pc, #132]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8086 	beq.w	8002460 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <HAL_RCC_OscConfig+0x4a8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1a      	ldr	r2, [pc, #104]	@ (80023c4 <HAL_RCC_OscConfig+0x4a8>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800235e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002360:	f7fe fe92 	bl	8001088 <HAL_GetTick>
 8002364:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002368:	f7fe fe8e 	bl	8001088 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	@ 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1a2      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800237a:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_RCC_OscConfig+0x4a8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d106      	bne.n	800239c <HAL_RCC_OscConfig+0x480>
 800238e:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 8002390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002392:	4a0b      	ldr	r2, [pc, #44]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6713      	str	r3, [r2, #112]	@ 0x70
 800239a:	e032      	b.n	8002402 <HAL_RCC_OscConfig+0x4e6>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d111      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4ac>
 80023a4:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a8:	4a05      	ldr	r2, [pc, #20]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80023b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b4:	4a02      	ldr	r2, [pc, #8]	@ (80023c0 <HAL_RCC_OscConfig+0x4a4>)
 80023b6:	f023 0304 	bic.w	r3, r3, #4
 80023ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80023bc:	e021      	b.n	8002402 <HAL_RCC_OscConfig+0x4e6>
 80023be:	bf00      	nop
 80023c0:	58024400 	.word	0x58024400
 80023c4:	58024800 	.word	0x58024800
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d10c      	bne.n	80023ea <HAL_RCC_OscConfig+0x4ce>
 80023d0:	4b83      	ldr	r3, [pc, #524]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d4:	4a82      	ldr	r2, [pc, #520]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	6713      	str	r3, [r2, #112]	@ 0x70
 80023dc:	4b80      	ldr	r3, [pc, #512]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	4a7f      	ldr	r2, [pc, #508]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e8:	e00b      	b.n	8002402 <HAL_RCC_OscConfig+0x4e6>
 80023ea:	4b7d      	ldr	r3, [pc, #500]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ee:	4a7c      	ldr	r2, [pc, #496]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f6:	4b7a      	ldr	r3, [pc, #488]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fa:	4a79      	ldr	r2, [pc, #484]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d015      	beq.n	8002436 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7fe fe3d 	bl	8001088 <HAL_GetTick>
 800240e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe fe39 	bl	8001088 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e14b      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002428:	4b6d      	ldr	r3, [pc, #436]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 800242a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ee      	beq.n	8002412 <HAL_RCC_OscConfig+0x4f6>
 8002434:	e014      	b.n	8002460 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002436:	f7fe fe27 	bl	8001088 <HAL_GetTick>
 800243a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe fe23 	bl	8001088 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e135      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002454:	4b62      	ldr	r3, [pc, #392]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ee      	bne.n	800243e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 812a 	beq.w	80026be <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800246a:	4b5d      	ldr	r3, [pc, #372]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002472:	2b18      	cmp	r3, #24
 8002474:	f000 80ba 	beq.w	80025ec <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	2b02      	cmp	r3, #2
 800247e:	f040 8095 	bne.w	80025ac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002482:	4b57      	ldr	r3, [pc, #348]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a56      	ldr	r2, [pc, #344]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002488:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800248c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7fe fdfb 	bl	8001088 <HAL_GetTick>
 8002492:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7fe fdf7 	bl	8001088 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e10b      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024a8:	4b4d      	ldr	r3, [pc, #308]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b4:	4b4a      	ldr	r3, [pc, #296]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80024b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024b8:	4b4a      	ldr	r3, [pc, #296]	@ (80025e4 <HAL_RCC_OscConfig+0x6c8>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	430a      	orrs	r2, r1
 80024c8:	4945      	ldr	r1, [pc, #276]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	628b      	str	r3, [r1, #40]	@ 0x28
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024dc:	3b01      	subs	r3, #1
 80024de:	025b      	lsls	r3, r3, #9
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e8:	3b01      	subs	r3, #1
 80024ea:	041b      	lsls	r3, r3, #16
 80024ec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	3b01      	subs	r3, #1
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80024fe:	4938      	ldr	r1, [pc, #224]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002504:	4b36      	ldr	r3, [pc, #216]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	4a35      	ldr	r2, [pc, #212]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002510:	4b33      	ldr	r3, [pc, #204]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002514:	4b34      	ldr	r3, [pc, #208]	@ (80025e8 <HAL_RCC_OscConfig+0x6cc>)
 8002516:	4013      	ands	r3, r2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800251c:	00d2      	lsls	r2, r2, #3
 800251e:	4930      	ldr	r1, [pc, #192]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002524:	4b2e      	ldr	r3, [pc, #184]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002528:	f023 020c 	bic.w	r2, r3, #12
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	492b      	ldr	r1, [pc, #172]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002536:	4b2a      	ldr	r3, [pc, #168]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253a:	f023 0202 	bic.w	r2, r3, #2
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	4927      	ldr	r1, [pc, #156]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002548:	4b25      	ldr	r3, [pc, #148]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	4a24      	ldr	r2, [pc, #144]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002554:	4b22      	ldr	r3, [pc, #136]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002558:	4a21      	ldr	r2, [pc, #132]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 800255a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800255e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002560:	4b1f      	ldr	r3, [pc, #124]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002564:	4a1e      	ldr	r2, [pc, #120]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002566:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800256a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800256c:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 800256e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002570:	4a1b      	ldr	r2, [pc, #108]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002578:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a18      	ldr	r2, [pc, #96]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 800257e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fd80 	bl	8001088 <HAL_GetTick>
 8002588:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe fd7c 	bl	8001088 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e090      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x670>
 80025aa:	e088      	b.n	80026be <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ac:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0b      	ldr	r2, [pc, #44]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80025b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fd66 	bl	8001088 <HAL_GetTick>
 80025bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7fe fd62 	bl	8001088 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e076      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025d2:	4b03      	ldr	r3, [pc, #12]	@ (80025e0 <HAL_RCC_OscConfig+0x6c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x6a4>
 80025de:	e06e      	b.n	80026be <HAL_RCC_OscConfig+0x7a2>
 80025e0:	58024400 	.word	0x58024400
 80025e4:	fffffc0c 	.word	0xfffffc0c
 80025e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80025ec:	4b36      	ldr	r3, [pc, #216]	@ (80026c8 <HAL_RCC_OscConfig+0x7ac>)
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025f2:	4b35      	ldr	r3, [pc, #212]	@ (80026c8 <HAL_RCC_OscConfig+0x7ac>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d031      	beq.n	8002664 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f003 0203 	and.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d12a      	bne.n	8002664 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d122      	bne.n	8002664 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d11a      	bne.n	8002664 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	0a5b      	lsrs	r3, r3, #9
 8002632:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800263c:	429a      	cmp	r2, r3
 800263e:	d111      	bne.n	8002664 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d108      	bne.n	8002664 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	0e1b      	lsrs	r3, r3, #24
 8002656:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e02b      	b.n	80026c0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002668:	4b17      	ldr	r3, [pc, #92]	@ (80026c8 <HAL_RCC_OscConfig+0x7ac>)
 800266a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800266c:	08db      	lsrs	r3, r3, #3
 800266e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002672:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	429a      	cmp	r2, r3
 800267c:	d01f      	beq.n	80026be <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800267e:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <HAL_RCC_OscConfig+0x7ac>)
 8002680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002682:	4a11      	ldr	r2, [pc, #68]	@ (80026c8 <HAL_RCC_OscConfig+0x7ac>)
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800268a:	f7fe fcfd 	bl	8001088 <HAL_GetTick>
 800268e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002690:	bf00      	nop
 8002692:	f7fe fcf9 	bl	8001088 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	4293      	cmp	r3, r2
 800269c:	d0f9      	beq.n	8002692 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800269e:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <HAL_RCC_OscConfig+0x7ac>)
 80026a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026a2:	4b0a      	ldr	r3, [pc, #40]	@ (80026cc <HAL_RCC_OscConfig+0x7b0>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026aa:	00d2      	lsls	r2, r2, #3
 80026ac:	4906      	ldr	r1, [pc, #24]	@ (80026c8 <HAL_RCC_OscConfig+0x7ac>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80026b2:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_RCC_OscConfig+0x7ac>)
 80026b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b6:	4a04      	ldr	r2, [pc, #16]	@ (80026c8 <HAL_RCC_OscConfig+0x7ac>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3730      	adds	r7, #48	@ 0x30
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	58024400 	.word	0x58024400
 80026cc:	ffff0007 	.word	0xffff0007

080026d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e19c      	b.n	8002a1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b8a      	ldr	r3, [pc, #552]	@ (8002910 <HAL_RCC_ClockConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d910      	bls.n	8002714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b87      	ldr	r3, [pc, #540]	@ (8002910 <HAL_RCC_ClockConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 020f 	bic.w	r2, r3, #15
 80026fa:	4985      	ldr	r1, [pc, #532]	@ (8002910 <HAL_RCC_ClockConfig+0x240>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b83      	ldr	r3, [pc, #524]	@ (8002910 <HAL_RCC_ClockConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e184      	b.n	8002a1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	4b7b      	ldr	r3, [pc, #492]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800272c:	429a      	cmp	r2, r3
 800272e:	d908      	bls.n	8002742 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002730:	4b78      	ldr	r3, [pc, #480]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	4975      	ldr	r1, [pc, #468]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 800273e:	4313      	orrs	r3, r2
 8002740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d010      	beq.n	8002770 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	4b70      	ldr	r3, [pc, #448]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800275a:	429a      	cmp	r2, r3
 800275c:	d908      	bls.n	8002770 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800275e:	4b6d      	ldr	r3, [pc, #436]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	496a      	ldr	r1, [pc, #424]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 800276c:	4313      	orrs	r3, r2
 800276e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0310 	and.w	r3, r3, #16
 8002778:	2b00      	cmp	r3, #0
 800277a:	d010      	beq.n	800279e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	4b64      	ldr	r3, [pc, #400]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002788:	429a      	cmp	r2, r3
 800278a:	d908      	bls.n	800279e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800278c:	4b61      	ldr	r3, [pc, #388]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	495e      	ldr	r1, [pc, #376]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 800279a:	4313      	orrs	r3, r2
 800279c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d010      	beq.n	80027cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69da      	ldr	r2, [r3, #28]
 80027ae:	4b59      	ldr	r3, [pc, #356]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d908      	bls.n	80027cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80027ba:	4b56      	ldr	r3, [pc, #344]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4953      	ldr	r1, [pc, #332]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d010      	beq.n	80027fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d908      	bls.n	80027fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f023 020f 	bic.w	r2, r3, #15
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4947      	ldr	r1, [pc, #284]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d055      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002806:	4b43      	ldr	r3, [pc, #268]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	4940      	ldr	r1, [pc, #256]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 8002814:	4313      	orrs	r3, r2
 8002816:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d107      	bne.n	8002830 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002820:	4b3c      	ldr	r3, [pc, #240]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d121      	bne.n	8002870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0f6      	b.n	8002a1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d107      	bne.n	8002848 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002838:	4b36      	ldr	r3, [pc, #216]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d115      	bne.n	8002870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0ea      	b.n	8002a1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d107      	bne.n	8002860 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002850:	4b30      	ldr	r3, [pc, #192]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0de      	b.n	8002a1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002860:	4b2c      	ldr	r3, [pc, #176]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0d6      	b.n	8002a1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002870:	4b28      	ldr	r3, [pc, #160]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f023 0207 	bic.w	r2, r3, #7
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4925      	ldr	r1, [pc, #148]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 800287e:	4313      	orrs	r3, r2
 8002880:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002882:	f7fe fc01 	bl	8001088 <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288a:	f7fe fbfd 	bl	8001088 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e0be      	b.n	8002a1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d1eb      	bne.n	800288a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d010      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	4b14      	ldr	r3, [pc, #80]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d208      	bcs.n	80028e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ce:	4b11      	ldr	r3, [pc, #68]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f023 020f 	bic.w	r2, r3, #15
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	490e      	ldr	r1, [pc, #56]	@ (8002914 <HAL_RCC_ClockConfig+0x244>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002910 <HAL_RCC_ClockConfig+0x240>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d214      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <HAL_RCC_ClockConfig+0x240>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 020f 	bic.w	r2, r3, #15
 80028f6:	4906      	ldr	r1, [pc, #24]	@ (8002910 <HAL_RCC_ClockConfig+0x240>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <HAL_RCC_ClockConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e086      	b.n	8002a1e <HAL_RCC_ClockConfig+0x34e>
 8002910:	52002000 	.word	0x52002000
 8002914:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d010      	beq.n	8002946 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	4b3f      	ldr	r3, [pc, #252]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002930:	429a      	cmp	r2, r3
 8002932:	d208      	bcs.n	8002946 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002934:	4b3c      	ldr	r3, [pc, #240]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	4939      	ldr	r1, [pc, #228]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 8002942:	4313      	orrs	r3, r2
 8002944:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d010      	beq.n	8002974 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	4b34      	ldr	r3, [pc, #208]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800295e:	429a      	cmp	r2, r3
 8002960:	d208      	bcs.n	8002974 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002962:	4b31      	ldr	r3, [pc, #196]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	492e      	ldr	r1, [pc, #184]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 8002970:	4313      	orrs	r3, r2
 8002972:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b00      	cmp	r3, #0
 800297e:	d010      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699a      	ldr	r2, [r3, #24]
 8002984:	4b28      	ldr	r3, [pc, #160]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800298c:	429a      	cmp	r2, r3
 800298e:	d208      	bcs.n	80029a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002990:	4b25      	ldr	r3, [pc, #148]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	4922      	ldr	r1, [pc, #136]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d010      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d208      	bcs.n	80029d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029be:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	4917      	ldr	r1, [pc, #92]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029d0:	f000 f834 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b14      	ldr	r3, [pc, #80]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	4912      	ldr	r1, [pc, #72]	@ (8002a2c <HAL_RCC_ClockConfig+0x35c>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
 80029ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002a28 <HAL_RCC_ClockConfig+0x358>)
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	4a0d      	ldr	r2, [pc, #52]	@ (8002a2c <HAL_RCC_ClockConfig+0x35c>)
 80029f8:	5cd3      	ldrb	r3, [r2, r3]
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	4a0a      	ldr	r2, [pc, #40]	@ (8002a30 <HAL_RCC_ClockConfig+0x360>)
 8002a06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a08:	4a0a      	ldr	r2, [pc, #40]	@ (8002a34 <HAL_RCC_ClockConfig+0x364>)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <HAL_RCC_ClockConfig+0x368>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe f9b4 	bl	8000d80 <HAL_InitTick>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	58024400 	.word	0x58024400
 8002a2c:	080091c0 	.word	0x080091c0
 8002a30:	24000004 	.word	0x24000004
 8002a34:	24000000 	.word	0x24000000
 8002a38:	24000008 	.word	0x24000008

08002a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	@ 0x24
 8002a40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a42:	4bb3      	ldr	r3, [pc, #716]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a4a:	2b18      	cmp	r3, #24
 8002a4c:	f200 8155 	bhi.w	8002cfa <HAL_RCC_GetSysClockFreq+0x2be>
 8002a50:	a201      	add	r2, pc, #4	@ (adr r2, 8002a58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a56:	bf00      	nop
 8002a58:	08002abd 	.word	0x08002abd
 8002a5c:	08002cfb 	.word	0x08002cfb
 8002a60:	08002cfb 	.word	0x08002cfb
 8002a64:	08002cfb 	.word	0x08002cfb
 8002a68:	08002cfb 	.word	0x08002cfb
 8002a6c:	08002cfb 	.word	0x08002cfb
 8002a70:	08002cfb 	.word	0x08002cfb
 8002a74:	08002cfb 	.word	0x08002cfb
 8002a78:	08002ae3 	.word	0x08002ae3
 8002a7c:	08002cfb 	.word	0x08002cfb
 8002a80:	08002cfb 	.word	0x08002cfb
 8002a84:	08002cfb 	.word	0x08002cfb
 8002a88:	08002cfb 	.word	0x08002cfb
 8002a8c:	08002cfb 	.word	0x08002cfb
 8002a90:	08002cfb 	.word	0x08002cfb
 8002a94:	08002cfb 	.word	0x08002cfb
 8002a98:	08002ae9 	.word	0x08002ae9
 8002a9c:	08002cfb 	.word	0x08002cfb
 8002aa0:	08002cfb 	.word	0x08002cfb
 8002aa4:	08002cfb 	.word	0x08002cfb
 8002aa8:	08002cfb 	.word	0x08002cfb
 8002aac:	08002cfb 	.word	0x08002cfb
 8002ab0:	08002cfb 	.word	0x08002cfb
 8002ab4:	08002cfb 	.word	0x08002cfb
 8002ab8:	08002aef 	.word	0x08002aef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002abc:	4b94      	ldr	r3, [pc, #592]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d009      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ac8:	4b91      	ldr	r3, [pc, #580]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	08db      	lsrs	r3, r3, #3
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	4a90      	ldr	r2, [pc, #576]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ada:	e111      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002adc:	4b8d      	ldr	r3, [pc, #564]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ade:	61bb      	str	r3, [r7, #24]
      break;
 8002ae0:	e10e      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ae4:	61bb      	str	r3, [r7, #24]
      break;
 8002ae6:	e10b      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002aea:	61bb      	str	r3, [r7, #24]
      break;
 8002aec:	e108      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002aee:	4b88      	ldr	r3, [pc, #544]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002af8:	4b85      	ldr	r3, [pc, #532]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b04:	4b82      	ldr	r3, [pc, #520]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002b0e:	4b80      	ldr	r3, [pc, #512]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b12:	08db      	lsrs	r3, r3, #3
 8002b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80e1 	beq.w	8002cf4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	f000 8083 	beq.w	8002c40 <HAL_RCC_GetSysClockFreq+0x204>
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	f200 80a1 	bhi.w	8002c84 <HAL_RCC_GetSysClockFreq+0x248>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x114>
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d056      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b4e:	e099      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b50:	4b6f      	ldr	r3, [pc, #444]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d02d      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	08db      	lsrs	r3, r3, #3
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	4a6b      	ldr	r2, [pc, #428]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b86:	4b62      	ldr	r3, [pc, #392]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b9a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002bb6:	e087      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002d24 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bca:	4b51      	ldr	r3, [pc, #324]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bde:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bfa:	e065      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c06:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002d28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c0e:	4b40      	ldr	r3, [pc, #256]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c22:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c3e:	e043      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	ee07 3a90 	vmov	s15, r3
 8002c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002d2c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c52:	4b2f      	ldr	r3, [pc, #188]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5a:	ee07 3a90 	vmov	s15, r3
 8002c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c62:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c66:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c82:	e021      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002d28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c96:	4b1e      	ldr	r3, [pc, #120]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c9e:	ee07 3a90 	vmov	s15, r3
 8002ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ca6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002caa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002d20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002cc6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002cc8:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ccc:	0a5b      	lsrs	r3, r3, #9
 8002cce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	ee07 3a90 	vmov	s15, r3
 8002cdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cec:	ee17 3a90 	vmov	r3, s15
 8002cf0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002cf2:	e005      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
      break;
 8002cf8:	e002      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002cfa:	4b07      	ldr	r3, [pc, #28]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cfc:	61bb      	str	r3, [r7, #24]
      break;
 8002cfe:	bf00      	nop
  }

  return sysclockfreq;
 8002d00:	69bb      	ldr	r3, [r7, #24]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3724      	adds	r7, #36	@ 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	58024400 	.word	0x58024400
 8002d14:	03d09000 	.word	0x03d09000
 8002d18:	003d0900 	.word	0x003d0900
 8002d1c:	007a1200 	.word	0x007a1200
 8002d20:	46000000 	.word	0x46000000
 8002d24:	4c742400 	.word	0x4c742400
 8002d28:	4a742400 	.word	0x4a742400
 8002d2c:	4af42400 	.word	0x4af42400

08002d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d36:	f7ff fe81 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	4b10      	ldr	r3, [pc, #64]	@ (8002d80 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	0a1b      	lsrs	r3, r3, #8
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	490f      	ldr	r1, [pc, #60]	@ (8002d84 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d48:	5ccb      	ldrb	r3, [r1, r3]
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d54:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	4a09      	ldr	r2, [pc, #36]	@ (8002d84 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6a:	4a07      	ldr	r2, [pc, #28]	@ (8002d88 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d6e:	4a07      	ldr	r2, [pc, #28]	@ (8002d8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	58024400 	.word	0x58024400
 8002d84:	080091c0 	.word	0x080091c0
 8002d88:	24000004 	.word	0x24000004
 8002d8c:	24000000 	.word	0x24000000

08002d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d94:	f7ff ffcc 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4904      	ldr	r1, [pc, #16]	@ (8002db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	58024400 	.word	0x58024400
 8002db8:	080091c0 	.word	0x080091c0

08002dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002dc0:	f7ff ffb6 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4904      	ldr	r1, [pc, #16]	@ (8002de4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002dd2:	5ccb      	ldrb	r3, [r1, r3]
 8002dd4:	f003 031f 	and.w	r3, r3, #31
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	58024400 	.word	0x58024400
 8002de4:	080091c0 	.word	0x080091c0

08002de8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	223f      	movs	r2, #63	@ 0x3f
 8002df6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002df8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e64 <HAL_RCC_GetClockConfig+0x7c>)
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0207 	and.w	r2, r3, #7
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002e04:	4b17      	ldr	r3, [pc, #92]	@ (8002e64 <HAL_RCC_GetClockConfig+0x7c>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002e10:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <HAL_RCC_GetClockConfig+0x7c>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 020f 	and.w	r2, r3, #15
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002e1c:	4b11      	ldr	r3, [pc, #68]	@ (8002e64 <HAL_RCC_GetClockConfig+0x7c>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002e28:	4b0e      	ldr	r3, [pc, #56]	@ (8002e64 <HAL_RCC_GetClockConfig+0x7c>)
 8002e2a:	69db      	ldr	r3, [r3, #28]
 8002e2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_RCC_GetClockConfig+0x7c>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002e40:	4b08      	ldr	r3, [pc, #32]	@ (8002e64 <HAL_RCC_GetClockConfig+0x7c>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e4c:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_RCC_GetClockConfig+0x80>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 020f 	and.w	r2, r3, #15
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	601a      	str	r2, [r3, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	58024400 	.word	0x58024400
 8002e68:	52002000 	.word	0x52002000

08002e6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e70:	b0c6      	sub	sp, #280	@ 0x118
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002e90:	2500      	movs	r5, #0
 8002e92:	ea54 0305 	orrs.w	r3, r4, r5
 8002e96:	d049      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ea2:	d02f      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002ea4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002ea8:	d828      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002eaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eae:	d01a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002eb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002eb4:	d822      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ebe:	d007      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ec0:	e01c      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ec2:	4bab      	ldr	r3, [pc, #684]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	4aaa      	ldr	r2, [pc, #680]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002ec8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ece:	e01a      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f001 fc25 	bl	8004728 <RCCEx_PLL2_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002ee4:	e00f      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002eea:	3328      	adds	r3, #40	@ 0x28
 8002eec:	2102      	movs	r1, #2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 fccc 	bl	800488c <RCCEx_PLL3_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002efa:	e004      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002f02:	e000      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10a      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002f0e:	4b98      	ldr	r3, [pc, #608]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f1c:	4a94      	ldr	r2, [pc, #592]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f22:	e003      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002f28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002f38:	f04f 0900 	mov.w	r9, #0
 8002f3c:	ea58 0309 	orrs.w	r3, r8, r9
 8002f40:	d047      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d82a      	bhi.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f69 	.word	0x08002f69
 8002f58:	08002f77 	.word	0x08002f77
 8002f5c:	08002f8d 	.word	0x08002f8d
 8002f60:	08002fab 	.word	0x08002fab
 8002f64:	08002fab 	.word	0x08002fab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f68:	4b81      	ldr	r3, [pc, #516]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	4a80      	ldr	r2, [pc, #512]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f74:	e01a      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f7a:	3308      	adds	r3, #8
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 fbd2 	bl	8004728 <RCCEx_PLL2_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f8a:	e00f      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002f90:	3328      	adds	r3, #40	@ 0x28
 8002f92:	2100      	movs	r1, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f001 fc79 	bl	800488c <RCCEx_PLL3_Config>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fa0:	e004      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8002fa8:	e000      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb4:	4b6e      	ldr	r3, [pc, #440]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb8:	f023 0107 	bic.w	r1, r3, #7
 8002fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc2:	4a6b      	ldr	r2, [pc, #428]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fc8:	e003      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8002fce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fda:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8002fde:	f04f 0b00 	mov.w	fp, #0
 8002fe2:	ea5a 030b 	orrs.w	r3, sl, fp
 8002fe6:	d05b      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ff0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002ff4:	d03b      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002ff6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8002ffa:	d834      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002ffc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003000:	d037      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003002:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003006:	d82e      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003008:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800300c:	d033      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800300e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003012:	d828      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003018:	d01a      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800301a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800301e:	d822      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003024:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003028:	d007      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800302a:	e01c      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800302c:	4b50      	ldr	r3, [pc, #320]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	4a4f      	ldr	r2, [pc, #316]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003038:	e01e      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800303a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800303e:	3308      	adds	r3, #8
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f001 fb70 	bl	8004728 <RCCEx_PLL2_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800304e:	e013      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003054:	3328      	adds	r3, #40	@ 0x28
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f001 fc17 	bl	800488c <RCCEx_PLL3_Config>
 800305e:	4603      	mov	r3, r0
 8003060:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003064:	e008      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800306c:	e004      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800306e:	bf00      	nop
 8003070:	e002      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003072:	bf00      	nop
 8003074:	e000      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003080:	4b3b      	ldr	r3, [pc, #236]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003084:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800308c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003090:	4a37      	ldr	r2, [pc, #220]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003092:	430b      	orrs	r3, r1
 8003094:	6593      	str	r3, [r2, #88]	@ 0x58
 8003096:	e003      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003098:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800309c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80030a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80030ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80030b0:	2300      	movs	r3, #0
 80030b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80030b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80030ba:	460b      	mov	r3, r1
 80030bc:	4313      	orrs	r3, r2
 80030be:	d05d      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80030c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030c8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80030cc:	d03b      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80030ce:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80030d2:	d834      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80030d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030d8:	d037      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80030da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030de:	d82e      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80030e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030e4:	d033      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80030e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030ea:	d828      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80030ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030f0:	d01a      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80030f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030f6:	d822      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80030fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003100:	d007      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003102:	e01c      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003104:	4b1a      	ldr	r3, [pc, #104]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	4a19      	ldr	r2, [pc, #100]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800310a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800310e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003110:	e01e      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003116:	3308      	adds	r3, #8
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f001 fb04 	bl	8004728 <RCCEx_PLL2_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003126:	e013      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800312c:	3328      	adds	r3, #40	@ 0x28
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f001 fbab 	bl	800488c <RCCEx_PLL3_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800313c:	e008      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003144:	e004      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003146:	bf00      	nop
 8003148:	e002      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800314e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003150:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10d      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003164:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003168:	4a01      	ldr	r2, [pc, #4]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800316a:	430b      	orrs	r3, r1
 800316c:	6593      	str	r3, [r2, #88]	@ 0x58
 800316e:	e005      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003170:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800317c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003188:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003192:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003196:	460b      	mov	r3, r1
 8003198:	4313      	orrs	r3, r2
 800319a:	d03a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800319c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a2:	2b30      	cmp	r3, #48	@ 0x30
 80031a4:	d01f      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80031a6:	2b30      	cmp	r3, #48	@ 0x30
 80031a8:	d819      	bhi.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x372>
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d00c      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d815      	bhi.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x372>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d019      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80031b6:	2b10      	cmp	r3, #16
 80031b8:	d111      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031ba:	4baa      	ldr	r3, [pc, #680]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031be:	4aa9      	ldr	r2, [pc, #676]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80031c6:	e011      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031cc:	3308      	adds	r3, #8
 80031ce:	2102      	movs	r1, #2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f001 faa9 	bl	8004728 <RCCEx_PLL2_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80031dc:	e006      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80031e4:	e002      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80031e6:	bf00      	nop
 80031e8:	e000      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80031ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80031f4:	4b9b      	ldr	r3, [pc, #620]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80031f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80031fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003202:	4a98      	ldr	r2, [pc, #608]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003204:	430b      	orrs	r3, r1
 8003206:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003208:	e003      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800320e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800321e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003222:	2300      	movs	r3, #0
 8003224:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003228:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800322c:	460b      	mov	r3, r1
 800322e:	4313      	orrs	r3, r2
 8003230:	d051      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003238:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800323c:	d035      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800323e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003242:	d82e      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003244:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003248:	d031      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x442>
 800324a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800324e:	d828      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003250:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003254:	d01a      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800325a:	d822      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003264:	d007      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003266:	e01c      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003268:	4b7e      	ldr	r3, [pc, #504]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800326a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326c:	4a7d      	ldr	r2, [pc, #500]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800326e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003272:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003274:	e01c      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800327a:	3308      	adds	r3, #8
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f001 fa52 	bl	8004728 <RCCEx_PLL2_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800328a:	e011      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800328c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003290:	3328      	adds	r3, #40	@ 0x28
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f001 faf9 	bl	800488c <RCCEx_PLL3_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80032a0:	e006      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032a8:	e002      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80032ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80032b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80032c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c6:	4a67      	ldr	r2, [pc, #412]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032c8:	430b      	orrs	r3, r1
 80032ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80032cc:	e003      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80032e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032e6:	2300      	movs	r3, #0
 80032e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032ec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4313      	orrs	r3, r2
 80032f4:	d053      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80032f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003300:	d033      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003302:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003306:	d82c      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003308:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800330c:	d02f      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800330e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003312:	d826      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003314:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003318:	d02b      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800331a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800331e:	d820      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003324:	d012      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003326:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800332a:	d81a      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d022      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003334:	d115      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800333a:	3308      	adds	r3, #8
 800333c:	2101      	movs	r1, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f001 f9f2 	bl	8004728 <RCCEx_PLL2_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800334a:	e015      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800334c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003350:	3328      	adds	r3, #40	@ 0x28
 8003352:	2101      	movs	r1, #1
 8003354:	4618      	mov	r0, r3
 8003356:	f001 fa99 	bl	800488c <RCCEx_PLL3_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003360:	e00a      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003368:	e006      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800336a:	bf00      	nop
 800336c:	e004      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800336e:	bf00      	nop
 8003370:	e002      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003372:	bf00      	nop
 8003374:	e000      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003378:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003380:	4b38      	ldr	r3, [pc, #224]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003384:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800338c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338e:	4a35      	ldr	r2, [pc, #212]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003390:	430b      	orrs	r3, r1
 8003392:	6513      	str	r3, [r2, #80]	@ 0x50
 8003394:	e003      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003396:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800339a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800339e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80033aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033ae:	2300      	movs	r3, #0
 80033b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80033b4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033b8:	460b      	mov	r3, r1
 80033ba:	4313      	orrs	r3, r2
 80033bc:	d058      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80033be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80033c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033ca:	d033      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80033cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033d0:	d82c      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80033d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d6:	d02f      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80033d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033dc:	d826      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80033de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80033e2:	d02b      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80033e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80033e8:	d820      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80033ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ee:	d012      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80033f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033f4:	d81a      	bhi.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d022      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80033fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033fe:	d115      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003404:	3308      	adds	r3, #8
 8003406:	2101      	movs	r1, #1
 8003408:	4618      	mov	r0, r3
 800340a:	f001 f98d 	bl	8004728 <RCCEx_PLL2_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003414:	e015      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800341a:	3328      	adds	r3, #40	@ 0x28
 800341c:	2101      	movs	r1, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f001 fa34 	bl	800488c <RCCEx_PLL3_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800342a:	e00a      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003432:	e006      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003434:	bf00      	nop
 8003436:	e004      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003438:	bf00      	nop
 800343a:	e002      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800343c:	bf00      	nop
 800343e:	e000      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003442:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10e      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800344a:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800344c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003456:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800345a:	4a02      	ldr	r2, [pc, #8]	@ (8003464 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800345c:	430b      	orrs	r3, r1
 800345e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003460:	e006      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003462:	bf00      	nop
 8003464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003468:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800346c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800347c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003486:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800348a:	460b      	mov	r3, r1
 800348c:	4313      	orrs	r3, r2
 800348e:	d037      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003496:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800349a:	d00e      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800349c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034a0:	d816      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d018      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80034a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034aa:	d111      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ac:	4bc4      	ldr	r3, [pc, #784]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	4ac3      	ldr	r2, [pc, #780]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034b8:	e00f      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034be:	3308      	adds	r3, #8
 80034c0:	2101      	movs	r1, #1
 80034c2:	4618      	mov	r0, r3
 80034c4:	f001 f930 	bl	8004728 <RCCEx_PLL2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80034ce:	e004      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034d6:	e000      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80034d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80034e2:	4bb7      	ldr	r3, [pc, #732]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80034ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034f0:	4ab3      	ldr	r2, [pc, #716]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80034f2:	430b      	orrs	r3, r1
 80034f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80034f6:	e003      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800350c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003516:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800351a:	460b      	mov	r3, r1
 800351c:	4313      	orrs	r3, r2
 800351e:	d039      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003526:	2b03      	cmp	r3, #3
 8003528:	d81c      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800352a:	a201      	add	r2, pc, #4	@ (adr r2, 8003530 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800352c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003530:	0800356d 	.word	0x0800356d
 8003534:	08003541 	.word	0x08003541
 8003538:	0800354f 	.word	0x0800354f
 800353c:	0800356d 	.word	0x0800356d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003540:	4b9f      	ldr	r3, [pc, #636]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	4a9e      	ldr	r2, [pc, #632]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800354a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800354c:	e00f      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800354e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003552:	3308      	adds	r3, #8
 8003554:	2102      	movs	r1, #2
 8003556:	4618      	mov	r0, r3
 8003558:	f001 f8e6 	bl	8004728 <RCCEx_PLL2_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003562:	e004      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800356a:	e000      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800356c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003576:	4b92      	ldr	r3, [pc, #584]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357a:	f023 0103 	bic.w	r1, r3, #3
 800357e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003584:	4a8e      	ldr	r2, [pc, #568]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003586:	430b      	orrs	r3, r1
 8003588:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800358a:	e003      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003590:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80035a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f000 8099 	beq.w	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b6:	4b83      	ldr	r3, [pc, #524]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a82      	ldr	r2, [pc, #520]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035c2:	f7fd fd61 	bl	8001088 <HAL_GetTick>
 80035c6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ca:	e00b      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035cc:	f7fd fd5c 	bl	8001088 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b64      	cmp	r3, #100	@ 0x64
 80035da:	d903      	bls.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035e2:	e005      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035e4:	4b77      	ldr	r3, [pc, #476]	@ (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0ed      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80035f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d173      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80035f8:	4b71      	ldr	r3, [pc, #452]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003600:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003604:	4053      	eors	r3, r2
 8003606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800360a:	2b00      	cmp	r3, #0
 800360c:	d015      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800360e:	4b6c      	ldr	r3, [pc, #432]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003616:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800361a:	4b69      	ldr	r3, [pc, #420]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800361e:	4a68      	ldr	r2, [pc, #416]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003624:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003626:	4b66      	ldr	r3, [pc, #408]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800362a:	4a65      	ldr	r2, [pc, #404]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800362c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003630:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003632:	4a63      	ldr	r2, [pc, #396]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003634:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003638:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800363a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800363e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003646:	d118      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fd fd1e 	bl	8001088 <HAL_GetTick>
 800364c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003650:	e00d      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fd fd19 	bl	8001088 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800365c:	1ad2      	subs	r2, r2, r3
 800365e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003662:	429a      	cmp	r2, r3
 8003664:	d903      	bls.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800366c:	e005      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800366e:	4b54      	ldr	r3, [pc, #336]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0eb      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800367a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800367e:	2b00      	cmp	r3, #0
 8003680:	d129      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003686:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800368a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800368e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003692:	d10e      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003694:	4b4a      	ldr	r3, [pc, #296]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800369c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036a4:	091a      	lsrs	r2, r3, #4
 80036a6:	4b48      	ldr	r3, [pc, #288]	@ (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	4a45      	ldr	r2, [pc, #276]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6113      	str	r3, [r2, #16]
 80036b0:	e005      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x852>
 80036b2:	4b43      	ldr	r3, [pc, #268]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	4a42      	ldr	r2, [pc, #264]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80036bc:	6113      	str	r3, [r2, #16]
 80036be:	4b40      	ldr	r3, [pc, #256]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036c0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80036c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ce:	4a3c      	ldr	r2, [pc, #240]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036d4:	e008      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80036de:	e003      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80036e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f002 0301 	and.w	r3, r2, #1
 80036f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036f8:	2300      	movs	r3, #0
 80036fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80036fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003702:	460b      	mov	r3, r1
 8003704:	4313      	orrs	r3, r2
 8003706:	f000 808f 	beq.w	8003828 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800370a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800370e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003710:	2b28      	cmp	r3, #40	@ 0x28
 8003712:	d871      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003714:	a201      	add	r2, pc, #4	@ (adr r2, 800371c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	08003801 	.word	0x08003801
 8003720:	080037f9 	.word	0x080037f9
 8003724:	080037f9 	.word	0x080037f9
 8003728:	080037f9 	.word	0x080037f9
 800372c:	080037f9 	.word	0x080037f9
 8003730:	080037f9 	.word	0x080037f9
 8003734:	080037f9 	.word	0x080037f9
 8003738:	080037f9 	.word	0x080037f9
 800373c:	080037cd 	.word	0x080037cd
 8003740:	080037f9 	.word	0x080037f9
 8003744:	080037f9 	.word	0x080037f9
 8003748:	080037f9 	.word	0x080037f9
 800374c:	080037f9 	.word	0x080037f9
 8003750:	080037f9 	.word	0x080037f9
 8003754:	080037f9 	.word	0x080037f9
 8003758:	080037f9 	.word	0x080037f9
 800375c:	080037e3 	.word	0x080037e3
 8003760:	080037f9 	.word	0x080037f9
 8003764:	080037f9 	.word	0x080037f9
 8003768:	080037f9 	.word	0x080037f9
 800376c:	080037f9 	.word	0x080037f9
 8003770:	080037f9 	.word	0x080037f9
 8003774:	080037f9 	.word	0x080037f9
 8003778:	080037f9 	.word	0x080037f9
 800377c:	08003801 	.word	0x08003801
 8003780:	080037f9 	.word	0x080037f9
 8003784:	080037f9 	.word	0x080037f9
 8003788:	080037f9 	.word	0x080037f9
 800378c:	080037f9 	.word	0x080037f9
 8003790:	080037f9 	.word	0x080037f9
 8003794:	080037f9 	.word	0x080037f9
 8003798:	080037f9 	.word	0x080037f9
 800379c:	08003801 	.word	0x08003801
 80037a0:	080037f9 	.word	0x080037f9
 80037a4:	080037f9 	.word	0x080037f9
 80037a8:	080037f9 	.word	0x080037f9
 80037ac:	080037f9 	.word	0x080037f9
 80037b0:	080037f9 	.word	0x080037f9
 80037b4:	080037f9 	.word	0x080037f9
 80037b8:	080037f9 	.word	0x080037f9
 80037bc:	08003801 	.word	0x08003801
 80037c0:	58024400 	.word	0x58024400
 80037c4:	58024800 	.word	0x58024800
 80037c8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d0:	3308      	adds	r3, #8
 80037d2:	2101      	movs	r1, #1
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 ffa7 	bl	8004728 <RCCEx_PLL2_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037e0:	e00f      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e6:	3328      	adds	r3, #40	@ 0x28
 80037e8:	2101      	movs	r1, #1
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 f84e 	bl	800488c <RCCEx_PLL3_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80037f6:	e004      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037fe:	e000      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003802:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10a      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800380a:	4bbf      	ldr	r3, [pc, #764]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800380c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003816:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003818:	4abb      	ldr	r2, [pc, #748]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800381a:	430b      	orrs	r3, r1
 800381c:	6553      	str	r3, [r2, #84]	@ 0x54
 800381e:	e003      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003824:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	f002 0302 	and.w	r3, r2, #2
 8003834:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800383e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003842:	460b      	mov	r3, r1
 8003844:	4313      	orrs	r3, r2
 8003846:	d041      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800384c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384e:	2b05      	cmp	r3, #5
 8003850:	d824      	bhi.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003852:	a201      	add	r2, pc, #4	@ (adr r2, 8003858 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003858:	080038a5 	.word	0x080038a5
 800385c:	08003871 	.word	0x08003871
 8003860:	08003887 	.word	0x08003887
 8003864:	080038a5 	.word	0x080038a5
 8003868:	080038a5 	.word	0x080038a5
 800386c:	080038a5 	.word	0x080038a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003874:	3308      	adds	r3, #8
 8003876:	2101      	movs	r1, #1
 8003878:	4618      	mov	r0, r3
 800387a:	f000 ff55 	bl	8004728 <RCCEx_PLL2_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003884:	e00f      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388a:	3328      	adds	r3, #40	@ 0x28
 800388c:	2101      	movs	r1, #1
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fffc 	bl	800488c <RCCEx_PLL3_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800389a:	e004      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038a2:	e000      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80038a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038ae:	4b96      	ldr	r3, [pc, #600]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80038b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b2:	f023 0107 	bic.w	r1, r3, #7
 80038b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038bc:	4a92      	ldr	r2, [pc, #584]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80038c2:	e003      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f002 0304 	and.w	r3, r2, #4
 80038d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038e2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038e6:	460b      	mov	r3, r1
 80038e8:	4313      	orrs	r3, r2
 80038ea:	d044      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80038ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	d825      	bhi.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80038f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003900 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	0800394d 	.word	0x0800394d
 8003904:	08003919 	.word	0x08003919
 8003908:	0800392f 	.word	0x0800392f
 800390c:	0800394d 	.word	0x0800394d
 8003910:	0800394d 	.word	0x0800394d
 8003914:	0800394d 	.word	0x0800394d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800391c:	3308      	adds	r3, #8
 800391e:	2101      	movs	r1, #1
 8003920:	4618      	mov	r0, r3
 8003922:	f000 ff01 	bl	8004728 <RCCEx_PLL2_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800392c:	e00f      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800392e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003932:	3328      	adds	r3, #40	@ 0x28
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f000 ffa8 	bl	800488c <RCCEx_PLL3_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003942:	e004      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800394a:	e000      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800394c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10b      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003956:	4b6c      	ldr	r3, [pc, #432]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395a:	f023 0107 	bic.w	r1, r3, #7
 800395e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003966:	4a68      	ldr	r2, [pc, #416]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003968:	430b      	orrs	r3, r1
 800396a:	6593      	str	r3, [r2, #88]	@ 0x58
 800396c:	e003      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003972:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f002 0320 	and.w	r3, r2, #32
 8003982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003986:	2300      	movs	r3, #0
 8003988:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800398c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003990:	460b      	mov	r3, r1
 8003992:	4313      	orrs	r3, r2
 8003994:	d055      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800399a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800399e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039a2:	d033      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80039a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039a8:	d82c      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80039aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039ae:	d02f      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b4:	d826      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80039b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039ba:	d02b      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80039bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039c0:	d820      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80039c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039c6:	d012      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80039c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039cc:	d81a      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d022      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80039d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039d6:	d115      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039dc:	3308      	adds	r3, #8
 80039de:	2100      	movs	r1, #0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fea1 	bl	8004728 <RCCEx_PLL2_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80039ec:	e015      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039f2:	3328      	adds	r3, #40	@ 0x28
 80039f4:	2102      	movs	r1, #2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 ff48 	bl	800488c <RCCEx_PLL3_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003a02:	e00a      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a0a:	e006      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003a0c:	bf00      	nop
 8003a0e:	e004      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003a10:	bf00      	nop
 8003a12:	e002      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003a14:	bf00      	nop
 8003a16:	e000      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10b      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a22:	4b39      	ldr	r3, [pc, #228]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a26:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a32:	4a35      	ldr	r2, [pc, #212]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a38:	e003      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003a4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a58:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	d058      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a6a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a6e:	d033      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003a70:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003a74:	d82c      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a7a:	d02f      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a80:	d826      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003a82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a86:	d02b      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003a88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a8c:	d820      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a92:	d012      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a98:	d81a      	bhi.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d022      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa2:	d115      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fe3b 	bl	8004728 <RCCEx_PLL2_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ab8:	e015      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003abe:	3328      	adds	r3, #40	@ 0x28
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fee2 	bl	800488c <RCCEx_PLL3_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ad6:	e006      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ad8:	bf00      	nop
 8003ada:	e004      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003adc:	bf00      	nop
 8003ade:	e002      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ae0:	bf00      	nop
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10e      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003afe:	4a02      	ldr	r2, [pc, #8]	@ (8003b08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b04:	e006      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003b06:	bf00      	nop
 8003b08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003b20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4313      	orrs	r3, r2
 8003b32:	d055      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b3c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b40:	d033      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003b42:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003b46:	d82c      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003b48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b4c:	d02f      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b52:	d826      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003b54:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b58:	d02b      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003b5a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003b5e:	d820      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003b60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b64:	d012      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003b66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b6a:	d81a      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d022      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b74:	d115      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fdd2 	bl	8004728 <RCCEx_PLL2_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003b8a:	e015      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b90:	3328      	adds	r3, #40	@ 0x28
 8003b92:	2102      	movs	r1, #2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fe79 	bl	800488c <RCCEx_PLL3_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ba0:	e00a      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ba8:	e006      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003baa:	bf00      	nop
 8003bac:	e004      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003bae:	bf00      	nop
 8003bb0:	e002      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003bb2:	bf00      	nop
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003bc0:	4ba0      	ldr	r3, [pc, #640]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bd0:	4a9c      	ldr	r2, [pc, #624]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bd6:	e003      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f002 0308 	and.w	r3, r2, #8
 8003bec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003bf6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	d01e      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c12:	3328      	adds	r3, #40	@ 0x28
 8003c14:	2102      	movs	r1, #2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fe38 	bl	800488c <RCCEx_PLL3_Config>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003c28:	4b86      	ldr	r3, [pc, #536]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c2c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c38:	4a82      	ldr	r2, [pc, #520]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f002 0310 	and.w	r3, r2, #16
 8003c4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c54:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	d01e      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c6a:	d10c      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c70:	3328      	adds	r3, #40	@ 0x28
 8003c72:	2102      	movs	r1, #2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fe09 	bl	800488c <RCCEx_PLL3_Config>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c86:	4b6f      	ldr	r3, [pc, #444]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c96:	4a6b      	ldr	r2, [pc, #428]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ca8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003caa:	2300      	movs	r3, #0
 8003cac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	d03e      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003cc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cc4:	d022      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003cc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cca:	d81b      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd4:	d00b      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003cd6:	e015      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cdc:	3308      	adds	r3, #8
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fd21 	bl	8004728 <RCCEx_PLL2_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003cec:	e00f      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf2:	3328      	adds	r3, #40	@ 0x28
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 fdc8 	bl	800488c <RCCEx_PLL3_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003d02:	e004      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d0a:	e000      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d16:	4b4b      	ldr	r3, [pc, #300]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d26:	4a47      	ldr	r2, [pc, #284]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d2c:	e003      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003d42:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d44:	2300      	movs	r3, #0
 8003d46:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d48:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	d03b      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d5e:	d01f      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003d60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d64:	d818      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d6a:	d003      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003d6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d70:	d007      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003d72:	e011      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d74:	4b33      	ldr	r3, [pc, #204]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d78:	4a32      	ldr	r2, [pc, #200]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d80:	e00f      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d86:	3328      	adds	r3, #40	@ 0x28
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fd7e 	bl	800488c <RCCEx_PLL3_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d96:	e004      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d9e:	e000      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003daa:	4b26      	ldr	r3, [pc, #152]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dba:	4a22      	ldr	r2, [pc, #136]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dc0:	e003      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003dd6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dd8:	2300      	movs	r3, #0
 8003dda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ddc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003de0:	460b      	mov	r3, r1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d034      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003df4:	d007      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003df6:	e011      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df8:	4b12      	ldr	r3, [pc, #72]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfc:	4a11      	ldr	r2, [pc, #68]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e04:	e00e      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fc8a 	bl	8004728 <RCCEx_PLL2_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003e1a:	e003      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10d      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e2c:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3a:	4a02      	ldr	r2, [pc, #8]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e40:	e006      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003e42:	bf00      	nop
 8003e44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e58:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003e5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e5e:	2300      	movs	r3, #0
 8003e60:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e62:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e66:	460b      	mov	r3, r1
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	d00c      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e70:	3328      	adds	r3, #40	@ 0x28
 8003e72:	2102      	movs	r1, #2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fd09 	bl	800488c <RCCEx_PLL3_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e94:	2300      	movs	r3, #0
 8003e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e98:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d036      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ea8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eac:	d018      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003eae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eb2:	d811      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eb8:	d014      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003eba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ebe:	d80b      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d011      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ec8:	d106      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eca:	4bb7      	ldr	r3, [pc, #732]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	4ab6      	ldr	r2, [pc, #728]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ed6:	e008      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ede:	e004      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003ee0:	bf00      	nop
 8003ee2:	e002      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003ee4:	bf00      	nop
 8003ee6:	e000      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003ee8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ef2:	4bad      	ldr	r3, [pc, #692]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f00:	4aa9      	ldr	r2, [pc, #676]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f02:	430b      	orrs	r3, r1
 8003f04:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f06:	e003      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003f1c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f1e:	2300      	movs	r3, #0
 8003f20:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f22:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003f26:	460b      	mov	r3, r1
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	d009      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f2c:	4b9e      	ldr	r3, [pc, #632]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3a:	4a9b      	ldr	r2, [pc, #620]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f4e:	2300      	movs	r3, #0
 8003f50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f52:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003f56:	460b      	mov	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	d009      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f5c:	4b92      	ldr	r3, [pc, #584]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f60:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f6a:	4a8f      	ldr	r2, [pc, #572]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003f7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f7e:	2300      	movs	r3, #0
 8003f80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f82:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003f86:	460b      	mov	r3, r1
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f8c:	4b86      	ldr	r3, [pc, #536]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	4a85      	ldr	r2, [pc, #532]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003f96:	6113      	str	r3, [r2, #16]
 8003f98:	4b83      	ldr	r3, [pc, #524]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003f9a:	6919      	ldr	r1, [r3, #16]
 8003f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fa4:	4a80      	ldr	r2, [pc, #512]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fa6:	430b      	orrs	r3, r1
 8003fa8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fb8:	2300      	movs	r3, #0
 8003fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fbc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	d009      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003fc6:	4b78      	ldr	r3, [pc, #480]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd4:	4a74      	ldr	r2, [pc, #464]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003fe6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fe8:	2300      	movs	r3, #0
 8003fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	d00a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ff6:	4b6c      	ldr	r3, [pc, #432]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004006:	4a68      	ldr	r2, [pc, #416]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004008:	430b      	orrs	r3, r1
 800400a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800400c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	2100      	movs	r1, #0
 8004016:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800401e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004022:	460b      	mov	r3, r1
 8004024:	4313      	orrs	r3, r2
 8004026:	d011      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800402c:	3308      	adds	r3, #8
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fb79 	bl	8004728 <RCCEx_PLL2_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800403c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004048:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800404c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	2100      	movs	r1, #0
 8004056:	6239      	str	r1, [r7, #32]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
 800405e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004062:	460b      	mov	r3, r1
 8004064:	4313      	orrs	r3, r2
 8004066:	d011      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800406c:	3308      	adds	r3, #8
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fb59 	bl	8004728 <RCCEx_PLL2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800407c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800408c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	2100      	movs	r1, #0
 8004096:	61b9      	str	r1, [r7, #24]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80040a2:	460b      	mov	r3, r1
 80040a4:	4313      	orrs	r3, r2
 80040a6:	d011      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ac:	3308      	adds	r3, #8
 80040ae:	2102      	movs	r1, #2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fb39 	bl	8004728 <RCCEx_PLL2_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80040bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80040cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	2100      	movs	r1, #0
 80040d6:	6139      	str	r1, [r7, #16]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80040e2:	460b      	mov	r3, r1
 80040e4:	4313      	orrs	r3, r2
 80040e6:	d011      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ec:	3328      	adds	r3, #40	@ 0x28
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fbcb 	bl	800488c <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80040fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004108:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800410c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	2100      	movs	r1, #0
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004122:	460b      	mov	r3, r1
 8004124:	4313      	orrs	r3, r2
 8004126:	d011      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412c:	3328      	adds	r3, #40	@ 0x28
 800412e:	2101      	movs	r1, #1
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fbab 	bl	800488c <RCCEx_PLL3_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800413c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004140:	2b00      	cmp	r3, #0
 8004142:	d003      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004148:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800414c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	2100      	movs	r1, #0
 8004156:	6039      	str	r1, [r7, #0]
 8004158:	f003 0320 	and.w	r3, r3, #32
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004162:	460b      	mov	r3, r1
 8004164:	4313      	orrs	r3, r2
 8004166:	d011      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800416c:	3328      	adds	r3, #40	@ 0x28
 800416e:	2102      	movs	r1, #2
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fb8b 	bl	800488c <RCCEx_PLL3_Config>
 8004176:	4603      	mov	r3, r0
 8004178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800417c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004184:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004188:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800418c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	e000      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
}
 800419a:	4618      	mov	r0, r3
 800419c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80041a0:	46bd      	mov	sp, r7
 80041a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a6:	bf00      	nop
 80041a8:	58024400 	.word	0x58024400

080041ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80041b0:	f7fe fdbe 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 80041b4:	4602      	mov	r2, r0
 80041b6:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	4904      	ldr	r1, [pc, #16]	@ (80041d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80041c2:	5ccb      	ldrb	r3, [r1, r3]
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	58024400 	.word	0x58024400
 80041d4:	080091c0 	.word	0x080091c0

080041d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	@ 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80041ea:	4b9f      	ldr	r3, [pc, #636]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ee:	0b1b      	lsrs	r3, r3, #12
 80041f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80041f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fa:	091b      	lsrs	r3, r3, #4
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004202:	4b99      	ldr	r3, [pc, #612]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004206:	08db      	lsrs	r3, r3, #3
 8004208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8111 	beq.w	8004448 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	2b02      	cmp	r3, #2
 800422a:	f000 8083 	beq.w	8004334 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b02      	cmp	r3, #2
 8004232:	f200 80a1 	bhi.w	8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d056      	beq.n	80042f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004242:	e099      	b.n	8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004244:	4b88      	ldr	r3, [pc, #544]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b00      	cmp	r3, #0
 800424e:	d02d      	beq.n	80042ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004250:	4b85      	ldr	r3, [pc, #532]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	08db      	lsrs	r3, r3, #3
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	4a84      	ldr	r2, [pc, #528]	@ (800446c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800425c:	fa22 f303 	lsr.w	r3, r2, r3
 8004260:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800427a:	4b7b      	ldr	r3, [pc, #492]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800428a:	ed97 6a03 	vldr	s12, [r7, #12]
 800428e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800429a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800429e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80042aa:	e087      	b.n	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80042ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042be:	4b6a      	ldr	r3, [pc, #424]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c6:	ee07 3a90 	vmov	s15, r3
 80042ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80042d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ee:	e065      	b.n	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	ee07 3a90 	vmov	s15, r3
 80042f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004302:	4b59      	ldr	r3, [pc, #356]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004312:	ed97 6a03 	vldr	s12, [r7, #12]
 8004316:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800431a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800431e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800432a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004332:	e043      	b.n	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800447c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004346:	4b48      	ldr	r3, [pc, #288]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004356:	ed97 6a03 	vldr	s12, [r7, #12]
 800435a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800435e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800436a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800436e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004372:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004376:	e021      	b.n	80043bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438a:	4b37      	ldr	r3, [pc, #220]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800438c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439a:	ed97 6a03 	vldr	s12, [r7, #12]
 800439e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004470 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80043ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80043bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c0:	0a5b      	lsrs	r3, r3, #9
 80043c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80043da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043e2:	ee17 2a90 	vmov	r2, s15
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80043ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004400:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004404:	edd7 6a07 	vldr	s13, [r7, #28]
 8004408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800440c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004410:	ee17 2a90 	vmov	r2, s15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004418:	4b13      	ldr	r3, [pc, #76]	@ (8004468 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800441a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441c:	0e1b      	lsrs	r3, r3, #24
 800441e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004422:	ee07 3a90 	vmov	s15, r3
 8004426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800442e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004432:	edd7 6a07 	vldr	s13, [r7, #28]
 8004436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800443a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800443e:	ee17 2a90 	vmov	r2, s15
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004446:	e008      	b.n	800445a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
}
 800445a:	bf00      	nop
 800445c:	3724      	adds	r7, #36	@ 0x24
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	58024400 	.word	0x58024400
 800446c:	03d09000 	.word	0x03d09000
 8004470:	46000000 	.word	0x46000000
 8004474:	4c742400 	.word	0x4c742400
 8004478:	4a742400 	.word	0x4a742400
 800447c:	4af42400 	.word	0x4af42400

08004480 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	@ 0x24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004488:	4ba1      	ldr	r3, [pc, #644]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004492:	4b9f      	ldr	r3, [pc, #636]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	0d1b      	lsrs	r3, r3, #20
 8004498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800449c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800449e:	4b9c      	ldr	r3, [pc, #624]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80044aa:	4b99      	ldr	r3, [pc, #612]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	08db      	lsrs	r3, r3, #3
 80044b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	fb02 f303 	mul.w	r3, r2, r3
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8111 	beq.w	80046f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	f000 8083 	beq.w	80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	f200 80a1 	bhi.w	8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d056      	beq.n	8004598 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80044ea:	e099      	b.n	8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044ec:	4b88      	ldr	r3, [pc, #544]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0320 	and.w	r3, r3, #32
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d02d      	beq.n	8004554 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044f8:	4b85      	ldr	r3, [pc, #532]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	08db      	lsrs	r3, r3, #3
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	4a84      	ldr	r2, [pc, #528]	@ (8004714 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
 8004508:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	ee07 3a90 	vmov	s15, r3
 8004510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004522:	4b7b      	ldr	r3, [pc, #492]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004532:	ed97 6a03 	vldr	s12, [r7, #12]
 8004536:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800453a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800453e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800454a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004552:	e087      	b.n	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800471c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004566:	4b6a      	ldr	r3, [pc, #424]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004576:	ed97 6a03 	vldr	s12, [r7, #12]
 800457a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800457e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800458a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800458e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004596:	e065      	b.n	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80045a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045aa:	4b59      	ldr	r3, [pc, #356]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80045be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045da:	e043      	b.n	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004724 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	4b48      	ldr	r3, [pc, #288]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004602:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800461e:	e021      	b.n	8004664 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800462e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004632:	4b37      	ldr	r3, [pc, #220]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004642:	ed97 6a03 	vldr	s12, [r7, #12]
 8004646:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800464a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004662:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004664:	4b2a      	ldr	r3, [pc, #168]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004668:	0a5b      	lsrs	r3, r3, #9
 800466a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800467a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800467e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004682:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800468a:	ee17 2a90 	vmov	r2, s15
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004692:	4b1f      	ldr	r3, [pc, #124]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80046b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b8:	ee17 2a90 	vmov	r2, s15
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80046c0:	4b13      	ldr	r3, [pc, #76]	@ (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	0e1b      	lsrs	r3, r3, #24
 80046c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046da:	edd7 6a07 	vldr	s13, [r7, #28]
 80046de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e6:	ee17 2a90 	vmov	r2, s15
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80046ee:	e008      	b.n	8004702 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	609a      	str	r2, [r3, #8]
}
 8004702:	bf00      	nop
 8004704:	3724      	adds	r7, #36	@ 0x24
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	58024400 	.word	0x58024400
 8004714:	03d09000 	.word	0x03d09000
 8004718:	46000000 	.word	0x46000000
 800471c:	4c742400 	.word	0x4c742400
 8004720:	4a742400 	.word	0x4a742400
 8004724:	4af42400 	.word	0x4af42400

08004728 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004736:	4b53      	ldr	r3, [pc, #332]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b03      	cmp	r3, #3
 8004740:	d101      	bne.n	8004746 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e099      	b.n	800487a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004746:	4b4f      	ldr	r3, [pc, #316]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a4e      	ldr	r2, [pc, #312]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 800474c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004752:	f7fc fc99 	bl	8001088 <HAL_GetTick>
 8004756:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004758:	e008      	b.n	800476c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800475a:	f7fc fc95 	bl	8001088 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e086      	b.n	800487a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800476c:	4b45      	ldr	r3, [pc, #276]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f0      	bne.n	800475a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004778:	4b42      	ldr	r3, [pc, #264]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 800477a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	031b      	lsls	r3, r3, #12
 8004786:	493f      	ldr	r1, [pc, #252]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004788:	4313      	orrs	r3, r2
 800478a:	628b      	str	r3, [r1, #40]	@ 0x28
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	3b01      	subs	r3, #1
 8004792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	3b01      	subs	r3, #1
 800479c:	025b      	lsls	r3, r3, #9
 800479e:	b29b      	uxth	r3, r3
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	041b      	lsls	r3, r3, #16
 80047aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	061b      	lsls	r3, r3, #24
 80047b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80047bc:	4931      	ldr	r1, [pc, #196]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80047c2:	4b30      	ldr	r3, [pc, #192]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	492d      	ldr	r1, [pc, #180]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80047d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d8:	f023 0220 	bic.w	r2, r3, #32
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	4928      	ldr	r1, [pc, #160]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80047e6:	4b27      	ldr	r3, [pc, #156]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	4a26      	ldr	r2, [pc, #152]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047ec:	f023 0310 	bic.w	r3, r3, #16
 80047f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047f2:	4b24      	ldr	r3, [pc, #144]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 80047f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047f6:	4b24      	ldr	r3, [pc, #144]	@ (8004888 <RCCEx_PLL2_Config+0x160>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	69d2      	ldr	r2, [r2, #28]
 80047fe:	00d2      	lsls	r2, r2, #3
 8004800:	4920      	ldr	r1, [pc, #128]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004802:	4313      	orrs	r3, r2
 8004804:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004806:	4b1f      	ldr	r3, [pc, #124]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480a:	4a1e      	ldr	r2, [pc, #120]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 800480c:	f043 0310 	orr.w	r3, r3, #16
 8004810:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004818:	4b1a      	ldr	r3, [pc, #104]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 800481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481c:	4a19      	ldr	r2, [pc, #100]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 800481e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004822:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004824:	e00f      	b.n	8004846 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d106      	bne.n	800483a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800482c:	4b15      	ldr	r3, [pc, #84]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 800482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004830:	4a14      	ldr	r2, [pc, #80]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004836:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004838:	e005      	b.n	8004846 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800483a:	4b12      	ldr	r3, [pc, #72]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 800483c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483e:	4a11      	ldr	r2, [pc, #68]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004840:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004844:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004846:	4b0f      	ldr	r3, [pc, #60]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a0e      	ldr	r2, [pc, #56]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 800484c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004852:	f7fc fc19 	bl	8001088 <HAL_GetTick>
 8004856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004858:	e008      	b.n	800486c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800485a:	f7fc fc15 	bl	8001088 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e006      	b.n	800487a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800486c:	4b05      	ldr	r3, [pc, #20]	@ (8004884 <RCCEx_PLL2_Config+0x15c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0f0      	beq.n	800485a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004878:	7bfb      	ldrb	r3, [r7, #15]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	58024400 	.word	0x58024400
 8004888:	ffff0007 	.word	0xffff0007

0800488c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800489a:	4b53      	ldr	r3, [pc, #332]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d101      	bne.n	80048aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e099      	b.n	80049de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80048aa:	4b4f      	ldr	r3, [pc, #316]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a4e      	ldr	r2, [pc, #312]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80048b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b6:	f7fc fbe7 	bl	8001088 <HAL_GetTick>
 80048ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048bc:	e008      	b.n	80048d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048be:	f7fc fbe3 	bl	8001088 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e086      	b.n	80049de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80048d0:	4b45      	ldr	r3, [pc, #276]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1f0      	bne.n	80048be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80048dc:	4b42      	ldr	r3, [pc, #264]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80048de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	051b      	lsls	r3, r3, #20
 80048ea:	493f      	ldr	r1, [pc, #252]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	3b01      	subs	r3, #1
 8004900:	025b      	lsls	r3, r3, #9
 8004902:	b29b      	uxth	r3, r3
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	3b01      	subs	r3, #1
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	3b01      	subs	r3, #1
 800491a:	061b      	lsls	r3, r3, #24
 800491c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004920:	4931      	ldr	r1, [pc, #196]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004926:	4b30      	ldr	r3, [pc, #192]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	492d      	ldr	r1, [pc, #180]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004934:	4313      	orrs	r3, r2
 8004936:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004938:	4b2b      	ldr	r3, [pc, #172]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	4928      	ldr	r1, [pc, #160]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800494a:	4b27      	ldr	r3, [pc, #156]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 800494c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494e:	4a26      	ldr	r2, [pc, #152]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004954:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004956:	4b24      	ldr	r3, [pc, #144]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004958:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800495a:	4b24      	ldr	r3, [pc, #144]	@ (80049ec <RCCEx_PLL3_Config+0x160>)
 800495c:	4013      	ands	r3, r2
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	69d2      	ldr	r2, [r2, #28]
 8004962:	00d2      	lsls	r2, r2, #3
 8004964:	4920      	ldr	r1, [pc, #128]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800496a:	4b1f      	ldr	r3, [pc, #124]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 800496c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496e:	4a1e      	ldr	r2, [pc, #120]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004974:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800497c:	4b1a      	ldr	r3, [pc, #104]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	4a19      	ldr	r2, [pc, #100]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004982:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004986:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004988:	e00f      	b.n	80049aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d106      	bne.n	800499e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004990:	4b15      	ldr	r3, [pc, #84]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004994:	4a14      	ldr	r2, [pc, #80]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 8004996:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800499a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800499c:	e005      	b.n	80049aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800499e:	4b12      	ldr	r3, [pc, #72]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	4a11      	ldr	r2, [pc, #68]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80049a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80049aa:	4b0f      	ldr	r3, [pc, #60]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a0e      	ldr	r2, [pc, #56]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80049b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b6:	f7fc fb67 	bl	8001088 <HAL_GetTick>
 80049ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049bc:	e008      	b.n	80049d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80049be:	f7fc fb63 	bl	8001088 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e006      	b.n	80049de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80049d0:	4b05      	ldr	r3, [pc, #20]	@ (80049e8 <RCCEx_PLL3_Config+0x15c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	58024400 	.word	0x58024400
 80049ec:	ffff0007 	.word	0xffff0007

080049f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e049      	b.n	8004a96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f841 	bl	8004a9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f000 f9f6 	bl	8004e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
	...

08004ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d001      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e05e      	b.n	8004b8a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8004b98 <HAL_TIM_Base_Start_IT+0xe4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d02c      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x94>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af6:	d027      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x94>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a27      	ldr	r2, [pc, #156]	@ (8004b9c <HAL_TIM_Base_Start_IT+0xe8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d022      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x94>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a26      	ldr	r2, [pc, #152]	@ (8004ba0 <HAL_TIM_Base_Start_IT+0xec>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d01d      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x94>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a24      	ldr	r2, [pc, #144]	@ (8004ba4 <HAL_TIM_Base_Start_IT+0xf0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d018      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x94>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a23      	ldr	r2, [pc, #140]	@ (8004ba8 <HAL_TIM_Base_Start_IT+0xf4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d013      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x94>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a21      	ldr	r2, [pc, #132]	@ (8004bac <HAL_TIM_Base_Start_IT+0xf8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d00e      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x94>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a20      	ldr	r2, [pc, #128]	@ (8004bb0 <HAL_TIM_Base_Start_IT+0xfc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d009      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x94>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a1e      	ldr	r2, [pc, #120]	@ (8004bb4 <HAL_TIM_Base_Start_IT+0x100>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d004      	beq.n	8004b48 <HAL_TIM_Base_Start_IT+0x94>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb8 <HAL_TIM_Base_Start_IT+0x104>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d115      	bne.n	8004b74 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bbc <HAL_TIM_Base_Start_IT+0x108>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b06      	cmp	r3, #6
 8004b58:	d015      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0xd2>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b60:	d011      	beq.n	8004b86 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0201 	orr.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b72:	e008      	b.n	8004b86 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	e000      	b.n	8004b88 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800
 8004ba4:	40000c00 	.word	0x40000c00
 8004ba8:	40010400 	.word	0x40010400
 8004bac:	40001800 	.word	0x40001800
 8004bb0:	40014000 	.word	0x40014000
 8004bb4:	4000e000 	.word	0x4000e000
 8004bb8:	4000e400 	.word	0x4000e400
 8004bbc:	00010007 	.word	0x00010007

08004bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d020      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01b      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0202 	mvn.w	r2, #2
 8004bf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8e9 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f8db 	bl	8004dce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8ec 	bl	8004df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d020      	beq.n	8004c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01b      	beq.n	8004c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0204 	mvn.w	r2, #4
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f8c3 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8b5 	bl	8004dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f8c6 	bl	8004df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d020      	beq.n	8004cbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0308 	and.w	r3, r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01b      	beq.n	8004cbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0208 	mvn.w	r2, #8
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2204      	movs	r2, #4
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f89d 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f88f 	bl	8004dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f8a0 	bl	8004df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d020      	beq.n	8004d08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0210 	mvn.w	r2, #16
 8004cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f877 	bl	8004de2 <HAL_TIM_IC_CaptureCallback>
 8004cf4:	e005      	b.n	8004d02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f869 	bl	8004dce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f87a 	bl	8004df6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00c      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d007      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0201 	mvn.w	r2, #1
 8004d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fb febc 	bl	8000aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d104      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00c      	beq.n	8004d5a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d007      	beq.n	8004d5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f91f 	bl	8004f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00c      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f917 	bl	8004fac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00c      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d007      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f834 	bl	8004e0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00c      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f003 0320 	and.w	r3, r3, #32
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f06f 0220 	mvn.w	r2, #32
 8004dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f8df 	bl	8004f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dc6:	bf00      	nop
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a4a      	ldr	r2, [pc, #296]	@ (8004f5c <TIM_Base_SetConfig+0x13c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e3e:	d00f      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a47      	ldr	r2, [pc, #284]	@ (8004f60 <TIM_Base_SetConfig+0x140>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00b      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a46      	ldr	r2, [pc, #280]	@ (8004f64 <TIM_Base_SetConfig+0x144>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a45      	ldr	r2, [pc, #276]	@ (8004f68 <TIM_Base_SetConfig+0x148>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a44      	ldr	r2, [pc, #272]	@ (8004f6c <TIM_Base_SetConfig+0x14c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d108      	bne.n	8004e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a39      	ldr	r2, [pc, #228]	@ (8004f5c <TIM_Base_SetConfig+0x13c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d027      	beq.n	8004eca <TIM_Base_SetConfig+0xaa>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e80:	d023      	beq.n	8004eca <TIM_Base_SetConfig+0xaa>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a36      	ldr	r2, [pc, #216]	@ (8004f60 <TIM_Base_SetConfig+0x140>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01f      	beq.n	8004eca <TIM_Base_SetConfig+0xaa>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a35      	ldr	r2, [pc, #212]	@ (8004f64 <TIM_Base_SetConfig+0x144>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01b      	beq.n	8004eca <TIM_Base_SetConfig+0xaa>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a34      	ldr	r2, [pc, #208]	@ (8004f68 <TIM_Base_SetConfig+0x148>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d017      	beq.n	8004eca <TIM_Base_SetConfig+0xaa>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a33      	ldr	r2, [pc, #204]	@ (8004f6c <TIM_Base_SetConfig+0x14c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <TIM_Base_SetConfig+0xaa>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a32      	ldr	r2, [pc, #200]	@ (8004f70 <TIM_Base_SetConfig+0x150>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00f      	beq.n	8004eca <TIM_Base_SetConfig+0xaa>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a31      	ldr	r2, [pc, #196]	@ (8004f74 <TIM_Base_SetConfig+0x154>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d00b      	beq.n	8004eca <TIM_Base_SetConfig+0xaa>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a30      	ldr	r2, [pc, #192]	@ (8004f78 <TIM_Base_SetConfig+0x158>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d007      	beq.n	8004eca <TIM_Base_SetConfig+0xaa>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2f      	ldr	r2, [pc, #188]	@ (8004f7c <TIM_Base_SetConfig+0x15c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d003      	beq.n	8004eca <TIM_Base_SetConfig+0xaa>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8004f80 <TIM_Base_SetConfig+0x160>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d108      	bne.n	8004edc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a16      	ldr	r2, [pc, #88]	@ (8004f5c <TIM_Base_SetConfig+0x13c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00f      	beq.n	8004f28 <TIM_Base_SetConfig+0x108>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <TIM_Base_SetConfig+0x14c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <TIM_Base_SetConfig+0x108>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <TIM_Base_SetConfig+0x150>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d007      	beq.n	8004f28 <TIM_Base_SetConfig+0x108>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	@ (8004f74 <TIM_Base_SetConfig+0x154>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_Base_SetConfig+0x108>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a15      	ldr	r2, [pc, #84]	@ (8004f78 <TIM_Base_SetConfig+0x158>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d103      	bne.n	8004f30 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d105      	bne.n	8004f4e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f023 0201 	bic.w	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	611a      	str	r2, [r3, #16]
  }
}
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40010400 	.word	0x40010400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40014400 	.word	0x40014400
 8004f78:	40014800 	.word	0x40014800
 8004f7c:	4000e000 	.word	0x4000e000
 8004f80:	4000e400 	.word	0x4000e400

08004f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e042      	b.n	8005058 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d106      	bne.n	8004fea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fb fe61 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2224      	movs	r2, #36	@ 0x24
 8004fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fe94 	bl	8005d38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f825 	bl	8005060 <UART_SetConfig>
 8005016:	4603      	mov	r3, r0
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e01b      	b.n	8005058 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800502e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800503e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0201 	orr.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 ff13 	bl	8005e7c <UART_CheckIdleState>
 8005056:	4603      	mov	r3, r0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005064:	b092      	sub	sp, #72	@ 0x48
 8005066:	af00      	add	r7, sp, #0
 8005068:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	431a      	orrs	r2, r3
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	431a      	orrs	r2, r3
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	4313      	orrs	r3, r2
 8005086:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4bbe      	ldr	r3, [pc, #760]	@ (8005388 <UART_SetConfig+0x328>)
 8005090:	4013      	ands	r3, r2
 8005092:	697a      	ldr	r2, [r7, #20]
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005098:	430b      	orrs	r3, r1
 800509a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4ab3      	ldr	r2, [pc, #716]	@ (800538c <UART_SetConfig+0x32c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050c8:	4313      	orrs	r3, r2
 80050ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	4baf      	ldr	r3, [pc, #700]	@ (8005390 <UART_SetConfig+0x330>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80050dc:	430b      	orrs	r3, r1
 80050de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e6:	f023 010f 	bic.w	r1, r3, #15
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4aa6      	ldr	r2, [pc, #664]	@ (8005394 <UART_SetConfig+0x334>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d177      	bne.n	80051f0 <UART_SetConfig+0x190>
 8005100:	4ba5      	ldr	r3, [pc, #660]	@ (8005398 <UART_SetConfig+0x338>)
 8005102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005104:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005108:	2b28      	cmp	r3, #40	@ 0x28
 800510a:	d86d      	bhi.n	80051e8 <UART_SetConfig+0x188>
 800510c:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <UART_SetConfig+0xb4>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	080051b9 	.word	0x080051b9
 8005118:	080051e9 	.word	0x080051e9
 800511c:	080051e9 	.word	0x080051e9
 8005120:	080051e9 	.word	0x080051e9
 8005124:	080051e9 	.word	0x080051e9
 8005128:	080051e9 	.word	0x080051e9
 800512c:	080051e9 	.word	0x080051e9
 8005130:	080051e9 	.word	0x080051e9
 8005134:	080051c1 	.word	0x080051c1
 8005138:	080051e9 	.word	0x080051e9
 800513c:	080051e9 	.word	0x080051e9
 8005140:	080051e9 	.word	0x080051e9
 8005144:	080051e9 	.word	0x080051e9
 8005148:	080051e9 	.word	0x080051e9
 800514c:	080051e9 	.word	0x080051e9
 8005150:	080051e9 	.word	0x080051e9
 8005154:	080051c9 	.word	0x080051c9
 8005158:	080051e9 	.word	0x080051e9
 800515c:	080051e9 	.word	0x080051e9
 8005160:	080051e9 	.word	0x080051e9
 8005164:	080051e9 	.word	0x080051e9
 8005168:	080051e9 	.word	0x080051e9
 800516c:	080051e9 	.word	0x080051e9
 8005170:	080051e9 	.word	0x080051e9
 8005174:	080051d1 	.word	0x080051d1
 8005178:	080051e9 	.word	0x080051e9
 800517c:	080051e9 	.word	0x080051e9
 8005180:	080051e9 	.word	0x080051e9
 8005184:	080051e9 	.word	0x080051e9
 8005188:	080051e9 	.word	0x080051e9
 800518c:	080051e9 	.word	0x080051e9
 8005190:	080051e9 	.word	0x080051e9
 8005194:	080051d9 	.word	0x080051d9
 8005198:	080051e9 	.word	0x080051e9
 800519c:	080051e9 	.word	0x080051e9
 80051a0:	080051e9 	.word	0x080051e9
 80051a4:	080051e9 	.word	0x080051e9
 80051a8:	080051e9 	.word	0x080051e9
 80051ac:	080051e9 	.word	0x080051e9
 80051b0:	080051e9 	.word	0x080051e9
 80051b4:	080051e1 	.word	0x080051e1
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051be:	e326      	b.n	800580e <UART_SetConfig+0x7ae>
 80051c0:	2304      	movs	r3, #4
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c6:	e322      	b.n	800580e <UART_SetConfig+0x7ae>
 80051c8:	2308      	movs	r3, #8
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ce:	e31e      	b.n	800580e <UART_SetConfig+0x7ae>
 80051d0:	2310      	movs	r3, #16
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d6:	e31a      	b.n	800580e <UART_SetConfig+0x7ae>
 80051d8:	2320      	movs	r3, #32
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051de:	e316      	b.n	800580e <UART_SetConfig+0x7ae>
 80051e0:	2340      	movs	r3, #64	@ 0x40
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051e6:	e312      	b.n	800580e <UART_SetConfig+0x7ae>
 80051e8:	2380      	movs	r3, #128	@ 0x80
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ee:	e30e      	b.n	800580e <UART_SetConfig+0x7ae>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a69      	ldr	r2, [pc, #420]	@ (800539c <UART_SetConfig+0x33c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d130      	bne.n	800525c <UART_SetConfig+0x1fc>
 80051fa:	4b67      	ldr	r3, [pc, #412]	@ (8005398 <UART_SetConfig+0x338>)
 80051fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	2b05      	cmp	r3, #5
 8005204:	d826      	bhi.n	8005254 <UART_SetConfig+0x1f4>
 8005206:	a201      	add	r2, pc, #4	@ (adr r2, 800520c <UART_SetConfig+0x1ac>)
 8005208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520c:	08005225 	.word	0x08005225
 8005210:	0800522d 	.word	0x0800522d
 8005214:	08005235 	.word	0x08005235
 8005218:	0800523d 	.word	0x0800523d
 800521c:	08005245 	.word	0x08005245
 8005220:	0800524d 	.word	0x0800524d
 8005224:	2300      	movs	r3, #0
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522a:	e2f0      	b.n	800580e <UART_SetConfig+0x7ae>
 800522c:	2304      	movs	r3, #4
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005232:	e2ec      	b.n	800580e <UART_SetConfig+0x7ae>
 8005234:	2308      	movs	r3, #8
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800523a:	e2e8      	b.n	800580e <UART_SetConfig+0x7ae>
 800523c:	2310      	movs	r3, #16
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005242:	e2e4      	b.n	800580e <UART_SetConfig+0x7ae>
 8005244:	2320      	movs	r3, #32
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524a:	e2e0      	b.n	800580e <UART_SetConfig+0x7ae>
 800524c:	2340      	movs	r3, #64	@ 0x40
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005252:	e2dc      	b.n	800580e <UART_SetConfig+0x7ae>
 8005254:	2380      	movs	r3, #128	@ 0x80
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525a:	e2d8      	b.n	800580e <UART_SetConfig+0x7ae>
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a4f      	ldr	r2, [pc, #316]	@ (80053a0 <UART_SetConfig+0x340>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d130      	bne.n	80052c8 <UART_SetConfig+0x268>
 8005266:	4b4c      	ldr	r3, [pc, #304]	@ (8005398 <UART_SetConfig+0x338>)
 8005268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	2b05      	cmp	r3, #5
 8005270:	d826      	bhi.n	80052c0 <UART_SetConfig+0x260>
 8005272:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <UART_SetConfig+0x218>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	08005291 	.word	0x08005291
 800527c:	08005299 	.word	0x08005299
 8005280:	080052a1 	.word	0x080052a1
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b9 	.word	0x080052b9
 8005290:	2300      	movs	r3, #0
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005296:	e2ba      	b.n	800580e <UART_SetConfig+0x7ae>
 8005298:	2304      	movs	r3, #4
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800529e:	e2b6      	b.n	800580e <UART_SetConfig+0x7ae>
 80052a0:	2308      	movs	r3, #8
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052a6:	e2b2      	b.n	800580e <UART_SetConfig+0x7ae>
 80052a8:	2310      	movs	r3, #16
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ae:	e2ae      	b.n	800580e <UART_SetConfig+0x7ae>
 80052b0:	2320      	movs	r3, #32
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b6:	e2aa      	b.n	800580e <UART_SetConfig+0x7ae>
 80052b8:	2340      	movs	r3, #64	@ 0x40
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052be:	e2a6      	b.n	800580e <UART_SetConfig+0x7ae>
 80052c0:	2380      	movs	r3, #128	@ 0x80
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e2a2      	b.n	800580e <UART_SetConfig+0x7ae>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a35      	ldr	r2, [pc, #212]	@ (80053a4 <UART_SetConfig+0x344>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d130      	bne.n	8005334 <UART_SetConfig+0x2d4>
 80052d2:	4b31      	ldr	r3, [pc, #196]	@ (8005398 <UART_SetConfig+0x338>)
 80052d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	2b05      	cmp	r3, #5
 80052dc:	d826      	bhi.n	800532c <UART_SetConfig+0x2cc>
 80052de:	a201      	add	r2, pc, #4	@ (adr r2, 80052e4 <UART_SetConfig+0x284>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052fd 	.word	0x080052fd
 80052e8:	08005305 	.word	0x08005305
 80052ec:	0800530d 	.word	0x0800530d
 80052f0:	08005315 	.word	0x08005315
 80052f4:	0800531d 	.word	0x0800531d
 80052f8:	08005325 	.word	0x08005325
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005302:	e284      	b.n	800580e <UART_SetConfig+0x7ae>
 8005304:	2304      	movs	r3, #4
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530a:	e280      	b.n	800580e <UART_SetConfig+0x7ae>
 800530c:	2308      	movs	r3, #8
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005312:	e27c      	b.n	800580e <UART_SetConfig+0x7ae>
 8005314:	2310      	movs	r3, #16
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e278      	b.n	800580e <UART_SetConfig+0x7ae>
 800531c:	2320      	movs	r3, #32
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e274      	b.n	800580e <UART_SetConfig+0x7ae>
 8005324:	2340      	movs	r3, #64	@ 0x40
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e270      	b.n	800580e <UART_SetConfig+0x7ae>
 800532c:	2380      	movs	r3, #128	@ 0x80
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e26c      	b.n	800580e <UART_SetConfig+0x7ae>
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1b      	ldr	r2, [pc, #108]	@ (80053a8 <UART_SetConfig+0x348>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d142      	bne.n	80053c4 <UART_SetConfig+0x364>
 800533e:	4b16      	ldr	r3, [pc, #88]	@ (8005398 <UART_SetConfig+0x338>)
 8005340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	2b05      	cmp	r3, #5
 8005348:	d838      	bhi.n	80053bc <UART_SetConfig+0x35c>
 800534a:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <UART_SetConfig+0x2f0>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005369 	.word	0x08005369
 8005354:	08005371 	.word	0x08005371
 8005358:	08005379 	.word	0x08005379
 800535c:	08005381 	.word	0x08005381
 8005360:	080053ad 	.word	0x080053ad
 8005364:	080053b5 	.word	0x080053b5
 8005368:	2300      	movs	r3, #0
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e24e      	b.n	800580e <UART_SetConfig+0x7ae>
 8005370:	2304      	movs	r3, #4
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005376:	e24a      	b.n	800580e <UART_SetConfig+0x7ae>
 8005378:	2308      	movs	r3, #8
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e246      	b.n	800580e <UART_SetConfig+0x7ae>
 8005380:	2310      	movs	r3, #16
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e242      	b.n	800580e <UART_SetConfig+0x7ae>
 8005388:	cfff69f3 	.word	0xcfff69f3
 800538c:	58000c00 	.word	0x58000c00
 8005390:	11fff4ff 	.word	0x11fff4ff
 8005394:	40011000 	.word	0x40011000
 8005398:	58024400 	.word	0x58024400
 800539c:	40004400 	.word	0x40004400
 80053a0:	40004800 	.word	0x40004800
 80053a4:	40004c00 	.word	0x40004c00
 80053a8:	40005000 	.word	0x40005000
 80053ac:	2320      	movs	r3, #32
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b2:	e22c      	b.n	800580e <UART_SetConfig+0x7ae>
 80053b4:	2340      	movs	r3, #64	@ 0x40
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ba:	e228      	b.n	800580e <UART_SetConfig+0x7ae>
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c2:	e224      	b.n	800580e <UART_SetConfig+0x7ae>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4ab1      	ldr	r2, [pc, #708]	@ (8005690 <UART_SetConfig+0x630>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d176      	bne.n	80054bc <UART_SetConfig+0x45c>
 80053ce:	4bb1      	ldr	r3, [pc, #708]	@ (8005694 <UART_SetConfig+0x634>)
 80053d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053d6:	2b28      	cmp	r3, #40	@ 0x28
 80053d8:	d86c      	bhi.n	80054b4 <UART_SetConfig+0x454>
 80053da:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <UART_SetConfig+0x380>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005485 	.word	0x08005485
 80053e4:	080054b5 	.word	0x080054b5
 80053e8:	080054b5 	.word	0x080054b5
 80053ec:	080054b5 	.word	0x080054b5
 80053f0:	080054b5 	.word	0x080054b5
 80053f4:	080054b5 	.word	0x080054b5
 80053f8:	080054b5 	.word	0x080054b5
 80053fc:	080054b5 	.word	0x080054b5
 8005400:	0800548d 	.word	0x0800548d
 8005404:	080054b5 	.word	0x080054b5
 8005408:	080054b5 	.word	0x080054b5
 800540c:	080054b5 	.word	0x080054b5
 8005410:	080054b5 	.word	0x080054b5
 8005414:	080054b5 	.word	0x080054b5
 8005418:	080054b5 	.word	0x080054b5
 800541c:	080054b5 	.word	0x080054b5
 8005420:	08005495 	.word	0x08005495
 8005424:	080054b5 	.word	0x080054b5
 8005428:	080054b5 	.word	0x080054b5
 800542c:	080054b5 	.word	0x080054b5
 8005430:	080054b5 	.word	0x080054b5
 8005434:	080054b5 	.word	0x080054b5
 8005438:	080054b5 	.word	0x080054b5
 800543c:	080054b5 	.word	0x080054b5
 8005440:	0800549d 	.word	0x0800549d
 8005444:	080054b5 	.word	0x080054b5
 8005448:	080054b5 	.word	0x080054b5
 800544c:	080054b5 	.word	0x080054b5
 8005450:	080054b5 	.word	0x080054b5
 8005454:	080054b5 	.word	0x080054b5
 8005458:	080054b5 	.word	0x080054b5
 800545c:	080054b5 	.word	0x080054b5
 8005460:	080054a5 	.word	0x080054a5
 8005464:	080054b5 	.word	0x080054b5
 8005468:	080054b5 	.word	0x080054b5
 800546c:	080054b5 	.word	0x080054b5
 8005470:	080054b5 	.word	0x080054b5
 8005474:	080054b5 	.word	0x080054b5
 8005478:	080054b5 	.word	0x080054b5
 800547c:	080054b5 	.word	0x080054b5
 8005480:	080054ad 	.word	0x080054ad
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548a:	e1c0      	b.n	800580e <UART_SetConfig+0x7ae>
 800548c:	2304      	movs	r3, #4
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005492:	e1bc      	b.n	800580e <UART_SetConfig+0x7ae>
 8005494:	2308      	movs	r3, #8
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549a:	e1b8      	b.n	800580e <UART_SetConfig+0x7ae>
 800549c:	2310      	movs	r3, #16
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a2:	e1b4      	b.n	800580e <UART_SetConfig+0x7ae>
 80054a4:	2320      	movs	r3, #32
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054aa:	e1b0      	b.n	800580e <UART_SetConfig+0x7ae>
 80054ac:	2340      	movs	r3, #64	@ 0x40
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e1ac      	b.n	800580e <UART_SetConfig+0x7ae>
 80054b4:	2380      	movs	r3, #128	@ 0x80
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e1a8      	b.n	800580e <UART_SetConfig+0x7ae>
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a75      	ldr	r2, [pc, #468]	@ (8005698 <UART_SetConfig+0x638>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d130      	bne.n	8005528 <UART_SetConfig+0x4c8>
 80054c6:	4b73      	ldr	r3, [pc, #460]	@ (8005694 <UART_SetConfig+0x634>)
 80054c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	2b05      	cmp	r3, #5
 80054d0:	d826      	bhi.n	8005520 <UART_SetConfig+0x4c0>
 80054d2:	a201      	add	r2, pc, #4	@ (adr r2, 80054d8 <UART_SetConfig+0x478>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	080054f1 	.word	0x080054f1
 80054dc:	080054f9 	.word	0x080054f9
 80054e0:	08005501 	.word	0x08005501
 80054e4:	08005509 	.word	0x08005509
 80054e8:	08005511 	.word	0x08005511
 80054ec:	08005519 	.word	0x08005519
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f6:	e18a      	b.n	800580e <UART_SetConfig+0x7ae>
 80054f8:	2304      	movs	r3, #4
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fe:	e186      	b.n	800580e <UART_SetConfig+0x7ae>
 8005500:	2308      	movs	r3, #8
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005506:	e182      	b.n	800580e <UART_SetConfig+0x7ae>
 8005508:	2310      	movs	r3, #16
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550e:	e17e      	b.n	800580e <UART_SetConfig+0x7ae>
 8005510:	2320      	movs	r3, #32
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005516:	e17a      	b.n	800580e <UART_SetConfig+0x7ae>
 8005518:	2340      	movs	r3, #64	@ 0x40
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e176      	b.n	800580e <UART_SetConfig+0x7ae>
 8005520:	2380      	movs	r3, #128	@ 0x80
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e172      	b.n	800580e <UART_SetConfig+0x7ae>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a5b      	ldr	r2, [pc, #364]	@ (800569c <UART_SetConfig+0x63c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d130      	bne.n	8005594 <UART_SetConfig+0x534>
 8005532:	4b58      	ldr	r3, [pc, #352]	@ (8005694 <UART_SetConfig+0x634>)
 8005534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b05      	cmp	r3, #5
 800553c:	d826      	bhi.n	800558c <UART_SetConfig+0x52c>
 800553e:	a201      	add	r2, pc, #4	@ (adr r2, 8005544 <UART_SetConfig+0x4e4>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	0800555d 	.word	0x0800555d
 8005548:	08005565 	.word	0x08005565
 800554c:	0800556d 	.word	0x0800556d
 8005550:	08005575 	.word	0x08005575
 8005554:	0800557d 	.word	0x0800557d
 8005558:	08005585 	.word	0x08005585
 800555c:	2300      	movs	r3, #0
 800555e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005562:	e154      	b.n	800580e <UART_SetConfig+0x7ae>
 8005564:	2304      	movs	r3, #4
 8005566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556a:	e150      	b.n	800580e <UART_SetConfig+0x7ae>
 800556c:	2308      	movs	r3, #8
 800556e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005572:	e14c      	b.n	800580e <UART_SetConfig+0x7ae>
 8005574:	2310      	movs	r3, #16
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557a:	e148      	b.n	800580e <UART_SetConfig+0x7ae>
 800557c:	2320      	movs	r3, #32
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005582:	e144      	b.n	800580e <UART_SetConfig+0x7ae>
 8005584:	2340      	movs	r3, #64	@ 0x40
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558a:	e140      	b.n	800580e <UART_SetConfig+0x7ae>
 800558c:	2380      	movs	r3, #128	@ 0x80
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005592:	e13c      	b.n	800580e <UART_SetConfig+0x7ae>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a41      	ldr	r2, [pc, #260]	@ (80056a0 <UART_SetConfig+0x640>)
 800559a:	4293      	cmp	r3, r2
 800559c:	f040 8082 	bne.w	80056a4 <UART_SetConfig+0x644>
 80055a0:	4b3c      	ldr	r3, [pc, #240]	@ (8005694 <UART_SetConfig+0x634>)
 80055a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055a8:	2b28      	cmp	r3, #40	@ 0x28
 80055aa:	d86d      	bhi.n	8005688 <UART_SetConfig+0x628>
 80055ac:	a201      	add	r2, pc, #4	@ (adr r2, 80055b4 <UART_SetConfig+0x554>)
 80055ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	08005659 	.word	0x08005659
 80055b8:	08005689 	.word	0x08005689
 80055bc:	08005689 	.word	0x08005689
 80055c0:	08005689 	.word	0x08005689
 80055c4:	08005689 	.word	0x08005689
 80055c8:	08005689 	.word	0x08005689
 80055cc:	08005689 	.word	0x08005689
 80055d0:	08005689 	.word	0x08005689
 80055d4:	08005661 	.word	0x08005661
 80055d8:	08005689 	.word	0x08005689
 80055dc:	08005689 	.word	0x08005689
 80055e0:	08005689 	.word	0x08005689
 80055e4:	08005689 	.word	0x08005689
 80055e8:	08005689 	.word	0x08005689
 80055ec:	08005689 	.word	0x08005689
 80055f0:	08005689 	.word	0x08005689
 80055f4:	08005669 	.word	0x08005669
 80055f8:	08005689 	.word	0x08005689
 80055fc:	08005689 	.word	0x08005689
 8005600:	08005689 	.word	0x08005689
 8005604:	08005689 	.word	0x08005689
 8005608:	08005689 	.word	0x08005689
 800560c:	08005689 	.word	0x08005689
 8005610:	08005689 	.word	0x08005689
 8005614:	08005671 	.word	0x08005671
 8005618:	08005689 	.word	0x08005689
 800561c:	08005689 	.word	0x08005689
 8005620:	08005689 	.word	0x08005689
 8005624:	08005689 	.word	0x08005689
 8005628:	08005689 	.word	0x08005689
 800562c:	08005689 	.word	0x08005689
 8005630:	08005689 	.word	0x08005689
 8005634:	08005679 	.word	0x08005679
 8005638:	08005689 	.word	0x08005689
 800563c:	08005689 	.word	0x08005689
 8005640:	08005689 	.word	0x08005689
 8005644:	08005689 	.word	0x08005689
 8005648:	08005689 	.word	0x08005689
 800564c:	08005689 	.word	0x08005689
 8005650:	08005689 	.word	0x08005689
 8005654:	08005681 	.word	0x08005681
 8005658:	2301      	movs	r3, #1
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565e:	e0d6      	b.n	800580e <UART_SetConfig+0x7ae>
 8005660:	2304      	movs	r3, #4
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005666:	e0d2      	b.n	800580e <UART_SetConfig+0x7ae>
 8005668:	2308      	movs	r3, #8
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566e:	e0ce      	b.n	800580e <UART_SetConfig+0x7ae>
 8005670:	2310      	movs	r3, #16
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005676:	e0ca      	b.n	800580e <UART_SetConfig+0x7ae>
 8005678:	2320      	movs	r3, #32
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567e:	e0c6      	b.n	800580e <UART_SetConfig+0x7ae>
 8005680:	2340      	movs	r3, #64	@ 0x40
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005686:	e0c2      	b.n	800580e <UART_SetConfig+0x7ae>
 8005688:	2380      	movs	r3, #128	@ 0x80
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568e:	e0be      	b.n	800580e <UART_SetConfig+0x7ae>
 8005690:	40011400 	.word	0x40011400
 8005694:	58024400 	.word	0x58024400
 8005698:	40007800 	.word	0x40007800
 800569c:	40007c00 	.word	0x40007c00
 80056a0:	40011800 	.word	0x40011800
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4aad      	ldr	r2, [pc, #692]	@ (8005960 <UART_SetConfig+0x900>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d176      	bne.n	800579c <UART_SetConfig+0x73c>
 80056ae:	4bad      	ldr	r3, [pc, #692]	@ (8005964 <UART_SetConfig+0x904>)
 80056b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056b6:	2b28      	cmp	r3, #40	@ 0x28
 80056b8:	d86c      	bhi.n	8005794 <UART_SetConfig+0x734>
 80056ba:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <UART_SetConfig+0x660>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	08005765 	.word	0x08005765
 80056c4:	08005795 	.word	0x08005795
 80056c8:	08005795 	.word	0x08005795
 80056cc:	08005795 	.word	0x08005795
 80056d0:	08005795 	.word	0x08005795
 80056d4:	08005795 	.word	0x08005795
 80056d8:	08005795 	.word	0x08005795
 80056dc:	08005795 	.word	0x08005795
 80056e0:	0800576d 	.word	0x0800576d
 80056e4:	08005795 	.word	0x08005795
 80056e8:	08005795 	.word	0x08005795
 80056ec:	08005795 	.word	0x08005795
 80056f0:	08005795 	.word	0x08005795
 80056f4:	08005795 	.word	0x08005795
 80056f8:	08005795 	.word	0x08005795
 80056fc:	08005795 	.word	0x08005795
 8005700:	08005775 	.word	0x08005775
 8005704:	08005795 	.word	0x08005795
 8005708:	08005795 	.word	0x08005795
 800570c:	08005795 	.word	0x08005795
 8005710:	08005795 	.word	0x08005795
 8005714:	08005795 	.word	0x08005795
 8005718:	08005795 	.word	0x08005795
 800571c:	08005795 	.word	0x08005795
 8005720:	0800577d 	.word	0x0800577d
 8005724:	08005795 	.word	0x08005795
 8005728:	08005795 	.word	0x08005795
 800572c:	08005795 	.word	0x08005795
 8005730:	08005795 	.word	0x08005795
 8005734:	08005795 	.word	0x08005795
 8005738:	08005795 	.word	0x08005795
 800573c:	08005795 	.word	0x08005795
 8005740:	08005785 	.word	0x08005785
 8005744:	08005795 	.word	0x08005795
 8005748:	08005795 	.word	0x08005795
 800574c:	08005795 	.word	0x08005795
 8005750:	08005795 	.word	0x08005795
 8005754:	08005795 	.word	0x08005795
 8005758:	08005795 	.word	0x08005795
 800575c:	08005795 	.word	0x08005795
 8005760:	0800578d 	.word	0x0800578d
 8005764:	2301      	movs	r3, #1
 8005766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576a:	e050      	b.n	800580e <UART_SetConfig+0x7ae>
 800576c:	2304      	movs	r3, #4
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005772:	e04c      	b.n	800580e <UART_SetConfig+0x7ae>
 8005774:	2308      	movs	r3, #8
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577a:	e048      	b.n	800580e <UART_SetConfig+0x7ae>
 800577c:	2310      	movs	r3, #16
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005782:	e044      	b.n	800580e <UART_SetConfig+0x7ae>
 8005784:	2320      	movs	r3, #32
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578a:	e040      	b.n	800580e <UART_SetConfig+0x7ae>
 800578c:	2340      	movs	r3, #64	@ 0x40
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005792:	e03c      	b.n	800580e <UART_SetConfig+0x7ae>
 8005794:	2380      	movs	r3, #128	@ 0x80
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579a:	e038      	b.n	800580e <UART_SetConfig+0x7ae>
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a71      	ldr	r2, [pc, #452]	@ (8005968 <UART_SetConfig+0x908>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d130      	bne.n	8005808 <UART_SetConfig+0x7a8>
 80057a6:	4b6f      	ldr	r3, [pc, #444]	@ (8005964 <UART_SetConfig+0x904>)
 80057a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d826      	bhi.n	8005800 <UART_SetConfig+0x7a0>
 80057b2:	a201      	add	r2, pc, #4	@ (adr r2, 80057b8 <UART_SetConfig+0x758>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	080057d1 	.word	0x080057d1
 80057bc:	080057d9 	.word	0x080057d9
 80057c0:	080057e1 	.word	0x080057e1
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	080057f1 	.word	0x080057f1
 80057cc:	080057f9 	.word	0x080057f9
 80057d0:	2302      	movs	r3, #2
 80057d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d6:	e01a      	b.n	800580e <UART_SetConfig+0x7ae>
 80057d8:	2304      	movs	r3, #4
 80057da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057de:	e016      	b.n	800580e <UART_SetConfig+0x7ae>
 80057e0:	2308      	movs	r3, #8
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e6:	e012      	b.n	800580e <UART_SetConfig+0x7ae>
 80057e8:	2310      	movs	r3, #16
 80057ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ee:	e00e      	b.n	800580e <UART_SetConfig+0x7ae>
 80057f0:	2320      	movs	r3, #32
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f6:	e00a      	b.n	800580e <UART_SetConfig+0x7ae>
 80057f8:	2340      	movs	r3, #64	@ 0x40
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fe:	e006      	b.n	800580e <UART_SetConfig+0x7ae>
 8005800:	2380      	movs	r3, #128	@ 0x80
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005806:	e002      	b.n	800580e <UART_SetConfig+0x7ae>
 8005808:	2380      	movs	r3, #128	@ 0x80
 800580a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a55      	ldr	r2, [pc, #340]	@ (8005968 <UART_SetConfig+0x908>)
 8005814:	4293      	cmp	r3, r2
 8005816:	f040 80f8 	bne.w	8005a0a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800581a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800581e:	2b20      	cmp	r3, #32
 8005820:	dc46      	bgt.n	80058b0 <UART_SetConfig+0x850>
 8005822:	2b02      	cmp	r3, #2
 8005824:	db75      	blt.n	8005912 <UART_SetConfig+0x8b2>
 8005826:	3b02      	subs	r3, #2
 8005828:	2b1e      	cmp	r3, #30
 800582a:	d872      	bhi.n	8005912 <UART_SetConfig+0x8b2>
 800582c:	a201      	add	r2, pc, #4	@ (adr r2, 8005834 <UART_SetConfig+0x7d4>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	080058b7 	.word	0x080058b7
 8005838:	08005913 	.word	0x08005913
 800583c:	080058bf 	.word	0x080058bf
 8005840:	08005913 	.word	0x08005913
 8005844:	08005913 	.word	0x08005913
 8005848:	08005913 	.word	0x08005913
 800584c:	080058cf 	.word	0x080058cf
 8005850:	08005913 	.word	0x08005913
 8005854:	08005913 	.word	0x08005913
 8005858:	08005913 	.word	0x08005913
 800585c:	08005913 	.word	0x08005913
 8005860:	08005913 	.word	0x08005913
 8005864:	08005913 	.word	0x08005913
 8005868:	08005913 	.word	0x08005913
 800586c:	080058df 	.word	0x080058df
 8005870:	08005913 	.word	0x08005913
 8005874:	08005913 	.word	0x08005913
 8005878:	08005913 	.word	0x08005913
 800587c:	08005913 	.word	0x08005913
 8005880:	08005913 	.word	0x08005913
 8005884:	08005913 	.word	0x08005913
 8005888:	08005913 	.word	0x08005913
 800588c:	08005913 	.word	0x08005913
 8005890:	08005913 	.word	0x08005913
 8005894:	08005913 	.word	0x08005913
 8005898:	08005913 	.word	0x08005913
 800589c:	08005913 	.word	0x08005913
 80058a0:	08005913 	.word	0x08005913
 80058a4:	08005913 	.word	0x08005913
 80058a8:	08005913 	.word	0x08005913
 80058ac:	08005905 	.word	0x08005905
 80058b0:	2b40      	cmp	r3, #64	@ 0x40
 80058b2:	d02a      	beq.n	800590a <UART_SetConfig+0x8aa>
 80058b4:	e02d      	b.n	8005912 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80058b6:	f7fe fc79 	bl	80041ac <HAL_RCCEx_GetD3PCLK1Freq>
 80058ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058bc:	e02f      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe fc88 	bl	80041d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058cc:	e027      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ce:	f107 0318 	add.w	r3, r7, #24
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe fdd4 	bl	8004480 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058dc:	e01f      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058de:	4b21      	ldr	r3, [pc, #132]	@ (8005964 <UART_SetConfig+0x904>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d009      	beq.n	80058fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005964 <UART_SetConfig+0x904>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	08db      	lsrs	r3, r3, #3
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	4a1d      	ldr	r2, [pc, #116]	@ (800596c <UART_SetConfig+0x90c>)
 80058f6:	fa22 f303 	lsr.w	r3, r2, r3
 80058fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058fc:	e00f      	b.n	800591e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80058fe:	4b1b      	ldr	r3, [pc, #108]	@ (800596c <UART_SetConfig+0x90c>)
 8005900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005902:	e00c      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005904:	4b1a      	ldr	r3, [pc, #104]	@ (8005970 <UART_SetConfig+0x910>)
 8005906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005908:	e009      	b.n	800591e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800590e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005910:	e005      	b.n	800591e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800591c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800591e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 81ee 	beq.w	8005d02 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800592a:	4a12      	ldr	r2, [pc, #72]	@ (8005974 <UART_SetConfig+0x914>)
 800592c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005930:	461a      	mov	r2, r3
 8005932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005934:	fbb3 f3f2 	udiv	r3, r3, r2
 8005938:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	4413      	add	r3, r2
 8005944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005946:	429a      	cmp	r2, r3
 8005948:	d305      	bcc.n	8005956 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005952:	429a      	cmp	r2, r3
 8005954:	d910      	bls.n	8005978 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800595c:	e1d1      	b.n	8005d02 <UART_SetConfig+0xca2>
 800595e:	bf00      	nop
 8005960:	40011c00 	.word	0x40011c00
 8005964:	58024400 	.word	0x58024400
 8005968:	58000c00 	.word	0x58000c00
 800596c:	03d09000 	.word	0x03d09000
 8005970:	003d0900 	.word	0x003d0900
 8005974:	080091d0 	.word	0x080091d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800597a:	2200      	movs	r2, #0
 800597c:	60bb      	str	r3, [r7, #8]
 800597e:	60fa      	str	r2, [r7, #12]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	4ac0      	ldr	r2, [pc, #768]	@ (8005c88 <UART_SetConfig+0xc28>)
 8005986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800598a:	b29b      	uxth	r3, r3
 800598c:	2200      	movs	r2, #0
 800598e:	603b      	str	r3, [r7, #0]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005996:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800599a:	f7fa fcb9 	bl	8000310 <__aeabi_uldivmod>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4610      	mov	r0, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	020b      	lsls	r3, r1, #8
 80059b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059b4:	0202      	lsls	r2, r0, #8
 80059b6:	6979      	ldr	r1, [r7, #20]
 80059b8:	6849      	ldr	r1, [r1, #4]
 80059ba:	0849      	lsrs	r1, r1, #1
 80059bc:	2000      	movs	r0, #0
 80059be:	460c      	mov	r4, r1
 80059c0:	4605      	mov	r5, r0
 80059c2:	eb12 0804 	adds.w	r8, r2, r4
 80059c6:	eb43 0905 	adc.w	r9, r3, r5
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	469a      	mov	sl, r3
 80059d2:	4693      	mov	fp, r2
 80059d4:	4652      	mov	r2, sl
 80059d6:	465b      	mov	r3, fp
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	f7fa fc98 	bl	8000310 <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4613      	mov	r3, r2
 80059e6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ee:	d308      	bcc.n	8005a02 <UART_SetConfig+0x9a2>
 80059f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059f6:	d204      	bcs.n	8005a02 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059fe:	60da      	str	r2, [r3, #12]
 8005a00:	e17f      	b.n	8005d02 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a08:	e17b      	b.n	8005d02 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a12:	f040 80bd 	bne.w	8005b90 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005a16:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	dc48      	bgt.n	8005ab0 <UART_SetConfig+0xa50>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	db7b      	blt.n	8005b1a <UART_SetConfig+0xaba>
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d879      	bhi.n	8005b1a <UART_SetConfig+0xaba>
 8005a26:	a201      	add	r2, pc, #4	@ (adr r2, 8005a2c <UART_SetConfig+0x9cc>)
 8005a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a2c:	08005ab7 	.word	0x08005ab7
 8005a30:	08005abf 	.word	0x08005abf
 8005a34:	08005b1b 	.word	0x08005b1b
 8005a38:	08005b1b 	.word	0x08005b1b
 8005a3c:	08005ac7 	.word	0x08005ac7
 8005a40:	08005b1b 	.word	0x08005b1b
 8005a44:	08005b1b 	.word	0x08005b1b
 8005a48:	08005b1b 	.word	0x08005b1b
 8005a4c:	08005ad7 	.word	0x08005ad7
 8005a50:	08005b1b 	.word	0x08005b1b
 8005a54:	08005b1b 	.word	0x08005b1b
 8005a58:	08005b1b 	.word	0x08005b1b
 8005a5c:	08005b1b 	.word	0x08005b1b
 8005a60:	08005b1b 	.word	0x08005b1b
 8005a64:	08005b1b 	.word	0x08005b1b
 8005a68:	08005b1b 	.word	0x08005b1b
 8005a6c:	08005ae7 	.word	0x08005ae7
 8005a70:	08005b1b 	.word	0x08005b1b
 8005a74:	08005b1b 	.word	0x08005b1b
 8005a78:	08005b1b 	.word	0x08005b1b
 8005a7c:	08005b1b 	.word	0x08005b1b
 8005a80:	08005b1b 	.word	0x08005b1b
 8005a84:	08005b1b 	.word	0x08005b1b
 8005a88:	08005b1b 	.word	0x08005b1b
 8005a8c:	08005b1b 	.word	0x08005b1b
 8005a90:	08005b1b 	.word	0x08005b1b
 8005a94:	08005b1b 	.word	0x08005b1b
 8005a98:	08005b1b 	.word	0x08005b1b
 8005a9c:	08005b1b 	.word	0x08005b1b
 8005aa0:	08005b1b 	.word	0x08005b1b
 8005aa4:	08005b1b 	.word	0x08005b1b
 8005aa8:	08005b1b 	.word	0x08005b1b
 8005aac:	08005b0d 	.word	0x08005b0d
 8005ab0:	2b40      	cmp	r3, #64	@ 0x40
 8005ab2:	d02e      	beq.n	8005b12 <UART_SetConfig+0xab2>
 8005ab4:	e031      	b.n	8005b1a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab6:	f7fd f96b 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8005aba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005abc:	e033      	b.n	8005b26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005abe:	f7fd f97d 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 8005ac2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ac4:	e02f      	b.n	8005b26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe fb84 	bl	80041d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ad4:	e027      	b.n	8005b26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ad6:	f107 0318 	add.w	r3, r7, #24
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe fcd0 	bl	8004480 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ae4:	e01f      	b.n	8005b26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ae6:	4b69      	ldr	r3, [pc, #420]	@ (8005c8c <UART_SetConfig+0xc2c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005af2:	4b66      	ldr	r3, [pc, #408]	@ (8005c8c <UART_SetConfig+0xc2c>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	08db      	lsrs	r3, r3, #3
 8005af8:	f003 0303 	and.w	r3, r3, #3
 8005afc:	4a64      	ldr	r2, [pc, #400]	@ (8005c90 <UART_SetConfig+0xc30>)
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b04:	e00f      	b.n	8005b26 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005b06:	4b62      	ldr	r3, [pc, #392]	@ (8005c90 <UART_SetConfig+0xc30>)
 8005b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b0a:	e00c      	b.n	8005b26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b0c:	4b61      	ldr	r3, [pc, #388]	@ (8005c94 <UART_SetConfig+0xc34>)
 8005b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b10:	e009      	b.n	8005b26 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b18:	e005      	b.n	8005b26 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005b24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 80ea 	beq.w	8005d02 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b32:	4a55      	ldr	r2, [pc, #340]	@ (8005c88 <UART_SetConfig+0xc28>)
 8005b34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b40:	005a      	lsls	r2, r3, #1
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	441a      	add	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	2b0f      	cmp	r3, #15
 8005b58:	d916      	bls.n	8005b88 <UART_SetConfig+0xb28>
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b60:	d212      	bcs.n	8005b88 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f023 030f 	bic.w	r3, r3, #15
 8005b6a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005b84:	60da      	str	r2, [r3, #12]
 8005b86:	e0bc      	b.n	8005d02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b8e:	e0b8      	b.n	8005d02 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b90:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b94:	2b20      	cmp	r3, #32
 8005b96:	dc4b      	bgt.n	8005c30 <UART_SetConfig+0xbd0>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f2c0 8087 	blt.w	8005cac <UART_SetConfig+0xc4c>
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	f200 8084 	bhi.w	8005cac <UART_SetConfig+0xc4c>
 8005ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <UART_SetConfig+0xb4c>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005c37 	.word	0x08005c37
 8005bb0:	08005c3f 	.word	0x08005c3f
 8005bb4:	08005cad 	.word	0x08005cad
 8005bb8:	08005cad 	.word	0x08005cad
 8005bbc:	08005c47 	.word	0x08005c47
 8005bc0:	08005cad 	.word	0x08005cad
 8005bc4:	08005cad 	.word	0x08005cad
 8005bc8:	08005cad 	.word	0x08005cad
 8005bcc:	08005c57 	.word	0x08005c57
 8005bd0:	08005cad 	.word	0x08005cad
 8005bd4:	08005cad 	.word	0x08005cad
 8005bd8:	08005cad 	.word	0x08005cad
 8005bdc:	08005cad 	.word	0x08005cad
 8005be0:	08005cad 	.word	0x08005cad
 8005be4:	08005cad 	.word	0x08005cad
 8005be8:	08005cad 	.word	0x08005cad
 8005bec:	08005c67 	.word	0x08005c67
 8005bf0:	08005cad 	.word	0x08005cad
 8005bf4:	08005cad 	.word	0x08005cad
 8005bf8:	08005cad 	.word	0x08005cad
 8005bfc:	08005cad 	.word	0x08005cad
 8005c00:	08005cad 	.word	0x08005cad
 8005c04:	08005cad 	.word	0x08005cad
 8005c08:	08005cad 	.word	0x08005cad
 8005c0c:	08005cad 	.word	0x08005cad
 8005c10:	08005cad 	.word	0x08005cad
 8005c14:	08005cad 	.word	0x08005cad
 8005c18:	08005cad 	.word	0x08005cad
 8005c1c:	08005cad 	.word	0x08005cad
 8005c20:	08005cad 	.word	0x08005cad
 8005c24:	08005cad 	.word	0x08005cad
 8005c28:	08005cad 	.word	0x08005cad
 8005c2c:	08005c9f 	.word	0x08005c9f
 8005c30:	2b40      	cmp	r3, #64	@ 0x40
 8005c32:	d037      	beq.n	8005ca4 <UART_SetConfig+0xc44>
 8005c34:	e03a      	b.n	8005cac <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c36:	f7fd f8ab 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8005c3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c3c:	e03c      	b.n	8005cb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c3e:	f7fd f8bd 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 8005c42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c44:	e038      	b.n	8005cb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe fac4 	bl	80041d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c54:	e030      	b.n	8005cb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c56:	f107 0318 	add.w	r3, r7, #24
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fe fc10 	bl	8004480 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c64:	e028      	b.n	8005cb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c66:	4b09      	ldr	r3, [pc, #36]	@ (8005c8c <UART_SetConfig+0xc2c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d012      	beq.n	8005c98 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c72:	4b06      	ldr	r3, [pc, #24]	@ (8005c8c <UART_SetConfig+0xc2c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	08db      	lsrs	r3, r3, #3
 8005c78:	f003 0303 	and.w	r3, r3, #3
 8005c7c:	4a04      	ldr	r2, [pc, #16]	@ (8005c90 <UART_SetConfig+0xc30>)
 8005c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c84:	e018      	b.n	8005cb8 <UART_SetConfig+0xc58>
 8005c86:	bf00      	nop
 8005c88:	080091d0 	.word	0x080091d0
 8005c8c:	58024400 	.word	0x58024400
 8005c90:	03d09000 	.word	0x03d09000
 8005c94:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005c98:	4b24      	ldr	r3, [pc, #144]	@ (8005d2c <UART_SetConfig+0xccc>)
 8005c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c9c:	e00c      	b.n	8005cb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c9e:	4b24      	ldr	r3, [pc, #144]	@ (8005d30 <UART_SetConfig+0xcd0>)
 8005ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ca2:	e009      	b.n	8005cb8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ca4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005caa:	e005      	b.n	8005cb8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005cb6:	bf00      	nop
    }

    if (pclk != 0U)
 8005cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d021      	beq.n	8005d02 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8005d34 <UART_SetConfig+0xcd4>)
 8005cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ccc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	441a      	add	r2, r3
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce4:	2b0f      	cmp	r3, #15
 8005ce6:	d909      	bls.n	8005cfc <UART_SetConfig+0xc9c>
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cee:	d205      	bcs.n	8005cfc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e002      	b.n	8005d02 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2200      	movs	r2, #0
 8005d16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005d1e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3748      	adds	r7, #72	@ 0x48
 8005d26:	46bd      	mov	sp, r7
 8005d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d2c:	03d09000 	.word	0x03d09000
 8005d30:	003d0900 	.word	0x003d0900
 8005d34:	080091d0 	.word	0x080091d0

08005d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	f003 0304 	and.w	r3, r3, #4
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01a      	beq.n	8005e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e36:	d10a      	bne.n	8005e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
  }
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b098      	sub	sp, #96	@ 0x60
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e8c:	f7fb f8fc 	bl	8001088 <HAL_GetTick>
 8005e90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d12f      	bne.n	8005f00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ea0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f88e 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d022      	beq.n	8005f00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec2:	e853 3f00 	ldrex	r3, [r3]
 8005ec6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ece:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005eda:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005edc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ede:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ee0:	e841 2300 	strex	r3, r2, [r1]
 8005ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d1e6      	bne.n	8005eba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e063      	b.n	8005fc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d149      	bne.n	8005fa2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f16:	2200      	movs	r2, #0
 8005f18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f857 	bl	8005fd0 <UART_WaitOnFlagUntilTimeout>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d03c      	beq.n	8005fa2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	623b      	str	r3, [r7, #32]
   return(result);
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f46:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e6      	bne.n	8005f28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3308      	adds	r3, #8
 8005f78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f7a:	61fa      	str	r2, [r7, #28]
 8005f7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	69b9      	ldr	r1, [r7, #24]
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	e841 2300 	strex	r3, r2, [r1]
 8005f86:	617b      	str	r3, [r7, #20]
   return(result);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d1e5      	bne.n	8005f5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e012      	b.n	8005fc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3758      	adds	r7, #88	@ 0x58
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	603b      	str	r3, [r7, #0]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe0:	e04f      	b.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d04b      	beq.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fea:	f7fb f84d 	bl	8001088 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d302      	bcc.n	8006000 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e04e      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d037      	beq.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b80      	cmp	r3, #128	@ 0x80
 8006016:	d034      	beq.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b40      	cmp	r3, #64	@ 0x40
 800601c:	d031      	beq.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b08      	cmp	r3, #8
 800602a:	d110      	bne.n	800604e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2208      	movs	r2, #8
 8006032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f839 	bl	80060ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2208      	movs	r2, #8
 800603e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e029      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006058:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800605c:	d111      	bne.n	8006082 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f81f 	bl	80060ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e00f      	b.n	80060a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4013      	ands	r3, r2
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	429a      	cmp	r2, r3
 8006090:	bf0c      	ite	eq
 8006092:	2301      	moveq	r3, #1
 8006094:	2300      	movne	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	461a      	mov	r2, r3
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	429a      	cmp	r2, r3
 800609e:	d0a0      	beq.n	8005fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b095      	sub	sp, #84	@ 0x54
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060bc:	e853 3f00 	ldrex	r3, [r3]
 80060c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80060d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060da:	e841 2300 	strex	r3, r2, [r1]
 80060de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1e6      	bne.n	80060b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3308      	adds	r3, #8
 80060ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	4b1e      	ldr	r3, [pc, #120]	@ (8006174 <UART_EndRxTransfer+0xc8>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3308      	adds	r3, #8
 8006104:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006106:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006108:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800610c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e5      	bne.n	80060e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800611e:	2b01      	cmp	r3, #1
 8006120:	d118      	bne.n	8006154 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0310 	bic.w	r3, r3, #16
 8006136:	647b      	str	r3, [r7, #68]	@ 0x44
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6979      	ldr	r1, [r7, #20]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	613b      	str	r3, [r7, #16]
   return(result);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e6      	bne.n	8006122 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006168:	bf00      	nop
 800616a:	3754      	adds	r7, #84	@ 0x54
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	effffffe 	.word	0xeffffffe

08006178 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_UARTEx_DisableFifoMode+0x16>
 800618a:	2302      	movs	r3, #2
 800618c:	e027      	b.n	80061de <HAL_UARTEx_DisableFifoMode+0x66>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2224      	movs	r2, #36	@ 0x24
 800619a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80061bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061fe:	2302      	movs	r3, #2
 8006200:	e02d      	b.n	800625e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2224      	movs	r2, #36	@ 0x24
 800620e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0201 	bic.w	r2, r2, #1
 8006228:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f850 	bl	80062e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800627a:	2302      	movs	r3, #2
 800627c:	e02d      	b.n	80062da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2224      	movs	r2, #36	@ 0x24
 800628a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f812 	bl	80062e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d108      	bne.n	8006306 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006304:	e031      	b.n	800636a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006306:	2310      	movs	r3, #16
 8006308:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800630a:	2310      	movs	r3, #16
 800630c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	0e5b      	lsrs	r3, r3, #25
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	0f5b      	lsrs	r3, r3, #29
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	7b3a      	ldrb	r2, [r7, #12]
 8006332:	4911      	ldr	r1, [pc, #68]	@ (8006378 <UARTEx_SetNbDataToProcess+0x94>)
 8006334:	5c8a      	ldrb	r2, [r1, r2]
 8006336:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800633a:	7b3a      	ldrb	r2, [r7, #12]
 800633c:	490f      	ldr	r1, [pc, #60]	@ (800637c <UARTEx_SetNbDataToProcess+0x98>)
 800633e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006340:	fb93 f3f2 	sdiv	r3, r3, r2
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	7b7a      	ldrb	r2, [r7, #13]
 8006350:	4909      	ldr	r1, [pc, #36]	@ (8006378 <UARTEx_SetNbDataToProcess+0x94>)
 8006352:	5c8a      	ldrb	r2, [r1, r2]
 8006354:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006358:	7b7a      	ldrb	r2, [r7, #13]
 800635a:	4908      	ldr	r1, [pc, #32]	@ (800637c <UARTEx_SetNbDataToProcess+0x98>)
 800635c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800635e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006362:	b29a      	uxth	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	080091e8 	.word	0x080091e8
 800637c:	080091f0 	.word	0x080091f0

08006380 <__NVIC_SetPriority>:
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	6039      	str	r1, [r7, #0]
 800638a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800638c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006390:	2b00      	cmp	r3, #0
 8006392:	db0a      	blt.n	80063aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	b2da      	uxtb	r2, r3
 8006398:	490c      	ldr	r1, [pc, #48]	@ (80063cc <__NVIC_SetPriority+0x4c>)
 800639a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800639e:	0112      	lsls	r2, r2, #4
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	440b      	add	r3, r1
 80063a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80063a8:	e00a      	b.n	80063c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	4908      	ldr	r1, [pc, #32]	@ (80063d0 <__NVIC_SetPriority+0x50>)
 80063b0:	88fb      	ldrh	r3, [r7, #6]
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	3b04      	subs	r3, #4
 80063b8:	0112      	lsls	r2, r2, #4
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	440b      	add	r3, r1
 80063be:	761a      	strb	r2, [r3, #24]
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	e000e100 	.word	0xe000e100
 80063d0:	e000ed00 	.word	0xe000ed00

080063d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80063d8:	4b05      	ldr	r3, [pc, #20]	@ (80063f0 <SysTick_Handler+0x1c>)
 80063da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80063dc:	f001 fd46 	bl	8007e6c <xTaskGetSchedulerState>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d001      	beq.n	80063ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80063e6:	f002 fb3f 	bl	8008a68 <xPortSysTickHandler>
  }
}
 80063ea:	bf00      	nop
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	e000e010 	.word	0xe000e010

080063f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80063f8:	2100      	movs	r1, #0
 80063fa:	f06f 0004 	mvn.w	r0, #4
 80063fe:	f7ff ffbf 	bl	8006380 <__NVIC_SetPriority>
#endif
}
 8006402:	bf00      	nop
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800640e:	f3ef 8305 	mrs	r3, IPSR
 8006412:	603b      	str	r3, [r7, #0]
  return(result);
 8006414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800641a:	f06f 0305 	mvn.w	r3, #5
 800641e:	607b      	str	r3, [r7, #4]
 8006420:	e00c      	b.n	800643c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006422:	4b0a      	ldr	r3, [pc, #40]	@ (800644c <osKernelInitialize+0x44>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d105      	bne.n	8006436 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800642a:	4b08      	ldr	r3, [pc, #32]	@ (800644c <osKernelInitialize+0x44>)
 800642c:	2201      	movs	r2, #1
 800642e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006430:	2300      	movs	r3, #0
 8006432:	607b      	str	r3, [r7, #4]
 8006434:	e002      	b.n	800643c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006436:	f04f 33ff 	mov.w	r3, #4294967295
 800643a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800643c:	687b      	ldr	r3, [r7, #4]
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	2400031c 	.word	0x2400031c

08006450 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006456:	f3ef 8305 	mrs	r3, IPSR
 800645a:	603b      	str	r3, [r7, #0]
  return(result);
 800645c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006462:	f06f 0305 	mvn.w	r3, #5
 8006466:	607b      	str	r3, [r7, #4]
 8006468:	e010      	b.n	800648c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800646a:	4b0b      	ldr	r3, [pc, #44]	@ (8006498 <osKernelStart+0x48>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d109      	bne.n	8006486 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006472:	f7ff ffbf 	bl	80063f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006476:	4b08      	ldr	r3, [pc, #32]	@ (8006498 <osKernelStart+0x48>)
 8006478:	2202      	movs	r2, #2
 800647a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800647c:	f001 f892 	bl	80075a4 <vTaskStartScheduler>
      stat = osOK;
 8006480:	2300      	movs	r3, #0
 8006482:	607b      	str	r3, [r7, #4]
 8006484:	e002      	b.n	800648c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006486:	f04f 33ff 	mov.w	r3, #4294967295
 800648a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800648c:	687b      	ldr	r3, [r7, #4]
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	2400031c 	.word	0x2400031c

0800649c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800649c:	b580      	push	{r7, lr}
 800649e:	b08e      	sub	sp, #56	@ 0x38
 80064a0:	af04      	add	r7, sp, #16
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064a8:	2300      	movs	r3, #0
 80064aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ac:	f3ef 8305 	mrs	r3, IPSR
 80064b0:	617b      	str	r3, [r7, #20]
  return(result);
 80064b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d17e      	bne.n	80065b6 <osThreadNew+0x11a>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d07b      	beq.n	80065b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80064be:	2380      	movs	r3, #128	@ 0x80
 80064c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80064c2:	2318      	movs	r3, #24
 80064c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80064ca:	f04f 33ff 	mov.w	r3, #4294967295
 80064ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d045      	beq.n	8006562 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <osThreadNew+0x48>
        name = attr->name;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d008      	beq.n	800650a <osThreadNew+0x6e>
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	2b38      	cmp	r3, #56	@ 0x38
 80064fc:	d805      	bhi.n	800650a <osThreadNew+0x6e>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <osThreadNew+0x72>
        return (NULL);
 800650a:	2300      	movs	r3, #0
 800650c:	e054      	b.n	80065b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	089b      	lsrs	r3, r3, #2
 800651c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00e      	beq.n	8006544 <osThreadNew+0xa8>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	2ba7      	cmp	r3, #167	@ 0xa7
 800652c:	d90a      	bls.n	8006544 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006532:	2b00      	cmp	r3, #0
 8006534:	d006      	beq.n	8006544 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <osThreadNew+0xa8>
        mem = 1;
 800653e:	2301      	movs	r3, #1
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	e010      	b.n	8006566 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10c      	bne.n	8006566 <osThreadNew+0xca>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d108      	bne.n	8006566 <osThreadNew+0xca>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <osThreadNew+0xca>
          mem = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	61bb      	str	r3, [r7, #24]
 8006560:	e001      	b.n	8006566 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d110      	bne.n	800658e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006574:	9202      	str	r2, [sp, #8]
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6a3a      	ldr	r2, [r7, #32]
 8006580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 fe1a 	bl	80071bc <xTaskCreateStatic>
 8006588:	4603      	mov	r3, r0
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	e013      	b.n	80065b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d110      	bne.n	80065b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	b29a      	uxth	r2, r3
 8006598:	f107 0310 	add.w	r3, r7, #16
 800659c:	9301      	str	r3, [sp, #4]
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 fe68 	bl	800727c <xTaskCreate>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d001      	beq.n	80065b6 <osThreadNew+0x11a>
            hTask = NULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065b6:	693b      	ldr	r3, [r7, #16]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3728      	adds	r7, #40	@ 0x28
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c8:	f3ef 8305 	mrs	r3, IPSR
 80065cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80065ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <osDelay+0x1c>
    stat = osErrorISR;
 80065d4:	f06f 0305 	mvn.w	r3, #5
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	e007      	b.n	80065ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80065dc:	2300      	movs	r3, #0
 80065de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 ffa6 	bl	8007538 <vTaskDelay>
    }
  }

  return (stat);
 80065ec:	68fb      	ldr	r3, [r7, #12]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4a07      	ldr	r2, [pc, #28]	@ (8006624 <vApplicationGetIdleTaskMemory+0x2c>)
 8006608:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	4a06      	ldr	r2, [pc, #24]	@ (8006628 <vApplicationGetIdleTaskMemory+0x30>)
 800660e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2280      	movs	r2, #128	@ 0x80
 8006614:	601a      	str	r2, [r3, #0]
}
 8006616:	bf00      	nop
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	24000320 	.word	0x24000320
 8006628:	240003c8 	.word	0x240003c8

0800662c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4a07      	ldr	r2, [pc, #28]	@ (8006658 <vApplicationGetTimerTaskMemory+0x2c>)
 800663c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	4a06      	ldr	r2, [pc, #24]	@ (800665c <vApplicationGetTimerTaskMemory+0x30>)
 8006642:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800664a:	601a      	str	r2, [r3, #0]
}
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	240005c8 	.word	0x240005c8
 800665c:	24000670 	.word	0x24000670

08006660 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f103 0208 	add.w	r2, r3, #8
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f04f 32ff 	mov.w	r2, #4294967295
 8006678:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f103 0208 	add.w	r2, r3, #8
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f103 0208 	add.w	r2, r3, #8
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	683a      	ldr	r2, [r7, #0]
 80066de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	601a      	str	r2, [r3, #0]
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006718:	d103      	bne.n	8006722 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	e00c      	b.n	800673c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3308      	adds	r3, #8
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	e002      	b.n	8006730 <vListInsert+0x2e>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	429a      	cmp	r2, r3
 800673a:	d2f6      	bcs.n	800672a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	601a      	str	r2, [r3, #0]
}
 8006768:	bf00      	nop
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	6892      	ldr	r2, [r2, #8]
 800678a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6852      	ldr	r2, [r2, #4]
 8006794:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	429a      	cmp	r2, r3
 800679e:	d103      	bne.n	80067a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	1e5a      	subs	r2, r3, #1
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067ee:	bf00      	nop
 80067f0:	bf00      	nop
 80067f2:	e7fd      	b.n	80067f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80067f4:	f002 f8a8 	bl	8008948 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006800:	68f9      	ldr	r1, [r7, #12]
 8006802:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	441a      	add	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006824:	3b01      	subs	r3, #1
 8006826:	68f9      	ldr	r1, [r7, #12]
 8006828:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800682a:	fb01 f303 	mul.w	r3, r1, r3
 800682e:	441a      	add	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	22ff      	movs	r2, #255	@ 0xff
 8006838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	22ff      	movs	r2, #255	@ 0xff
 8006840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d114      	bne.n	8006874 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d01a      	beq.n	8006888 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3310      	adds	r3, #16
 8006856:	4618      	mov	r0, r3
 8006858:	f001 f942 	bl	8007ae0 <xTaskRemoveFromEventList>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d012      	beq.n	8006888 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006862:	4b0d      	ldr	r3, [pc, #52]	@ (8006898 <xQueueGenericReset+0xd0>)
 8006864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	e009      	b.n	8006888 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3310      	adds	r3, #16
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fef1 	bl	8006660 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	3324      	adds	r3, #36	@ 0x24
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff feec 	bl	8006660 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006888:	f002 f890 	bl	80089ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800688c:	2301      	movs	r3, #1
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	e000ed04 	.word	0xe000ed04

0800689c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08e      	sub	sp, #56	@ 0x38
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10b      	bne.n	80068c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	e7fd      	b.n	80068c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10b      	bne.n	80068e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop
 80068e4:	e7fd      	b.n	80068e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d002      	beq.n	80068f2 <xQueueGenericCreateStatic+0x56>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <xQueueGenericCreateStatic+0x5a>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <xQueueGenericCreateStatic+0x5c>
 80068f6:	2300      	movs	r3, #0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10b      	bne.n	8006914 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	623b      	str	r3, [r7, #32]
}
 800690e:	bf00      	nop
 8006910:	bf00      	nop
 8006912:	e7fd      	b.n	8006910 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d102      	bne.n	8006920 <xQueueGenericCreateStatic+0x84>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <xQueueGenericCreateStatic+0x88>
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <xQueueGenericCreateStatic+0x8a>
 8006924:	2300      	movs	r3, #0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10b      	bne.n	8006942 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	61fb      	str	r3, [r7, #28]
}
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	e7fd      	b.n	800693e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006942:	2350      	movs	r3, #80	@ 0x50
 8006944:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b50      	cmp	r3, #80	@ 0x50
 800694a:	d00b      	beq.n	8006964 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	61bb      	str	r3, [r7, #24]
}
 800695e:	bf00      	nop
 8006960:	bf00      	nop
 8006962:	e7fd      	b.n	8006960 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006964:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800696a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00d      	beq.n	800698c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006978:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800697c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	4613      	mov	r3, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 f805 	bl	8006996 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800698c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800698e:	4618      	mov	r0, r3
 8006990:	3730      	adds	r7, #48	@ 0x30
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	607a      	str	r2, [r7, #4]
 80069a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d103      	bne.n	80069b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	e002      	b.n	80069b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069c4:	2101      	movs	r1, #1
 80069c6:	69b8      	ldr	r0, [r7, #24]
 80069c8:	f7ff fefe 	bl	80067c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	78fa      	ldrb	r2, [r7, #3]
 80069d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08e      	sub	sp, #56	@ 0x38
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069ea:	2300      	movs	r3, #0
 80069ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80069f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10b      	bne.n	8006a10 <xQueueGenericSend+0x34>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a0a:	bf00      	nop
 8006a0c:	bf00      	nop
 8006a0e:	e7fd      	b.n	8006a0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <xQueueGenericSend+0x42>
 8006a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <xQueueGenericSend+0x46>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <xQueueGenericSend+0x48>
 8006a22:	2300      	movs	r3, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10b      	bne.n	8006a40 <xQueueGenericSend+0x64>
	__asm volatile
 8006a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2c:	f383 8811 	msr	BASEPRI, r3
 8006a30:	f3bf 8f6f 	isb	sy
 8006a34:	f3bf 8f4f 	dsb	sy
 8006a38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a3a:	bf00      	nop
 8006a3c:	bf00      	nop
 8006a3e:	e7fd      	b.n	8006a3c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d103      	bne.n	8006a4e <xQueueGenericSend+0x72>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <xQueueGenericSend+0x76>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <xQueueGenericSend+0x78>
 8006a52:	2300      	movs	r3, #0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10b      	bne.n	8006a70 <xQueueGenericSend+0x94>
	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	623b      	str	r3, [r7, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	bf00      	nop
 8006a6e:	e7fd      	b.n	8006a6c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a70:	f001 f9fc 	bl	8007e6c <xTaskGetSchedulerState>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d102      	bne.n	8006a80 <xQueueGenericSend+0xa4>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <xQueueGenericSend+0xa8>
 8006a80:	2301      	movs	r3, #1
 8006a82:	e000      	b.n	8006a86 <xQueueGenericSend+0xaa>
 8006a84:	2300      	movs	r3, #0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10b      	bne.n	8006aa2 <xQueueGenericSend+0xc6>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	61fb      	str	r3, [r7, #28]
}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	e7fd      	b.n	8006a9e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006aa2:	f001 ff51 	bl	8008948 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d302      	bcc.n	8006ab8 <xQueueGenericSend+0xdc>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d129      	bne.n	8006b0c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006abe:	f000 fa0f 	bl	8006ee0 <prvCopyDataToQueue>
 8006ac2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d010      	beq.n	8006aee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	3324      	adds	r3, #36	@ 0x24
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 f805 	bl	8007ae0 <xTaskRemoveFromEventList>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d013      	beq.n	8006b04 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006adc:	4b3f      	ldr	r3, [pc, #252]	@ (8006bdc <xQueueGenericSend+0x200>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	e00a      	b.n	8006b04 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d007      	beq.n	8006b04 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006af4:	4b39      	ldr	r3, [pc, #228]	@ (8006bdc <xQueueGenericSend+0x200>)
 8006af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b04:	f001 ff52 	bl	80089ac <vPortExitCritical>
				return pdPASS;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e063      	b.n	8006bd4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d103      	bne.n	8006b1a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b12:	f001 ff4b 	bl	80089ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e05c      	b.n	8006bd4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d106      	bne.n	8006b2e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b20:	f107 0314 	add.w	r3, r7, #20
 8006b24:	4618      	mov	r0, r3
 8006b26:	f001 f83f 	bl	8007ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b2e:	f001 ff3d 	bl	80089ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b32:	f000 fda7 	bl	8007684 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b36:	f001 ff07 	bl	8008948 <vPortEnterCritical>
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b40:	b25b      	sxtb	r3, r3
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d103      	bne.n	8006b50 <xQueueGenericSend+0x174>
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b56:	b25b      	sxtb	r3, r3
 8006b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5c:	d103      	bne.n	8006b66 <xQueueGenericSend+0x18a>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b66:	f001 ff21 	bl	80089ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b6a:	1d3a      	adds	r2, r7, #4
 8006b6c:	f107 0314 	add.w	r3, r7, #20
 8006b70:	4611      	mov	r1, r2
 8006b72:	4618      	mov	r0, r3
 8006b74:	f001 f82e 	bl	8007bd4 <xTaskCheckForTimeOut>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d124      	bne.n	8006bc8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b80:	f000 faa6 	bl	80070d0 <prvIsQueueFull>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d018      	beq.n	8006bbc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	3310      	adds	r3, #16
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	4611      	mov	r1, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 ff52 	bl	8007a3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b9a:	f000 fa31 	bl	8007000 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b9e:	f000 fd7f 	bl	80076a0 <xTaskResumeAll>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f47f af7c 	bne.w	8006aa2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006baa:	4b0c      	ldr	r3, [pc, #48]	@ (8006bdc <xQueueGenericSend+0x200>)
 8006bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	e772      	b.n	8006aa2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006bbe:	f000 fa1f 	bl	8007000 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bc2:	f000 fd6d 	bl	80076a0 <xTaskResumeAll>
 8006bc6:	e76c      	b.n	8006aa2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006bca:	f000 fa19 	bl	8007000 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bce:	f000 fd67 	bl	80076a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3738      	adds	r7, #56	@ 0x38
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	e000ed04 	.word	0xe000ed04

08006be0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b090      	sub	sp, #64	@ 0x40
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10b      	bne.n	8006c10 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c0a:	bf00      	nop
 8006c0c:	bf00      	nop
 8006c0e:	e7fd      	b.n	8006c0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <xQueueGenericSendFromISR+0x3e>
 8006c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <xQueueGenericSendFromISR+0x42>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <xQueueGenericSendFromISR+0x44>
 8006c22:	2300      	movs	r3, #0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10b      	bne.n	8006c40 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c2c:	f383 8811 	msr	BASEPRI, r3
 8006c30:	f3bf 8f6f 	isb	sy
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c3a:	bf00      	nop
 8006c3c:	bf00      	nop
 8006c3e:	e7fd      	b.n	8006c3c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d103      	bne.n	8006c4e <xQueueGenericSendFromISR+0x6e>
 8006c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d101      	bne.n	8006c52 <xQueueGenericSendFromISR+0x72>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <xQueueGenericSendFromISR+0x74>
 8006c52:	2300      	movs	r3, #0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10b      	bne.n	8006c70 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	623b      	str	r3, [r7, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	bf00      	nop
 8006c6e:	e7fd      	b.n	8006c6c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c70:	f001 ff4a 	bl	8008b08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c74:	f3ef 8211 	mrs	r2, BASEPRI
 8006c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	61fa      	str	r2, [r7, #28]
 8006c8a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c8e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d302      	bcc.n	8006ca2 <xQueueGenericSendFromISR+0xc2>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d12f      	bne.n	8006d02 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ca8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006cb8:	f000 f912 	bl	8006ee0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cbc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc4:	d112      	bne.n	8006cec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d016      	beq.n	8006cfc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd0:	3324      	adds	r3, #36	@ 0x24
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 ff04 	bl	8007ae0 <xTaskRemoveFromEventList>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00e      	beq.n	8006cfc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	e007      	b.n	8006cfc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	b25a      	sxtb	r2, r3
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006d00:	e001      	b.n	8006d06 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d08:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3740      	adds	r7, #64	@ 0x40
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08c      	sub	sp, #48	@ 0x30
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10b      	bne.n	8006d4e <xQueueReceive+0x32>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	623b      	str	r3, [r7, #32]
}
 8006d48:	bf00      	nop
 8006d4a:	bf00      	nop
 8006d4c:	e7fd      	b.n	8006d4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d103      	bne.n	8006d5c <xQueueReceive+0x40>
 8006d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <xQueueReceive+0x44>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <xQueueReceive+0x46>
 8006d60:	2300      	movs	r3, #0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10b      	bne.n	8006d7e <xQueueReceive+0x62>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	61fb      	str	r3, [r7, #28]
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	e7fd      	b.n	8006d7a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d7e:	f001 f875 	bl	8007e6c <xTaskGetSchedulerState>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <xQueueReceive+0x72>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <xQueueReceive+0x76>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <xQueueReceive+0x78>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10b      	bne.n	8006db0 <xQueueReceive+0x94>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	61bb      	str	r3, [r7, #24]
}
 8006daa:	bf00      	nop
 8006dac:	bf00      	nop
 8006dae:	e7fd      	b.n	8006dac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006db0:	f001 fdca 	bl	8008948 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d01f      	beq.n	8006e00 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dc4:	f000 f8f6 	bl	8006fb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dca:	1e5a      	subs	r2, r3, #1
 8006dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00f      	beq.n	8006df8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dda:	3310      	adds	r3, #16
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fe7f 	bl	8007ae0 <xTaskRemoveFromEventList>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d007      	beq.n	8006df8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006de8:	4b3c      	ldr	r3, [pc, #240]	@ (8006edc <xQueueReceive+0x1c0>)
 8006dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006df8:	f001 fdd8 	bl	80089ac <vPortExitCritical>
				return pdPASS;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e069      	b.n	8006ed4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d103      	bne.n	8006e0e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e06:	f001 fdd1 	bl	80089ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e062      	b.n	8006ed4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d106      	bne.n	8006e22 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e14:	f107 0310 	add.w	r3, r7, #16
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fec5 	bl	8007ba8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e22:	f001 fdc3 	bl	80089ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e26:	f000 fc2d 	bl	8007684 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e2a:	f001 fd8d 	bl	8008948 <vPortEnterCritical>
 8006e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e34:	b25b      	sxtb	r3, r3
 8006e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3a:	d103      	bne.n	8006e44 <xQueueReceive+0x128>
 8006e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e4a:	b25b      	sxtb	r3, r3
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d103      	bne.n	8006e5a <xQueueReceive+0x13e>
 8006e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e5a:	f001 fda7 	bl	80089ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e5e:	1d3a      	adds	r2, r7, #4
 8006e60:	f107 0310 	add.w	r3, r7, #16
 8006e64:	4611      	mov	r1, r2
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 feb4 	bl	8007bd4 <xTaskCheckForTimeOut>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d123      	bne.n	8006eba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e74:	f000 f916 	bl	80070a4 <prvIsQueueEmpty>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d017      	beq.n	8006eae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e80:	3324      	adds	r3, #36	@ 0x24
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	4611      	mov	r1, r2
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fdd8 	bl	8007a3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e8e:	f000 f8b7 	bl	8007000 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e92:	f000 fc05 	bl	80076a0 <xTaskResumeAll>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d189      	bne.n	8006db0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006edc <xQueueReceive+0x1c0>)
 8006e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	e780      	b.n	8006db0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006eae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006eb0:	f000 f8a6 	bl	8007000 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eb4:	f000 fbf4 	bl	80076a0 <xTaskResumeAll>
 8006eb8:	e77a      	b.n	8006db0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ebc:	f000 f8a0 	bl	8007000 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ec0:	f000 fbee 	bl	80076a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ec4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ec6:	f000 f8ed 	bl	80070a4 <prvIsQueueEmpty>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f43f af6f 	beq.w	8006db0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ed2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3730      	adds	r7, #48	@ 0x30
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	e000ed04 	.word	0xe000ed04

08006ee0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10d      	bne.n	8006f1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d14d      	bne.n	8006fa2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 ffcc 	bl	8007ea8 <xTaskPriorityDisinherit>
 8006f10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	609a      	str	r2, [r3, #8]
 8006f18:	e043      	b.n	8006fa2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d119      	bne.n	8006f54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6858      	ldr	r0, [r3, #4]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f28:	461a      	mov	r2, r3
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	f002 f8a0 	bl	8009070 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f38:	441a      	add	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d32b      	bcc.n	8006fa2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	605a      	str	r2, [r3, #4]
 8006f52:	e026      	b.n	8006fa2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	68d8      	ldr	r0, [r3, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	f002 f886 	bl	8009070 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6c:	425b      	negs	r3, r3
 8006f6e:	441a      	add	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d207      	bcs.n	8006f90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f88:	425b      	negs	r3, r3
 8006f8a:	441a      	add	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d105      	bne.n	8006fa2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006faa:	697b      	ldr	r3, [r7, #20]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d018      	beq.n	8006ff8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68da      	ldr	r2, [r3, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fce:	441a      	add	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d303      	bcc.n	8006fe8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68d9      	ldr	r1, [r3, #12]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6838      	ldr	r0, [r7, #0]
 8006ff4:	f002 f83c 	bl	8009070 <memcpy>
	}
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007008:	f001 fc9e 	bl	8008948 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007012:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007014:	e011      	b.n	800703a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800701a:	2b00      	cmp	r3, #0
 800701c:	d012      	beq.n	8007044 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3324      	adds	r3, #36	@ 0x24
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fd5c 	bl	8007ae0 <xTaskRemoveFromEventList>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800702e:	f000 fe35 	bl	8007c9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	3b01      	subs	r3, #1
 8007036:	b2db      	uxtb	r3, r3
 8007038:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800703a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800703e:	2b00      	cmp	r3, #0
 8007040:	dce9      	bgt.n	8007016 <prvUnlockQueue+0x16>
 8007042:	e000      	b.n	8007046 <prvUnlockQueue+0x46>
					break;
 8007044:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	22ff      	movs	r2, #255	@ 0xff
 800704a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800704e:	f001 fcad 	bl	80089ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007052:	f001 fc79 	bl	8008948 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800705c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800705e:	e011      	b.n	8007084 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d012      	beq.n	800708e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3310      	adds	r3, #16
 800706c:	4618      	mov	r0, r3
 800706e:	f000 fd37 	bl	8007ae0 <xTaskRemoveFromEventList>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007078:	f000 fe10 	bl	8007c9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	3b01      	subs	r3, #1
 8007080:	b2db      	uxtb	r3, r3
 8007082:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007088:	2b00      	cmp	r3, #0
 800708a:	dce9      	bgt.n	8007060 <prvUnlockQueue+0x60>
 800708c:	e000      	b.n	8007090 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800708e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	22ff      	movs	r2, #255	@ 0xff
 8007094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007098:	f001 fc88 	bl	80089ac <vPortExitCritical>
}
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070ac:	f001 fc4c 	bl	8008948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d102      	bne.n	80070be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	e001      	b.n	80070c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070c2:	f001 fc73 	bl	80089ac <vPortExitCritical>

	return xReturn;
 80070c6:	68fb      	ldr	r3, [r7, #12]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070d8:	f001 fc36 	bl	8008948 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d102      	bne.n	80070ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070e8:	2301      	movs	r3, #1
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	e001      	b.n	80070f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070f2:	f001 fc5b 	bl	80089ac <vPortExitCritical>

	return xReturn;
 80070f6:	68fb      	ldr	r3, [r7, #12]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	e014      	b.n	800713a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007110:	4a0f      	ldr	r2, [pc, #60]	@ (8007150 <vQueueAddToRegistry+0x50>)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10b      	bne.n	8007134 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800711c:	490c      	ldr	r1, [pc, #48]	@ (8007150 <vQueueAddToRegistry+0x50>)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007126:	4a0a      	ldr	r2, [pc, #40]	@ (8007150 <vQueueAddToRegistry+0x50>)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	4413      	add	r3, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007132:	e006      	b.n	8007142 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3301      	adds	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b07      	cmp	r3, #7
 800713e:	d9e7      	bls.n	8007110 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	24000a70 	.word	0x24000a70

08007154 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007164:	f001 fbf0 	bl	8008948 <vPortEnterCritical>
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800716e:	b25b      	sxtb	r3, r3
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007174:	d103      	bne.n	800717e <vQueueWaitForMessageRestricted+0x2a>
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007184:	b25b      	sxtb	r3, r3
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	d103      	bne.n	8007194 <vQueueWaitForMessageRestricted+0x40>
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007194:	f001 fc0a 	bl	80089ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719c:	2b00      	cmp	r3, #0
 800719e:	d106      	bne.n	80071ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	3324      	adds	r3, #36	@ 0x24
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fc6d 	bl	8007a88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071ae:	6978      	ldr	r0, [r7, #20]
 80071b0:	f7ff ff26 	bl	8007000 <prvUnlockQueue>
	}
 80071b4:	bf00      	nop
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08e      	sub	sp, #56	@ 0x38
 80071c0:	af04      	add	r7, sp, #16
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10b      	bne.n	80071e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	623b      	str	r3, [r7, #32]
}
 80071e2:	bf00      	nop
 80071e4:	bf00      	nop
 80071e6:	e7fd      	b.n	80071e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10b      	bne.n	8007206 <xTaskCreateStatic+0x4a>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	61fb      	str	r3, [r7, #28]
}
 8007200:	bf00      	nop
 8007202:	bf00      	nop
 8007204:	e7fd      	b.n	8007202 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007206:	23a8      	movs	r3, #168	@ 0xa8
 8007208:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2ba8      	cmp	r3, #168	@ 0xa8
 800720e:	d00b      	beq.n	8007228 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007214:	f383 8811 	msr	BASEPRI, r3
 8007218:	f3bf 8f6f 	isb	sy
 800721c:	f3bf 8f4f 	dsb	sy
 8007220:	61bb      	str	r3, [r7, #24]
}
 8007222:	bf00      	nop
 8007224:	bf00      	nop
 8007226:	e7fd      	b.n	8007224 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007228:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800722a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722c:	2b00      	cmp	r3, #0
 800722e:	d01e      	beq.n	800726e <xTaskCreateStatic+0xb2>
 8007230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007232:	2b00      	cmp	r3, #0
 8007234:	d01b      	beq.n	800726e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007238:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800723e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	2202      	movs	r2, #2
 8007244:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007248:	2300      	movs	r3, #0
 800724a:	9303      	str	r3, [sp, #12]
 800724c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724e:	9302      	str	r3, [sp, #8]
 8007250:	f107 0314 	add.w	r3, r7, #20
 8007254:	9301      	str	r3, [sp, #4]
 8007256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	68b9      	ldr	r1, [r7, #8]
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 f851 	bl	8007308 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007266:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007268:	f000 f8f6 	bl	8007458 <prvAddNewTaskToReadyList>
 800726c:	e001      	b.n	8007272 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007272:	697b      	ldr	r3, [r7, #20]
	}
 8007274:	4618      	mov	r0, r3
 8007276:	3728      	adds	r7, #40	@ 0x28
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800727c:	b580      	push	{r7, lr}
 800727e:	b08c      	sub	sp, #48	@ 0x30
 8007280:	af04      	add	r7, sp, #16
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	4613      	mov	r3, r2
 800728a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800728c:	88fb      	ldrh	r3, [r7, #6]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4618      	mov	r0, r3
 8007292:	f001 fc7b 	bl	8008b8c <pvPortMalloc>
 8007296:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00e      	beq.n	80072bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800729e:	20a8      	movs	r0, #168	@ 0xa8
 80072a0:	f001 fc74 	bl	8008b8c <pvPortMalloc>
 80072a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80072b2:	e005      	b.n	80072c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072b4:	6978      	ldr	r0, [r7, #20]
 80072b6:	f001 fd37 	bl	8008d28 <vPortFree>
 80072ba:	e001      	b.n	80072c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072bc:	2300      	movs	r3, #0
 80072be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d017      	beq.n	80072f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072ce:	88fa      	ldrh	r2, [r7, #6]
 80072d0:	2300      	movs	r3, #0
 80072d2:	9303      	str	r3, [sp, #12]
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	9302      	str	r3, [sp, #8]
 80072d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072da:	9301      	str	r3, [sp, #4]
 80072dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	68b9      	ldr	r1, [r7, #8]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 f80f 	bl	8007308 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072ea:	69f8      	ldr	r0, [r7, #28]
 80072ec:	f000 f8b4 	bl	8007458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072f0:	2301      	movs	r3, #1
 80072f2:	61bb      	str	r3, [r7, #24]
 80072f4:	e002      	b.n	80072fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072f6:	f04f 33ff 	mov.w	r3, #4294967295
 80072fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072fc:	69bb      	ldr	r3, [r7, #24]
	}
 80072fe:	4618      	mov	r0, r3
 8007300:	3720      	adds	r7, #32
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	461a      	mov	r2, r3
 8007320:	21a5      	movs	r1, #165	@ 0xa5
 8007322:	f001 fe21 	bl	8008f68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007330:	440b      	add	r3, r1
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	4413      	add	r3, r2
 8007336:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	f023 0307 	bic.w	r3, r3, #7
 800733e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00b      	beq.n	8007362 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	617b      	str	r3, [r7, #20]
}
 800735c:	bf00      	nop
 800735e:	bf00      	nop
 8007360:	e7fd      	b.n	800735e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d01f      	beq.n	80073a8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007368:	2300      	movs	r3, #0
 800736a:	61fb      	str	r3, [r7, #28]
 800736c:	e012      	b.n	8007394 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	4413      	add	r3, r2
 8007374:	7819      	ldrb	r1, [r3, #0]
 8007376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	4413      	add	r3, r2
 800737c:	3334      	adds	r3, #52	@ 0x34
 800737e:	460a      	mov	r2, r1
 8007380:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d006      	beq.n	800739c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	3301      	adds	r3, #1
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	2b0f      	cmp	r3, #15
 8007398:	d9e9      	bls.n	800736e <prvInitialiseNewTask+0x66>
 800739a:	e000      	b.n	800739e <prvInitialiseNewTask+0x96>
			{
				break;
 800739c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800739e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073a6:	e003      	b.n	80073b0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b2:	2b37      	cmp	r3, #55	@ 0x37
 80073b4:	d901      	bls.n	80073ba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073b6:	2337      	movs	r3, #55	@ 0x37
 80073b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c8:	2200      	movs	r2, #0
 80073ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ce:	3304      	adds	r3, #4
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff f965 	bl	80066a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d8:	3318      	adds	r3, #24
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff f960 	bl	80066a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80073ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	2200      	movs	r2, #0
 8007402:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007408:	3354      	adds	r3, #84	@ 0x54
 800740a:	224c      	movs	r2, #76	@ 0x4c
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f001 fdaa 	bl	8008f68 <memset>
 8007414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007416:	4a0d      	ldr	r2, [pc, #52]	@ (800744c <prvInitialiseNewTask+0x144>)
 8007418:	659a      	str	r2, [r3, #88]	@ 0x58
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	4a0c      	ldr	r2, [pc, #48]	@ (8007450 <prvInitialiseNewTask+0x148>)
 800741e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007422:	4a0c      	ldr	r2, [pc, #48]	@ (8007454 <prvInitialiseNewTask+0x14c>)
 8007424:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	68f9      	ldr	r1, [r7, #12]
 800742a:	69b8      	ldr	r0, [r7, #24]
 800742c:	f001 f95a 	bl	80086e4 <pxPortInitialiseStack>
 8007430:	4602      	mov	r2, r0
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800743c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007442:	bf00      	nop
 8007444:	3720      	adds	r7, #32
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	24004d04 	.word	0x24004d04
 8007450:	24004d6c 	.word	0x24004d6c
 8007454:	24004dd4 	.word	0x24004dd4

08007458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007460:	f001 fa72 	bl	8008948 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007464:	4b2d      	ldr	r3, [pc, #180]	@ (800751c <prvAddNewTaskToReadyList+0xc4>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3301      	adds	r3, #1
 800746a:	4a2c      	ldr	r2, [pc, #176]	@ (800751c <prvAddNewTaskToReadyList+0xc4>)
 800746c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800746e:	4b2c      	ldr	r3, [pc, #176]	@ (8007520 <prvAddNewTaskToReadyList+0xc8>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007476:	4a2a      	ldr	r2, [pc, #168]	@ (8007520 <prvAddNewTaskToReadyList+0xc8>)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800747c:	4b27      	ldr	r3, [pc, #156]	@ (800751c <prvAddNewTaskToReadyList+0xc4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d110      	bne.n	80074a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007484:	f000 fc2e 	bl	8007ce4 <prvInitialiseTaskLists>
 8007488:	e00d      	b.n	80074a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800748a:	4b26      	ldr	r3, [pc, #152]	@ (8007524 <prvAddNewTaskToReadyList+0xcc>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d109      	bne.n	80074a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007492:	4b23      	ldr	r3, [pc, #140]	@ (8007520 <prvAddNewTaskToReadyList+0xc8>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749c:	429a      	cmp	r2, r3
 800749e:	d802      	bhi.n	80074a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074a0:	4a1f      	ldr	r2, [pc, #124]	@ (8007520 <prvAddNewTaskToReadyList+0xc8>)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074a6:	4b20      	ldr	r3, [pc, #128]	@ (8007528 <prvAddNewTaskToReadyList+0xd0>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3301      	adds	r3, #1
 80074ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007528 <prvAddNewTaskToReadyList+0xd0>)
 80074ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007528 <prvAddNewTaskToReadyList+0xd0>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074bc:	4b1b      	ldr	r3, [pc, #108]	@ (800752c <prvAddNewTaskToReadyList+0xd4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d903      	bls.n	80074cc <prvAddNewTaskToReadyList+0x74>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	4a18      	ldr	r2, [pc, #96]	@ (800752c <prvAddNewTaskToReadyList+0xd4>)
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4a15      	ldr	r2, [pc, #84]	@ (8007530 <prvAddNewTaskToReadyList+0xd8>)
 80074da:	441a      	add	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3304      	adds	r3, #4
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f7ff f8e9 	bl	80066ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074e8:	f001 fa60 	bl	80089ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <prvAddNewTaskToReadyList+0xcc>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00e      	beq.n	8007512 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007520 <prvAddNewTaskToReadyList+0xc8>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fe:	429a      	cmp	r2, r3
 8007500:	d207      	bcs.n	8007512 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007502:	4b0c      	ldr	r3, [pc, #48]	@ (8007534 <prvAddNewTaskToReadyList+0xdc>)
 8007504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	24000f84 	.word	0x24000f84
 8007520:	24000ab0 	.word	0x24000ab0
 8007524:	24000f90 	.word	0x24000f90
 8007528:	24000fa0 	.word	0x24000fa0
 800752c:	24000f8c 	.word	0x24000f8c
 8007530:	24000ab4 	.word	0x24000ab4
 8007534:	e000ed04 	.word	0xe000ed04

08007538 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d018      	beq.n	800757c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800754a:	4b14      	ldr	r3, [pc, #80]	@ (800759c <vTaskDelay+0x64>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00b      	beq.n	800756a <vTaskDelay+0x32>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	60bb      	str	r3, [r7, #8]
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	e7fd      	b.n	8007566 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800756a:	f000 f88b 	bl	8007684 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800756e:	2100      	movs	r1, #0
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fd09 	bl	8007f88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007576:	f000 f893 	bl	80076a0 <xTaskResumeAll>
 800757a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d107      	bne.n	8007592 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007582:	4b07      	ldr	r3, [pc, #28]	@ (80075a0 <vTaskDelay+0x68>)
 8007584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007592:	bf00      	nop
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	24000fac 	.word	0x24000fac
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	@ 0x28
 80075a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075b2:	463a      	mov	r2, r7
 80075b4:	1d39      	adds	r1, r7, #4
 80075b6:	f107 0308 	add.w	r3, r7, #8
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff f81c 	bl	80065f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	9202      	str	r2, [sp, #8]
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	2300      	movs	r3, #0
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	2300      	movs	r3, #0
 80075d0:	460a      	mov	r2, r1
 80075d2:	4924      	ldr	r1, [pc, #144]	@ (8007664 <vTaskStartScheduler+0xc0>)
 80075d4:	4824      	ldr	r0, [pc, #144]	@ (8007668 <vTaskStartScheduler+0xc4>)
 80075d6:	f7ff fdf1 	bl	80071bc <xTaskCreateStatic>
 80075da:	4603      	mov	r3, r0
 80075dc:	4a23      	ldr	r2, [pc, #140]	@ (800766c <vTaskStartScheduler+0xc8>)
 80075de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075e0:	4b22      	ldr	r3, [pc, #136]	@ (800766c <vTaskStartScheduler+0xc8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075e8:	2301      	movs	r3, #1
 80075ea:	617b      	str	r3, [r7, #20]
 80075ec:	e001      	b.n	80075f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d102      	bne.n	80075fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075f8:	f000 fd1a 	bl	8008030 <xTimerCreateTimerTask>
 80075fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d11b      	bne.n	800763c <vTaskStartScheduler+0x98>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	613b      	str	r3, [r7, #16]
}
 8007616:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007618:	4b15      	ldr	r3, [pc, #84]	@ (8007670 <vTaskStartScheduler+0xcc>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3354      	adds	r3, #84	@ 0x54
 800761e:	4a15      	ldr	r2, [pc, #84]	@ (8007674 <vTaskStartScheduler+0xd0>)
 8007620:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007622:	4b15      	ldr	r3, [pc, #84]	@ (8007678 <vTaskStartScheduler+0xd4>)
 8007624:	f04f 32ff 	mov.w	r2, #4294967295
 8007628:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800762a:	4b14      	ldr	r3, [pc, #80]	@ (800767c <vTaskStartScheduler+0xd8>)
 800762c:	2201      	movs	r2, #1
 800762e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007630:	4b13      	ldr	r3, [pc, #76]	@ (8007680 <vTaskStartScheduler+0xdc>)
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007636:	f001 f8e3 	bl	8008800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800763a:	e00f      	b.n	800765c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d10b      	bne.n	800765c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	60fb      	str	r3, [r7, #12]
}
 8007656:	bf00      	nop
 8007658:	bf00      	nop
 800765a:	e7fd      	b.n	8007658 <vTaskStartScheduler+0xb4>
}
 800765c:	bf00      	nop
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	08009160 	.word	0x08009160
 8007668:	08007cb5 	.word	0x08007cb5
 800766c:	24000fa8 	.word	0x24000fa8
 8007670:	24000ab0 	.word	0x24000ab0
 8007674:	24000014 	.word	0x24000014
 8007678:	24000fa4 	.word	0x24000fa4
 800767c:	24000f90 	.word	0x24000f90
 8007680:	24000f88 	.word	0x24000f88

08007684 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007688:	4b04      	ldr	r3, [pc, #16]	@ (800769c <vTaskSuspendAll+0x18>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3301      	adds	r3, #1
 800768e:	4a03      	ldr	r2, [pc, #12]	@ (800769c <vTaskSuspendAll+0x18>)
 8007690:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007692:	bf00      	nop
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	24000fac 	.word	0x24000fac

080076a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076aa:	2300      	movs	r3, #0
 80076ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076ae:	4b42      	ldr	r3, [pc, #264]	@ (80077b8 <xTaskResumeAll+0x118>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10b      	bne.n	80076ce <xTaskResumeAll+0x2e>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	603b      	str	r3, [r7, #0]
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	e7fd      	b.n	80076ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076ce:	f001 f93b 	bl	8008948 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076d2:	4b39      	ldr	r3, [pc, #228]	@ (80077b8 <xTaskResumeAll+0x118>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	4a37      	ldr	r2, [pc, #220]	@ (80077b8 <xTaskResumeAll+0x118>)
 80076da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076dc:	4b36      	ldr	r3, [pc, #216]	@ (80077b8 <xTaskResumeAll+0x118>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d162      	bne.n	80077aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076e4:	4b35      	ldr	r3, [pc, #212]	@ (80077bc <xTaskResumeAll+0x11c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d05e      	beq.n	80077aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076ec:	e02f      	b.n	800774e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ee:	4b34      	ldr	r3, [pc, #208]	@ (80077c0 <xTaskResumeAll+0x120>)
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3318      	adds	r3, #24
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff f83a 	bl	8006774 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3304      	adds	r3, #4
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff f835 	bl	8006774 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770e:	4b2d      	ldr	r3, [pc, #180]	@ (80077c4 <xTaskResumeAll+0x124>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	d903      	bls.n	800771e <xTaskResumeAll+0x7e>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771a:	4a2a      	ldr	r2, [pc, #168]	@ (80077c4 <xTaskResumeAll+0x124>)
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4a27      	ldr	r2, [pc, #156]	@ (80077c8 <xTaskResumeAll+0x128>)
 800772c:	441a      	add	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3304      	adds	r3, #4
 8007732:	4619      	mov	r1, r3
 8007734:	4610      	mov	r0, r2
 8007736:	f7fe ffc0 	bl	80066ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800773e:	4b23      	ldr	r3, [pc, #140]	@ (80077cc <xTaskResumeAll+0x12c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007744:	429a      	cmp	r2, r3
 8007746:	d302      	bcc.n	800774e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007748:	4b21      	ldr	r3, [pc, #132]	@ (80077d0 <xTaskResumeAll+0x130>)
 800774a:	2201      	movs	r2, #1
 800774c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800774e:	4b1c      	ldr	r3, [pc, #112]	@ (80077c0 <xTaskResumeAll+0x120>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1cb      	bne.n	80076ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800775c:	f000 fb66 	bl	8007e2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007760:	4b1c      	ldr	r3, [pc, #112]	@ (80077d4 <xTaskResumeAll+0x134>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d010      	beq.n	800778e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800776c:	f000 f846 	bl	80077fc <xTaskIncrementTick>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007776:	4b16      	ldr	r3, [pc, #88]	@ (80077d0 <xTaskResumeAll+0x130>)
 8007778:	2201      	movs	r2, #1
 800777a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3b01      	subs	r3, #1
 8007780:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1f1      	bne.n	800776c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007788:	4b12      	ldr	r3, [pc, #72]	@ (80077d4 <xTaskResumeAll+0x134>)
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800778e:	4b10      	ldr	r3, [pc, #64]	@ (80077d0 <xTaskResumeAll+0x130>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d009      	beq.n	80077aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007796:	2301      	movs	r3, #1
 8007798:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800779a:	4b0f      	ldr	r3, [pc, #60]	@ (80077d8 <xTaskResumeAll+0x138>)
 800779c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077aa:	f001 f8ff 	bl	80089ac <vPortExitCritical>

	return xAlreadyYielded;
 80077ae:	68bb      	ldr	r3, [r7, #8]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	24000fac 	.word	0x24000fac
 80077bc:	24000f84 	.word	0x24000f84
 80077c0:	24000f44 	.word	0x24000f44
 80077c4:	24000f8c 	.word	0x24000f8c
 80077c8:	24000ab4 	.word	0x24000ab4
 80077cc:	24000ab0 	.word	0x24000ab0
 80077d0:	24000f98 	.word	0x24000f98
 80077d4:	24000f94 	.word	0x24000f94
 80077d8:	e000ed04 	.word	0xe000ed04

080077dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077e2:	4b05      	ldr	r3, [pc, #20]	@ (80077f8 <xTaskGetTickCount+0x1c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077e8:	687b      	ldr	r3, [r7, #4]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	24000f88 	.word	0x24000f88

080077fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007802:	2300      	movs	r3, #0
 8007804:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007806:	4b4f      	ldr	r3, [pc, #316]	@ (8007944 <xTaskIncrementTick+0x148>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	f040 8090 	bne.w	8007930 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007810:	4b4d      	ldr	r3, [pc, #308]	@ (8007948 <xTaskIncrementTick+0x14c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3301      	adds	r3, #1
 8007816:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007818:	4a4b      	ldr	r2, [pc, #300]	@ (8007948 <xTaskIncrementTick+0x14c>)
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d121      	bne.n	8007868 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007824:	4b49      	ldr	r3, [pc, #292]	@ (800794c <xTaskIncrementTick+0x150>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00b      	beq.n	8007846 <xTaskIncrementTick+0x4a>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	603b      	str	r3, [r7, #0]
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	e7fd      	b.n	8007842 <xTaskIncrementTick+0x46>
 8007846:	4b41      	ldr	r3, [pc, #260]	@ (800794c <xTaskIncrementTick+0x150>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	4b40      	ldr	r3, [pc, #256]	@ (8007950 <xTaskIncrementTick+0x154>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a3e      	ldr	r2, [pc, #248]	@ (800794c <xTaskIncrementTick+0x150>)
 8007852:	6013      	str	r3, [r2, #0]
 8007854:	4a3e      	ldr	r2, [pc, #248]	@ (8007950 <xTaskIncrementTick+0x154>)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	4b3e      	ldr	r3, [pc, #248]	@ (8007954 <xTaskIncrementTick+0x158>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3301      	adds	r3, #1
 8007860:	4a3c      	ldr	r2, [pc, #240]	@ (8007954 <xTaskIncrementTick+0x158>)
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	f000 fae2 	bl	8007e2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007868:	4b3b      	ldr	r3, [pc, #236]	@ (8007958 <xTaskIncrementTick+0x15c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	429a      	cmp	r2, r3
 8007870:	d349      	bcc.n	8007906 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007872:	4b36      	ldr	r3, [pc, #216]	@ (800794c <xTaskIncrementTick+0x150>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d104      	bne.n	8007886 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800787c:	4b36      	ldr	r3, [pc, #216]	@ (8007958 <xTaskIncrementTick+0x15c>)
 800787e:	f04f 32ff 	mov.w	r2, #4294967295
 8007882:	601a      	str	r2, [r3, #0]
					break;
 8007884:	e03f      	b.n	8007906 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007886:	4b31      	ldr	r3, [pc, #196]	@ (800794c <xTaskIncrementTick+0x150>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	429a      	cmp	r2, r3
 800789c:	d203      	bcs.n	80078a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800789e:	4a2e      	ldr	r2, [pc, #184]	@ (8007958 <xTaskIncrementTick+0x15c>)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078a4:	e02f      	b.n	8007906 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	3304      	adds	r3, #4
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fe ff62 	bl	8006774 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d004      	beq.n	80078c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	3318      	adds	r3, #24
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe ff59 	bl	8006774 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c6:	4b25      	ldr	r3, [pc, #148]	@ (800795c <xTaskIncrementTick+0x160>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d903      	bls.n	80078d6 <xTaskIncrementTick+0xda>
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d2:	4a22      	ldr	r2, [pc, #136]	@ (800795c <xTaskIncrementTick+0x160>)
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007960 <xTaskIncrementTick+0x164>)
 80078e4:	441a      	add	r2, r3
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4619      	mov	r1, r3
 80078ec:	4610      	mov	r0, r2
 80078ee:	f7fe fee4 	bl	80066ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007964 <xTaskIncrementTick+0x168>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d3b8      	bcc.n	8007872 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007900:	2301      	movs	r3, #1
 8007902:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007904:	e7b5      	b.n	8007872 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007906:	4b17      	ldr	r3, [pc, #92]	@ (8007964 <xTaskIncrementTick+0x168>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790c:	4914      	ldr	r1, [pc, #80]	@ (8007960 <xTaskIncrementTick+0x164>)
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	440b      	add	r3, r1
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d901      	bls.n	8007922 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800791e:	2301      	movs	r3, #1
 8007920:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007922:	4b11      	ldr	r3, [pc, #68]	@ (8007968 <xTaskIncrementTick+0x16c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d007      	beq.n	800793a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800792a:	2301      	movs	r3, #1
 800792c:	617b      	str	r3, [r7, #20]
 800792e:	e004      	b.n	800793a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007930:	4b0e      	ldr	r3, [pc, #56]	@ (800796c <xTaskIncrementTick+0x170>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3301      	adds	r3, #1
 8007936:	4a0d      	ldr	r2, [pc, #52]	@ (800796c <xTaskIncrementTick+0x170>)
 8007938:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800793a:	697b      	ldr	r3, [r7, #20]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	24000fac 	.word	0x24000fac
 8007948:	24000f88 	.word	0x24000f88
 800794c:	24000f3c 	.word	0x24000f3c
 8007950:	24000f40 	.word	0x24000f40
 8007954:	24000f9c 	.word	0x24000f9c
 8007958:	24000fa4 	.word	0x24000fa4
 800795c:	24000f8c 	.word	0x24000f8c
 8007960:	24000ab4 	.word	0x24000ab4
 8007964:	24000ab0 	.word	0x24000ab0
 8007968:	24000f98 	.word	0x24000f98
 800796c:	24000f94 	.word	0x24000f94

08007970 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007976:	4b2b      	ldr	r3, [pc, #172]	@ (8007a24 <vTaskSwitchContext+0xb4>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800797e:	4b2a      	ldr	r3, [pc, #168]	@ (8007a28 <vTaskSwitchContext+0xb8>)
 8007980:	2201      	movs	r2, #1
 8007982:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007984:	e047      	b.n	8007a16 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007986:	4b28      	ldr	r3, [pc, #160]	@ (8007a28 <vTaskSwitchContext+0xb8>)
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800798c:	4b27      	ldr	r3, [pc, #156]	@ (8007a2c <vTaskSwitchContext+0xbc>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	e011      	b.n	80079b8 <vTaskSwitchContext+0x48>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	607b      	str	r3, [r7, #4]
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <vTaskSwitchContext+0x3e>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	491d      	ldr	r1, [pc, #116]	@ (8007a30 <vTaskSwitchContext+0xc0>)
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	440b      	add	r3, r1
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d0e3      	beq.n	8007994 <vTaskSwitchContext+0x24>
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4a16      	ldr	r2, [pc, #88]	@ (8007a30 <vTaskSwitchContext+0xc0>)
 80079d8:	4413      	add	r3, r2
 80079da:	60bb      	str	r3, [r7, #8]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	605a      	str	r2, [r3, #4]
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	3308      	adds	r3, #8
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d104      	bne.n	80079fc <vTaskSwitchContext+0x8c>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	605a      	str	r2, [r3, #4]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	4a0c      	ldr	r2, [pc, #48]	@ (8007a34 <vTaskSwitchContext+0xc4>)
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	4a09      	ldr	r2, [pc, #36]	@ (8007a2c <vTaskSwitchContext+0xbc>)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a0c:	4b09      	ldr	r3, [pc, #36]	@ (8007a34 <vTaskSwitchContext+0xc4>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	3354      	adds	r3, #84	@ 0x54
 8007a12:	4a09      	ldr	r2, [pc, #36]	@ (8007a38 <vTaskSwitchContext+0xc8>)
 8007a14:	6013      	str	r3, [r2, #0]
}
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	24000fac 	.word	0x24000fac
 8007a28:	24000f98 	.word	0x24000f98
 8007a2c:	24000f8c 	.word	0x24000f8c
 8007a30:	24000ab4 	.word	0x24000ab4
 8007a34:	24000ab0 	.word	0x24000ab0
 8007a38:	24000014 	.word	0x24000014

08007a3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10b      	bne.n	8007a64 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	60fb      	str	r3, [r7, #12]
}
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	e7fd      	b.n	8007a60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a64:	4b07      	ldr	r3, [pc, #28]	@ (8007a84 <vTaskPlaceOnEventList+0x48>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3318      	adds	r3, #24
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7fe fe48 	bl	8006702 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a72:	2101      	movs	r1, #1
 8007a74:	6838      	ldr	r0, [r7, #0]
 8007a76:	f000 fa87 	bl	8007f88 <prvAddCurrentTaskToDelayedList>
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	24000ab0 	.word	0x24000ab0

08007a88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10b      	bne.n	8007ab2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	617b      	str	r3, [r7, #20]
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	e7fd      	b.n	8007aae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8007adc <vTaskPlaceOnEventListRestricted+0x54>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3318      	adds	r3, #24
 8007ab8:	4619      	mov	r1, r3
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f7fe fdfd 	bl	80066ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d002      	beq.n	8007acc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007acc:	6879      	ldr	r1, [r7, #4]
 8007ace:	68b8      	ldr	r0, [r7, #8]
 8007ad0:	f000 fa5a 	bl	8007f88 <prvAddCurrentTaskToDelayedList>
	}
 8007ad4:	bf00      	nop
 8007ad6:	3718      	adds	r7, #24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	24000ab0 	.word	0x24000ab0

08007ae0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10b      	bne.n	8007b0e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	60fb      	str	r3, [r7, #12]
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	e7fd      	b.n	8007b0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	3318      	adds	r3, #24
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fe fe2e 	bl	8006774 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b18:	4b1d      	ldr	r3, [pc, #116]	@ (8007b90 <xTaskRemoveFromEventList+0xb0>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d11d      	bne.n	8007b5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	3304      	adds	r3, #4
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe fe25 	bl	8006774 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b2e:	4b19      	ldr	r3, [pc, #100]	@ (8007b94 <xTaskRemoveFromEventList+0xb4>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d903      	bls.n	8007b3e <xTaskRemoveFromEventList+0x5e>
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3a:	4a16      	ldr	r2, [pc, #88]	@ (8007b94 <xTaskRemoveFromEventList+0xb4>)
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4a13      	ldr	r2, [pc, #76]	@ (8007b98 <xTaskRemoveFromEventList+0xb8>)
 8007b4c:	441a      	add	r2, r3
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	3304      	adds	r3, #4
 8007b52:	4619      	mov	r1, r3
 8007b54:	4610      	mov	r0, r2
 8007b56:	f7fe fdb0 	bl	80066ba <vListInsertEnd>
 8007b5a:	e005      	b.n	8007b68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	3318      	adds	r3, #24
 8007b60:	4619      	mov	r1, r3
 8007b62:	480e      	ldr	r0, [pc, #56]	@ (8007b9c <xTaskRemoveFromEventList+0xbc>)
 8007b64:	f7fe fda9 	bl	80066ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba0 <xTaskRemoveFromEventList+0xc0>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d905      	bls.n	8007b82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b76:	2301      	movs	r3, #1
 8007b78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007ba4 <xTaskRemoveFromEventList+0xc4>)
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	e001      	b.n	8007b86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b86:	697b      	ldr	r3, [r7, #20]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	24000fac 	.word	0x24000fac
 8007b94:	24000f8c 	.word	0x24000f8c
 8007b98:	24000ab4 	.word	0x24000ab4
 8007b9c:	24000f44 	.word	0x24000f44
 8007ba0:	24000ab0 	.word	0x24000ab0
 8007ba4:	24000f98 	.word	0x24000f98

08007ba8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007bb0:	4b06      	ldr	r3, [pc, #24]	@ (8007bcc <vTaskInternalSetTimeOutState+0x24>)
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bb8:	4b05      	ldr	r3, [pc, #20]	@ (8007bd0 <vTaskInternalSetTimeOutState+0x28>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	605a      	str	r2, [r3, #4]
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	24000f9c 	.word	0x24000f9c
 8007bd0:	24000f88 	.word	0x24000f88

08007bd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b088      	sub	sp, #32
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10b      	bne.n	8007bfc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	613b      	str	r3, [r7, #16]
}
 8007bf6:	bf00      	nop
 8007bf8:	bf00      	nop
 8007bfa:	e7fd      	b.n	8007bf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10b      	bne.n	8007c1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	60fb      	str	r3, [r7, #12]
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop
 8007c18:	e7fd      	b.n	8007c16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007c1a:	f000 fe95 	bl	8008948 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007c94 <xTaskCheckForTimeOut+0xc0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c36:	d102      	bne.n	8007c3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	e023      	b.n	8007c86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4b15      	ldr	r3, [pc, #84]	@ (8007c98 <xTaskCheckForTimeOut+0xc4>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d007      	beq.n	8007c5a <xTaskCheckForTimeOut+0x86>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d302      	bcc.n	8007c5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	61fb      	str	r3, [r7, #28]
 8007c58:	e015      	b.n	8007c86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d20b      	bcs.n	8007c7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	1ad2      	subs	r2, r2, r3
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7ff ff99 	bl	8007ba8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c76:	2300      	movs	r3, #0
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	e004      	b.n	8007c86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c82:	2301      	movs	r3, #1
 8007c84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c86:	f000 fe91 	bl	80089ac <vPortExitCritical>

	return xReturn;
 8007c8a:	69fb      	ldr	r3, [r7, #28]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3720      	adds	r7, #32
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	24000f88 	.word	0x24000f88
 8007c98:	24000f9c 	.word	0x24000f9c

08007c9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ca0:	4b03      	ldr	r3, [pc, #12]	@ (8007cb0 <vTaskMissedYield+0x14>)
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]
}
 8007ca6:	bf00      	nop
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	24000f98 	.word	0x24000f98

08007cb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cbc:	f000 f852 	bl	8007d64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cc0:	4b06      	ldr	r3, [pc, #24]	@ (8007cdc <prvIdleTask+0x28>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d9f9      	bls.n	8007cbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cc8:	4b05      	ldr	r3, [pc, #20]	@ (8007ce0 <prvIdleTask+0x2c>)
 8007cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007cd8:	e7f0      	b.n	8007cbc <prvIdleTask+0x8>
 8007cda:	bf00      	nop
 8007cdc:	24000ab4 	.word	0x24000ab4
 8007ce0:	e000ed04 	.word	0xe000ed04

08007ce4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	e00c      	b.n	8007d0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4a12      	ldr	r2, [pc, #72]	@ (8007d44 <prvInitialiseTaskLists+0x60>)
 8007cfc:	4413      	add	r3, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fcae 	bl	8006660 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3301      	adds	r3, #1
 8007d08:	607b      	str	r3, [r7, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b37      	cmp	r3, #55	@ 0x37
 8007d0e:	d9ef      	bls.n	8007cf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d10:	480d      	ldr	r0, [pc, #52]	@ (8007d48 <prvInitialiseTaskLists+0x64>)
 8007d12:	f7fe fca5 	bl	8006660 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d16:	480d      	ldr	r0, [pc, #52]	@ (8007d4c <prvInitialiseTaskLists+0x68>)
 8007d18:	f7fe fca2 	bl	8006660 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d1c:	480c      	ldr	r0, [pc, #48]	@ (8007d50 <prvInitialiseTaskLists+0x6c>)
 8007d1e:	f7fe fc9f 	bl	8006660 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d22:	480c      	ldr	r0, [pc, #48]	@ (8007d54 <prvInitialiseTaskLists+0x70>)
 8007d24:	f7fe fc9c 	bl	8006660 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d28:	480b      	ldr	r0, [pc, #44]	@ (8007d58 <prvInitialiseTaskLists+0x74>)
 8007d2a:	f7fe fc99 	bl	8006660 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d5c <prvInitialiseTaskLists+0x78>)
 8007d30:	4a05      	ldr	r2, [pc, #20]	@ (8007d48 <prvInitialiseTaskLists+0x64>)
 8007d32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d34:	4b0a      	ldr	r3, [pc, #40]	@ (8007d60 <prvInitialiseTaskLists+0x7c>)
 8007d36:	4a05      	ldr	r2, [pc, #20]	@ (8007d4c <prvInitialiseTaskLists+0x68>)
 8007d38:	601a      	str	r2, [r3, #0]
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	24000ab4 	.word	0x24000ab4
 8007d48:	24000f14 	.word	0x24000f14
 8007d4c:	24000f28 	.word	0x24000f28
 8007d50:	24000f44 	.word	0x24000f44
 8007d54:	24000f58 	.word	0x24000f58
 8007d58:	24000f70 	.word	0x24000f70
 8007d5c:	24000f3c 	.word	0x24000f3c
 8007d60:	24000f40 	.word	0x24000f40

08007d64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d6a:	e019      	b.n	8007da0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d6c:	f000 fdec 	bl	8008948 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d70:	4b10      	ldr	r3, [pc, #64]	@ (8007db4 <prvCheckTasksWaitingTermination+0x50>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fcf9 	bl	8006774 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d82:	4b0d      	ldr	r3, [pc, #52]	@ (8007db8 <prvCheckTasksWaitingTermination+0x54>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3b01      	subs	r3, #1
 8007d88:	4a0b      	ldr	r2, [pc, #44]	@ (8007db8 <prvCheckTasksWaitingTermination+0x54>)
 8007d8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dbc <prvCheckTasksWaitingTermination+0x58>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	4a0a      	ldr	r2, [pc, #40]	@ (8007dbc <prvCheckTasksWaitingTermination+0x58>)
 8007d94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d96:	f000 fe09 	bl	80089ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f810 	bl	8007dc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007da0:	4b06      	ldr	r3, [pc, #24]	@ (8007dbc <prvCheckTasksWaitingTermination+0x58>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e1      	bne.n	8007d6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007da8:	bf00      	nop
 8007daa:	bf00      	nop
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	24000f58 	.word	0x24000f58
 8007db8:	24000f84 	.word	0x24000f84
 8007dbc:	24000f6c 	.word	0x24000f6c

08007dc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3354      	adds	r3, #84	@ 0x54
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 f8d3 	bl	8008f78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d108      	bne.n	8007dee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 ffa1 	bl	8008d28 <vPortFree>
				vPortFree( pxTCB );
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 ff9e 	bl	8008d28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007dec:	e019      	b.n	8007e22 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d103      	bne.n	8007e00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 ff95 	bl	8008d28 <vPortFree>
	}
 8007dfe:	e010      	b.n	8007e22 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d00b      	beq.n	8007e22 <prvDeleteTCB+0x62>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	60fb      	str	r3, [r7, #12]
}
 8007e1c:	bf00      	nop
 8007e1e:	bf00      	nop
 8007e20:	e7fd      	b.n	8007e1e <prvDeleteTCB+0x5e>
	}
 8007e22:	bf00      	nop
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
	...

08007e2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e32:	4b0c      	ldr	r3, [pc, #48]	@ (8007e64 <prvResetNextTaskUnblockTime+0x38>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e68 <prvResetNextTaskUnblockTime+0x3c>)
 8007e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e44:	e008      	b.n	8007e58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e46:	4b07      	ldr	r3, [pc, #28]	@ (8007e64 <prvResetNextTaskUnblockTime+0x38>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	4a04      	ldr	r2, [pc, #16]	@ (8007e68 <prvResetNextTaskUnblockTime+0x3c>)
 8007e56:	6013      	str	r3, [r2, #0]
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	24000f3c 	.word	0x24000f3c
 8007e68:	24000fa4 	.word	0x24000fa4

08007e6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e72:	4b0b      	ldr	r3, [pc, #44]	@ (8007ea0 <xTaskGetSchedulerState+0x34>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d102      	bne.n	8007e80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	607b      	str	r3, [r7, #4]
 8007e7e:	e008      	b.n	8007e92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e80:	4b08      	ldr	r3, [pc, #32]	@ (8007ea4 <xTaskGetSchedulerState+0x38>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d102      	bne.n	8007e8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	607b      	str	r3, [r7, #4]
 8007e8c:	e001      	b.n	8007e92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e92:	687b      	ldr	r3, [r7, #4]
	}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	24000f90 	.word	0x24000f90
 8007ea4:	24000fac 	.word	0x24000fac

08007ea8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d058      	beq.n	8007f70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8007f7c <xTaskPriorityDisinherit+0xd4>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d00b      	beq.n	8007ee0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	60fb      	str	r3, [r7, #12]
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	e7fd      	b.n	8007edc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10b      	bne.n	8007f00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	60bb      	str	r3, [r7, #8]
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	e7fd      	b.n	8007efc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f04:	1e5a      	subs	r2, r3, #1
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d02c      	beq.n	8007f70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d128      	bne.n	8007f70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	3304      	adds	r3, #4
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fe fc26 	bl	8006774 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f40:	4b0f      	ldr	r3, [pc, #60]	@ (8007f80 <xTaskPriorityDisinherit+0xd8>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d903      	bls.n	8007f50 <xTaskPriorityDisinherit+0xa8>
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8007f80 <xTaskPriorityDisinherit+0xd8>)
 8007f4e:	6013      	str	r3, [r2, #0]
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f54:	4613      	mov	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4a09      	ldr	r2, [pc, #36]	@ (8007f84 <xTaskPriorityDisinherit+0xdc>)
 8007f5e:	441a      	add	r2, r3
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	3304      	adds	r3, #4
 8007f64:	4619      	mov	r1, r3
 8007f66:	4610      	mov	r0, r2
 8007f68:	f7fe fba7 	bl	80066ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f70:	697b      	ldr	r3, [r7, #20]
	}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	24000ab0 	.word	0x24000ab0
 8007f80:	24000f8c 	.word	0x24000f8c
 8007f84:	24000ab4 	.word	0x24000ab4

08007f88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f92:	4b21      	ldr	r3, [pc, #132]	@ (8008018 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f98:	4b20      	ldr	r3, [pc, #128]	@ (800801c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe fbe8 	bl	8006774 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007faa:	d10a      	bne.n	8007fc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800801c <prvAddCurrentTaskToDelayedList+0x94>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4819      	ldr	r0, [pc, #100]	@ (8008020 <prvAddCurrentTaskToDelayedList+0x98>)
 8007fbc:	f7fe fb7d 	bl	80066ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fc0:	e026      	b.n	8008010 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fca:	4b14      	ldr	r3, [pc, #80]	@ (800801c <prvAddCurrentTaskToDelayedList+0x94>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d209      	bcs.n	8007fee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fda:	4b12      	ldr	r3, [pc, #72]	@ (8008024 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	4b0f      	ldr	r3, [pc, #60]	@ (800801c <prvAddCurrentTaskToDelayedList+0x94>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	f7fe fb8b 	bl	8006702 <vListInsert>
}
 8007fec:	e010      	b.n	8008010 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fee:	4b0e      	ldr	r3, [pc, #56]	@ (8008028 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800801c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	4610      	mov	r0, r2
 8007ffc:	f7fe fb81 	bl	8006702 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008000:	4b0a      	ldr	r3, [pc, #40]	@ (800802c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	429a      	cmp	r2, r3
 8008008:	d202      	bcs.n	8008010 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800800a:	4a08      	ldr	r2, [pc, #32]	@ (800802c <prvAddCurrentTaskToDelayedList+0xa4>)
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	6013      	str	r3, [r2, #0]
}
 8008010:	bf00      	nop
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	24000f88 	.word	0x24000f88
 800801c:	24000ab0 	.word	0x24000ab0
 8008020:	24000f70 	.word	0x24000f70
 8008024:	24000f40 	.word	0x24000f40
 8008028:	24000f3c 	.word	0x24000f3c
 800802c:	24000fa4 	.word	0x24000fa4

08008030 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08a      	sub	sp, #40	@ 0x28
 8008034:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008036:	2300      	movs	r3, #0
 8008038:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800803a:	f000 fb13 	bl	8008664 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800803e:	4b1d      	ldr	r3, [pc, #116]	@ (80080b4 <xTimerCreateTimerTask+0x84>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d021      	beq.n	800808a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800804a:	2300      	movs	r3, #0
 800804c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800804e:	1d3a      	adds	r2, r7, #4
 8008050:	f107 0108 	add.w	r1, r7, #8
 8008054:	f107 030c 	add.w	r3, r7, #12
 8008058:	4618      	mov	r0, r3
 800805a:	f7fe fae7 	bl	800662c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800805e:	6879      	ldr	r1, [r7, #4]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	9202      	str	r2, [sp, #8]
 8008066:	9301      	str	r3, [sp, #4]
 8008068:	2302      	movs	r3, #2
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	2300      	movs	r3, #0
 800806e:	460a      	mov	r2, r1
 8008070:	4911      	ldr	r1, [pc, #68]	@ (80080b8 <xTimerCreateTimerTask+0x88>)
 8008072:	4812      	ldr	r0, [pc, #72]	@ (80080bc <xTimerCreateTimerTask+0x8c>)
 8008074:	f7ff f8a2 	bl	80071bc <xTaskCreateStatic>
 8008078:	4603      	mov	r3, r0
 800807a:	4a11      	ldr	r2, [pc, #68]	@ (80080c0 <xTimerCreateTimerTask+0x90>)
 800807c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800807e:	4b10      	ldr	r3, [pc, #64]	@ (80080c0 <xTimerCreateTimerTask+0x90>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008086:	2301      	movs	r3, #1
 8008088:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10b      	bne.n	80080a8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	613b      	str	r3, [r7, #16]
}
 80080a2:	bf00      	nop
 80080a4:	bf00      	nop
 80080a6:	e7fd      	b.n	80080a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80080a8:	697b      	ldr	r3, [r7, #20]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	24000fe0 	.word	0x24000fe0
 80080b8:	08009168 	.word	0x08009168
 80080bc:	080081fd 	.word	0x080081fd
 80080c0:	24000fe4 	.word	0x24000fe4

080080c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08a      	sub	sp, #40	@ 0x28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10b      	bne.n	80080f4 <xTimerGenericCommand+0x30>
	__asm volatile
 80080dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e0:	f383 8811 	msr	BASEPRI, r3
 80080e4:	f3bf 8f6f 	isb	sy
 80080e8:	f3bf 8f4f 	dsb	sy
 80080ec:	623b      	str	r3, [r7, #32]
}
 80080ee:	bf00      	nop
 80080f0:	bf00      	nop
 80080f2:	e7fd      	b.n	80080f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80080f4:	4b19      	ldr	r3, [pc, #100]	@ (800815c <xTimerGenericCommand+0x98>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d02a      	beq.n	8008152 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2b05      	cmp	r3, #5
 800810c:	dc18      	bgt.n	8008140 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800810e:	f7ff fead 	bl	8007e6c <xTaskGetSchedulerState>
 8008112:	4603      	mov	r3, r0
 8008114:	2b02      	cmp	r3, #2
 8008116:	d109      	bne.n	800812c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008118:	4b10      	ldr	r3, [pc, #64]	@ (800815c <xTimerGenericCommand+0x98>)
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	f107 0110 	add.w	r1, r7, #16
 8008120:	2300      	movs	r3, #0
 8008122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008124:	f7fe fc5a 	bl	80069dc <xQueueGenericSend>
 8008128:	6278      	str	r0, [r7, #36]	@ 0x24
 800812a:	e012      	b.n	8008152 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800812c:	4b0b      	ldr	r3, [pc, #44]	@ (800815c <xTimerGenericCommand+0x98>)
 800812e:	6818      	ldr	r0, [r3, #0]
 8008130:	f107 0110 	add.w	r1, r7, #16
 8008134:	2300      	movs	r3, #0
 8008136:	2200      	movs	r2, #0
 8008138:	f7fe fc50 	bl	80069dc <xQueueGenericSend>
 800813c:	6278      	str	r0, [r7, #36]	@ 0x24
 800813e:	e008      	b.n	8008152 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008140:	4b06      	ldr	r3, [pc, #24]	@ (800815c <xTimerGenericCommand+0x98>)
 8008142:	6818      	ldr	r0, [r3, #0]
 8008144:	f107 0110 	add.w	r1, r7, #16
 8008148:	2300      	movs	r3, #0
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	f7fe fd48 	bl	8006be0 <xQueueGenericSendFromISR>
 8008150:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008154:	4618      	mov	r0, r3
 8008156:	3728      	adds	r7, #40	@ 0x28
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	24000fe0 	.word	0x24000fe0

08008160 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af02      	add	r7, sp, #8
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800816a:	4b23      	ldr	r3, [pc, #140]	@ (80081f8 <prvProcessExpiredTimer+0x98>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	3304      	adds	r3, #4
 8008178:	4618      	mov	r0, r3
 800817a:	f7fe fafb 	bl	8006774 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008184:	f003 0304 	and.w	r3, r3, #4
 8008188:	2b00      	cmp	r3, #0
 800818a:	d023      	beq.n	80081d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	699a      	ldr	r2, [r3, #24]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	18d1      	adds	r1, r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	6978      	ldr	r0, [r7, #20]
 800819a:	f000 f8d5 	bl	8008348 <prvInsertTimerInActiveList>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d020      	beq.n	80081e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081a4:	2300      	movs	r3, #0
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	2300      	movs	r3, #0
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	2100      	movs	r1, #0
 80081ae:	6978      	ldr	r0, [r7, #20]
 80081b0:	f7ff ff88 	bl	80080c4 <xTimerGenericCommand>
 80081b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d114      	bne.n	80081e6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	60fb      	str	r3, [r7, #12]
}
 80081ce:	bf00      	nop
 80081d0:	bf00      	nop
 80081d2:	e7fd      	b.n	80081d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081da:	f023 0301 	bic.w	r3, r3, #1
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	6978      	ldr	r0, [r7, #20]
 80081ec:	4798      	blx	r3
}
 80081ee:	bf00      	nop
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	24000fd8 	.word	0x24000fd8

080081fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008204:	f107 0308 	add.w	r3, r7, #8
 8008208:	4618      	mov	r0, r3
 800820a:	f000 f859 	bl	80082c0 <prvGetNextExpireTime>
 800820e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	4619      	mov	r1, r3
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 f805 	bl	8008224 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800821a:	f000 f8d7 	bl	80083cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800821e:	bf00      	nop
 8008220:	e7f0      	b.n	8008204 <prvTimerTask+0x8>
	...

08008224 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800822e:	f7ff fa29 	bl	8007684 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008232:	f107 0308 	add.w	r3, r7, #8
 8008236:	4618      	mov	r0, r3
 8008238:	f000 f866 	bl	8008308 <prvSampleTimeNow>
 800823c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d130      	bne.n	80082a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10a      	bne.n	8008260 <prvProcessTimerOrBlockTask+0x3c>
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	429a      	cmp	r2, r3
 8008250:	d806      	bhi.n	8008260 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008252:	f7ff fa25 	bl	80076a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008256:	68f9      	ldr	r1, [r7, #12]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff ff81 	bl	8008160 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800825e:	e024      	b.n	80082aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d008      	beq.n	8008278 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008266:	4b13      	ldr	r3, [pc, #76]	@ (80082b4 <prvProcessTimerOrBlockTask+0x90>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <prvProcessTimerOrBlockTask+0x50>
 8008270:	2301      	movs	r3, #1
 8008272:	e000      	b.n	8008276 <prvProcessTimerOrBlockTask+0x52>
 8008274:	2300      	movs	r3, #0
 8008276:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008278:	4b0f      	ldr	r3, [pc, #60]	@ (80082b8 <prvProcessTimerOrBlockTask+0x94>)
 800827a:	6818      	ldr	r0, [r3, #0]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	4619      	mov	r1, r3
 8008286:	f7fe ff65 	bl	8007154 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800828a:	f7ff fa09 	bl	80076a0 <xTaskResumeAll>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10a      	bne.n	80082aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008294:	4b09      	ldr	r3, [pc, #36]	@ (80082bc <prvProcessTimerOrBlockTask+0x98>)
 8008296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	f3bf 8f6f 	isb	sy
}
 80082a4:	e001      	b.n	80082aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082a6:	f7ff f9fb 	bl	80076a0 <xTaskResumeAll>
}
 80082aa:	bf00      	nop
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	24000fdc 	.word	0x24000fdc
 80082b8:	24000fe0 	.word	0x24000fe0
 80082bc:	e000ed04 	.word	0xe000ed04

080082c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80082c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008304 <prvGetNextExpireTime+0x44>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <prvGetNextExpireTime+0x16>
 80082d2:	2201      	movs	r2, #1
 80082d4:	e000      	b.n	80082d8 <prvGetNextExpireTime+0x18>
 80082d6:	2200      	movs	r2, #0
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d105      	bne.n	80082f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082e4:	4b07      	ldr	r3, [pc, #28]	@ (8008304 <prvGetNextExpireTime+0x44>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	60fb      	str	r3, [r7, #12]
 80082ee:	e001      	b.n	80082f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80082f4:	68fb      	ldr	r3, [r7, #12]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	24000fd8 	.word	0x24000fd8

08008308 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008310:	f7ff fa64 	bl	80077dc <xTaskGetTickCount>
 8008314:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008316:	4b0b      	ldr	r3, [pc, #44]	@ (8008344 <prvSampleTimeNow+0x3c>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	429a      	cmp	r2, r3
 800831e:	d205      	bcs.n	800832c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008320:	f000 f93a 	bl	8008598 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	601a      	str	r2, [r3, #0]
 800832a:	e002      	b.n	8008332 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008332:	4a04      	ldr	r2, [pc, #16]	@ (8008344 <prvSampleTimeNow+0x3c>)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008338:	68fb      	ldr	r3, [r7, #12]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	24000fe8 	.word	0x24000fe8

08008348 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008356:	2300      	movs	r3, #0
 8008358:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	429a      	cmp	r2, r3
 800836c:	d812      	bhi.n	8008394 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	1ad2      	subs	r2, r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	429a      	cmp	r2, r3
 800837a:	d302      	bcc.n	8008382 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800837c:	2301      	movs	r3, #1
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	e01b      	b.n	80083ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008382:	4b10      	ldr	r3, [pc, #64]	@ (80083c4 <prvInsertTimerInActiveList+0x7c>)
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3304      	adds	r3, #4
 800838a:	4619      	mov	r1, r3
 800838c:	4610      	mov	r0, r2
 800838e:	f7fe f9b8 	bl	8006702 <vListInsert>
 8008392:	e012      	b.n	80083ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	429a      	cmp	r2, r3
 800839a:	d206      	bcs.n	80083aa <prvInsertTimerInActiveList+0x62>
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d302      	bcc.n	80083aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083a4:	2301      	movs	r3, #1
 80083a6:	617b      	str	r3, [r7, #20]
 80083a8:	e007      	b.n	80083ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083aa:	4b07      	ldr	r3, [pc, #28]	@ (80083c8 <prvInsertTimerInActiveList+0x80>)
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3304      	adds	r3, #4
 80083b2:	4619      	mov	r1, r3
 80083b4:	4610      	mov	r0, r2
 80083b6:	f7fe f9a4 	bl	8006702 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80083ba:	697b      	ldr	r3, [r7, #20]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	24000fdc 	.word	0x24000fdc
 80083c8:	24000fd8 	.word	0x24000fd8

080083cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08e      	sub	sp, #56	@ 0x38
 80083d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083d2:	e0ce      	b.n	8008572 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da19      	bge.n	800840e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80083da:	1d3b      	adds	r3, r7, #4
 80083dc:	3304      	adds	r3, #4
 80083de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80083e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10b      	bne.n	80083fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	61fb      	str	r3, [r7, #28]
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	e7fd      	b.n	80083fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80083fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008404:	6850      	ldr	r0, [r2, #4]
 8008406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008408:	6892      	ldr	r2, [r2, #8]
 800840a:	4611      	mov	r1, r2
 800840c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	f2c0 80ae 	blt.w	8008572 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800841a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d004      	beq.n	800842c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008424:	3304      	adds	r3, #4
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe f9a4 	bl	8006774 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800842c:	463b      	mov	r3, r7
 800842e:	4618      	mov	r0, r3
 8008430:	f7ff ff6a 	bl	8008308 <prvSampleTimeNow>
 8008434:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b09      	cmp	r3, #9
 800843a:	f200 8097 	bhi.w	800856c <prvProcessReceivedCommands+0x1a0>
 800843e:	a201      	add	r2, pc, #4	@ (adr r2, 8008444 <prvProcessReceivedCommands+0x78>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	0800846d 	.word	0x0800846d
 8008448:	0800846d 	.word	0x0800846d
 800844c:	0800846d 	.word	0x0800846d
 8008450:	080084e3 	.word	0x080084e3
 8008454:	080084f7 	.word	0x080084f7
 8008458:	08008543 	.word	0x08008543
 800845c:	0800846d 	.word	0x0800846d
 8008460:	0800846d 	.word	0x0800846d
 8008464:	080084e3 	.word	0x080084e3
 8008468:	080084f7 	.word	0x080084f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800846c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008472:	f043 0301 	orr.w	r3, r3, #1
 8008476:	b2da      	uxtb	r2, r3
 8008478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	18d1      	adds	r1, r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800848a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800848c:	f7ff ff5c 	bl	8008348 <prvInsertTimerInActiveList>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d06c      	beq.n	8008570 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800849c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d061      	beq.n	8008570 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	441a      	add	r2, r3
 80084b4:	2300      	movs	r3, #0
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	2300      	movs	r3, #0
 80084ba:	2100      	movs	r1, #0
 80084bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084be:	f7ff fe01 	bl	80080c4 <xTimerGenericCommand>
 80084c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d152      	bne.n	8008570 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	61bb      	str	r3, [r7, #24]
}
 80084dc:	bf00      	nop
 80084de:	bf00      	nop
 80084e0:	e7fd      	b.n	80084de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084e8:	f023 0301 	bic.w	r3, r3, #1
 80084ec:	b2da      	uxtb	r2, r3
 80084ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80084f4:	e03d      	b.n	8008572 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084fc:	f043 0301 	orr.w	r3, r3, #1
 8008500:	b2da      	uxtb	r2, r3
 8008502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008504:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800850e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10b      	bne.n	800852e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	617b      	str	r3, [r7, #20]
}
 8008528:	bf00      	nop
 800852a:	bf00      	nop
 800852c:	e7fd      	b.n	800852a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800852e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008530:	699a      	ldr	r2, [r3, #24]
 8008532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008534:	18d1      	adds	r1, r2, r3
 8008536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800853a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800853c:	f7ff ff04 	bl	8008348 <prvInsertTimerInActiveList>
					break;
 8008540:	e017      	b.n	8008572 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008544:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008548:	f003 0302 	and.w	r3, r3, #2
 800854c:	2b00      	cmp	r3, #0
 800854e:	d103      	bne.n	8008558 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008552:	f000 fbe9 	bl	8008d28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008556:	e00c      	b.n	8008572 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800855e:	f023 0301 	bic.w	r3, r3, #1
 8008562:	b2da      	uxtb	r2, r3
 8008564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008566:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800856a:	e002      	b.n	8008572 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800856c:	bf00      	nop
 800856e:	e000      	b.n	8008572 <prvProcessReceivedCommands+0x1a6>
					break;
 8008570:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008572:	4b08      	ldr	r3, [pc, #32]	@ (8008594 <prvProcessReceivedCommands+0x1c8>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	1d39      	adds	r1, r7, #4
 8008578:	2200      	movs	r2, #0
 800857a:	4618      	mov	r0, r3
 800857c:	f7fe fbce 	bl	8006d1c <xQueueReceive>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	f47f af26 	bne.w	80083d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	3730      	adds	r7, #48	@ 0x30
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	24000fe0 	.word	0x24000fe0

08008598 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800859e:	e049      	b.n	8008634 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085a0:	4b2e      	ldr	r3, [pc, #184]	@ (800865c <prvSwitchTimerLists+0xc4>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085aa:	4b2c      	ldr	r3, [pc, #176]	@ (800865c <prvSwitchTimerLists+0xc4>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3304      	adds	r3, #4
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe f8db 	bl	8006774 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d02f      	beq.n	8008634 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	4413      	add	r3, r2
 80085dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d90e      	bls.n	8008604 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085f2:	4b1a      	ldr	r3, [pc, #104]	@ (800865c <prvSwitchTimerLists+0xc4>)
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3304      	adds	r3, #4
 80085fa:	4619      	mov	r1, r3
 80085fc:	4610      	mov	r0, r2
 80085fe:	f7fe f880 	bl	8006702 <vListInsert>
 8008602:	e017      	b.n	8008634 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008604:	2300      	movs	r3, #0
 8008606:	9300      	str	r3, [sp, #0]
 8008608:	2300      	movs	r3, #0
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	2100      	movs	r1, #0
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f7ff fd58 	bl	80080c4 <xTimerGenericCommand>
 8008614:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10b      	bne.n	8008634 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	603b      	str	r3, [r7, #0]
}
 800862e:	bf00      	nop
 8008630:	bf00      	nop
 8008632:	e7fd      	b.n	8008630 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008634:	4b09      	ldr	r3, [pc, #36]	@ (800865c <prvSwitchTimerLists+0xc4>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1b0      	bne.n	80085a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800863e:	4b07      	ldr	r3, [pc, #28]	@ (800865c <prvSwitchTimerLists+0xc4>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008644:	4b06      	ldr	r3, [pc, #24]	@ (8008660 <prvSwitchTimerLists+0xc8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a04      	ldr	r2, [pc, #16]	@ (800865c <prvSwitchTimerLists+0xc4>)
 800864a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800864c:	4a04      	ldr	r2, [pc, #16]	@ (8008660 <prvSwitchTimerLists+0xc8>)
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	6013      	str	r3, [r2, #0]
}
 8008652:	bf00      	nop
 8008654:	3718      	adds	r7, #24
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	24000fd8 	.word	0x24000fd8
 8008660:	24000fdc 	.word	0x24000fdc

08008664 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800866a:	f000 f96d 	bl	8008948 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800866e:	4b15      	ldr	r3, [pc, #84]	@ (80086c4 <prvCheckForValidListAndQueue+0x60>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d120      	bne.n	80086b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008676:	4814      	ldr	r0, [pc, #80]	@ (80086c8 <prvCheckForValidListAndQueue+0x64>)
 8008678:	f7fd fff2 	bl	8006660 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800867c:	4813      	ldr	r0, [pc, #76]	@ (80086cc <prvCheckForValidListAndQueue+0x68>)
 800867e:	f7fd ffef 	bl	8006660 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008682:	4b13      	ldr	r3, [pc, #76]	@ (80086d0 <prvCheckForValidListAndQueue+0x6c>)
 8008684:	4a10      	ldr	r2, [pc, #64]	@ (80086c8 <prvCheckForValidListAndQueue+0x64>)
 8008686:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008688:	4b12      	ldr	r3, [pc, #72]	@ (80086d4 <prvCheckForValidListAndQueue+0x70>)
 800868a:	4a10      	ldr	r2, [pc, #64]	@ (80086cc <prvCheckForValidListAndQueue+0x68>)
 800868c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800868e:	2300      	movs	r3, #0
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	4b11      	ldr	r3, [pc, #68]	@ (80086d8 <prvCheckForValidListAndQueue+0x74>)
 8008694:	4a11      	ldr	r2, [pc, #68]	@ (80086dc <prvCheckForValidListAndQueue+0x78>)
 8008696:	2110      	movs	r1, #16
 8008698:	200a      	movs	r0, #10
 800869a:	f7fe f8ff 	bl	800689c <xQueueGenericCreateStatic>
 800869e:	4603      	mov	r3, r0
 80086a0:	4a08      	ldr	r2, [pc, #32]	@ (80086c4 <prvCheckForValidListAndQueue+0x60>)
 80086a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80086a4:	4b07      	ldr	r3, [pc, #28]	@ (80086c4 <prvCheckForValidListAndQueue+0x60>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d005      	beq.n	80086b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086ac:	4b05      	ldr	r3, [pc, #20]	@ (80086c4 <prvCheckForValidListAndQueue+0x60>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	490b      	ldr	r1, [pc, #44]	@ (80086e0 <prvCheckForValidListAndQueue+0x7c>)
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fe fd24 	bl	8007100 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086b8:	f000 f978 	bl	80089ac <vPortExitCritical>
}
 80086bc:	bf00      	nop
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	24000fe0 	.word	0x24000fe0
 80086c8:	24000fb0 	.word	0x24000fb0
 80086cc:	24000fc4 	.word	0x24000fc4
 80086d0:	24000fd8 	.word	0x24000fd8
 80086d4:	24000fdc 	.word	0x24000fdc
 80086d8:	2400108c 	.word	0x2400108c
 80086dc:	24000fec 	.word	0x24000fec
 80086e0:	08009170 	.word	0x08009170

080086e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	3b04      	subs	r3, #4
 80086f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80086fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3b04      	subs	r3, #4
 8008702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f023 0201 	bic.w	r2, r3, #1
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3b04      	subs	r3, #4
 8008712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008714:	4a0c      	ldr	r2, [pc, #48]	@ (8008748 <pxPortInitialiseStack+0x64>)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3b14      	subs	r3, #20
 800871e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3b04      	subs	r3, #4
 800872a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f06f 0202 	mvn.w	r2, #2
 8008732:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3b20      	subs	r3, #32
 8008738:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800873a:	68fb      	ldr	r3, [r7, #12]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	0800874d 	.word	0x0800874d

0800874c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008756:	4b13      	ldr	r3, [pc, #76]	@ (80087a4 <prvTaskExitError+0x58>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875e:	d00b      	beq.n	8008778 <prvTaskExitError+0x2c>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	60fb      	str	r3, [r7, #12]
}
 8008772:	bf00      	nop
 8008774:	bf00      	nop
 8008776:	e7fd      	b.n	8008774 <prvTaskExitError+0x28>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	60bb      	str	r3, [r7, #8]
}
 800878a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800878c:	bf00      	nop
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0fc      	beq.n	800878e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	24000010 	.word	0x24000010
	...

080087b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087b0:	4b07      	ldr	r3, [pc, #28]	@ (80087d0 <pxCurrentTCBConst2>)
 80087b2:	6819      	ldr	r1, [r3, #0]
 80087b4:	6808      	ldr	r0, [r1, #0]
 80087b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ba:	f380 8809 	msr	PSP, r0
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f04f 0000 	mov.w	r0, #0
 80087c6:	f380 8811 	msr	BASEPRI, r0
 80087ca:	4770      	bx	lr
 80087cc:	f3af 8000 	nop.w

080087d0 <pxCurrentTCBConst2>:
 80087d0:	24000ab0 	.word	0x24000ab0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087d4:	bf00      	nop
 80087d6:	bf00      	nop

080087d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087d8:	4808      	ldr	r0, [pc, #32]	@ (80087fc <prvPortStartFirstTask+0x24>)
 80087da:	6800      	ldr	r0, [r0, #0]
 80087dc:	6800      	ldr	r0, [r0, #0]
 80087de:	f380 8808 	msr	MSP, r0
 80087e2:	f04f 0000 	mov.w	r0, #0
 80087e6:	f380 8814 	msr	CONTROL, r0
 80087ea:	b662      	cpsie	i
 80087ec:	b661      	cpsie	f
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	df00      	svc	0
 80087f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087fa:	bf00      	nop
 80087fc:	e000ed08 	.word	0xe000ed08

08008800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008806:	4b47      	ldr	r3, [pc, #284]	@ (8008924 <xPortStartScheduler+0x124>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a47      	ldr	r2, [pc, #284]	@ (8008928 <xPortStartScheduler+0x128>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d10b      	bne.n	8008828 <xPortStartScheduler+0x28>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	613b      	str	r3, [r7, #16]
}
 8008822:	bf00      	nop
 8008824:	bf00      	nop
 8008826:	e7fd      	b.n	8008824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008828:	4b3e      	ldr	r3, [pc, #248]	@ (8008924 <xPortStartScheduler+0x124>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a3f      	ldr	r2, [pc, #252]	@ (800892c <xPortStartScheduler+0x12c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d10b      	bne.n	800884a <xPortStartScheduler+0x4a>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	60fb      	str	r3, [r7, #12]
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop
 8008848:	e7fd      	b.n	8008846 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800884a:	4b39      	ldr	r3, [pc, #228]	@ (8008930 <xPortStartScheduler+0x130>)
 800884c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	22ff      	movs	r2, #255	@ 0xff
 800885a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008864:	78fb      	ldrb	r3, [r7, #3]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800886c:	b2da      	uxtb	r2, r3
 800886e:	4b31      	ldr	r3, [pc, #196]	@ (8008934 <xPortStartScheduler+0x134>)
 8008870:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008872:	4b31      	ldr	r3, [pc, #196]	@ (8008938 <xPortStartScheduler+0x138>)
 8008874:	2207      	movs	r2, #7
 8008876:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008878:	e009      	b.n	800888e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800887a:	4b2f      	ldr	r3, [pc, #188]	@ (8008938 <xPortStartScheduler+0x138>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3b01      	subs	r3, #1
 8008880:	4a2d      	ldr	r2, [pc, #180]	@ (8008938 <xPortStartScheduler+0x138>)
 8008882:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008884:	78fb      	ldrb	r3, [r7, #3]
 8008886:	b2db      	uxtb	r3, r3
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	b2db      	uxtb	r3, r3
 800888c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800888e:	78fb      	ldrb	r3, [r7, #3]
 8008890:	b2db      	uxtb	r3, r3
 8008892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008896:	2b80      	cmp	r3, #128	@ 0x80
 8008898:	d0ef      	beq.n	800887a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800889a:	4b27      	ldr	r3, [pc, #156]	@ (8008938 <xPortStartScheduler+0x138>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f1c3 0307 	rsb	r3, r3, #7
 80088a2:	2b04      	cmp	r3, #4
 80088a4:	d00b      	beq.n	80088be <xPortStartScheduler+0xbe>
	__asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	60bb      	str	r3, [r7, #8]
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	e7fd      	b.n	80088ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088be:	4b1e      	ldr	r3, [pc, #120]	@ (8008938 <xPortStartScheduler+0x138>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008938 <xPortStartScheduler+0x138>)
 80088c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008938 <xPortStartScheduler+0x138>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80088d0:	4a19      	ldr	r2, [pc, #100]	@ (8008938 <xPortStartScheduler+0x138>)
 80088d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088dc:	4b17      	ldr	r3, [pc, #92]	@ (800893c <xPortStartScheduler+0x13c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a16      	ldr	r2, [pc, #88]	@ (800893c <xPortStartScheduler+0x13c>)
 80088e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80088e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088e8:	4b14      	ldr	r3, [pc, #80]	@ (800893c <xPortStartScheduler+0x13c>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a13      	ldr	r2, [pc, #76]	@ (800893c <xPortStartScheduler+0x13c>)
 80088ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80088f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088f4:	f000 f8da 	bl	8008aac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088f8:	4b11      	ldr	r3, [pc, #68]	@ (8008940 <xPortStartScheduler+0x140>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80088fe:	f000 f8f9 	bl	8008af4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008902:	4b10      	ldr	r3, [pc, #64]	@ (8008944 <xPortStartScheduler+0x144>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a0f      	ldr	r2, [pc, #60]	@ (8008944 <xPortStartScheduler+0x144>)
 8008908:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800890c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800890e:	f7ff ff63 	bl	80087d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008912:	f7ff f82d 	bl	8007970 <vTaskSwitchContext>
	prvTaskExitError();
 8008916:	f7ff ff19 	bl	800874c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	e000ed00 	.word	0xe000ed00
 8008928:	410fc271 	.word	0x410fc271
 800892c:	410fc270 	.word	0x410fc270
 8008930:	e000e400 	.word	0xe000e400
 8008934:	240010dc 	.word	0x240010dc
 8008938:	240010e0 	.word	0x240010e0
 800893c:	e000ed20 	.word	0xe000ed20
 8008940:	24000010 	.word	0x24000010
 8008944:	e000ef34 	.word	0xe000ef34

08008948 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	607b      	str	r3, [r7, #4]
}
 8008960:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008962:	4b10      	ldr	r3, [pc, #64]	@ (80089a4 <vPortEnterCritical+0x5c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3301      	adds	r3, #1
 8008968:	4a0e      	ldr	r2, [pc, #56]	@ (80089a4 <vPortEnterCritical+0x5c>)
 800896a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800896c:	4b0d      	ldr	r3, [pc, #52]	@ (80089a4 <vPortEnterCritical+0x5c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d110      	bne.n	8008996 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008974:	4b0c      	ldr	r3, [pc, #48]	@ (80089a8 <vPortEnterCritical+0x60>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	b2db      	uxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00b      	beq.n	8008996 <vPortEnterCritical+0x4e>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	603b      	str	r3, [r7, #0]
}
 8008990:	bf00      	nop
 8008992:	bf00      	nop
 8008994:	e7fd      	b.n	8008992 <vPortEnterCritical+0x4a>
	}
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	24000010 	.word	0x24000010
 80089a8:	e000ed04 	.word	0xe000ed04

080089ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089b2:	4b12      	ldr	r3, [pc, #72]	@ (80089fc <vPortExitCritical+0x50>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d10b      	bne.n	80089d2 <vPortExitCritical+0x26>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	607b      	str	r3, [r7, #4]
}
 80089cc:	bf00      	nop
 80089ce:	bf00      	nop
 80089d0:	e7fd      	b.n	80089ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089d2:	4b0a      	ldr	r3, [pc, #40]	@ (80089fc <vPortExitCritical+0x50>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	4a08      	ldr	r2, [pc, #32]	@ (80089fc <vPortExitCritical+0x50>)
 80089da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089dc:	4b07      	ldr	r3, [pc, #28]	@ (80089fc <vPortExitCritical+0x50>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d105      	bne.n	80089f0 <vPortExitCritical+0x44>
 80089e4:	2300      	movs	r3, #0
 80089e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	f383 8811 	msr	BASEPRI, r3
}
 80089ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	24000010 	.word	0x24000010

08008a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a00:	f3ef 8009 	mrs	r0, PSP
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	4b15      	ldr	r3, [pc, #84]	@ (8008a60 <pxCurrentTCBConst>)
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	f01e 0f10 	tst.w	lr, #16
 8008a10:	bf08      	it	eq
 8008a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1a:	6010      	str	r0, [r2, #0]
 8008a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008a24:	f380 8811 	msr	BASEPRI, r0
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f7fe ff9e 	bl	8007970 <vTaskSwitchContext>
 8008a34:	f04f 0000 	mov.w	r0, #0
 8008a38:	f380 8811 	msr	BASEPRI, r0
 8008a3c:	bc09      	pop	{r0, r3}
 8008a3e:	6819      	ldr	r1, [r3, #0]
 8008a40:	6808      	ldr	r0, [r1, #0]
 8008a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a46:	f01e 0f10 	tst.w	lr, #16
 8008a4a:	bf08      	it	eq
 8008a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a50:	f380 8809 	msr	PSP, r0
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	f3af 8000 	nop.w

08008a60 <pxCurrentTCBConst>:
 8008a60:	24000ab0 	.word	0x24000ab0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop

08008a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	607b      	str	r3, [r7, #4]
}
 8008a80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a82:	f7fe febb 	bl	80077fc <xTaskIncrementTick>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a8c:	4b06      	ldr	r3, [pc, #24]	@ (8008aa8 <xPortSysTickHandler+0x40>)
 8008a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	2300      	movs	r3, #0
 8008a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	f383 8811 	msr	BASEPRI, r3
}
 8008a9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008aa0:	bf00      	nop
 8008aa2:	3708      	adds	r7, #8
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	e000ed04 	.word	0xe000ed04

08008aac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008aac:	b480      	push	{r7}
 8008aae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae0 <vPortSetupTimerInterrupt+0x34>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae4 <vPortSetupTimerInterrupt+0x38>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008abc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ae8 <vPortSetupTimerInterrupt+0x3c>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8008aec <vPortSetupTimerInterrupt+0x40>)
 8008ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac6:	099b      	lsrs	r3, r3, #6
 8008ac8:	4a09      	ldr	r2, [pc, #36]	@ (8008af0 <vPortSetupTimerInterrupt+0x44>)
 8008aca:	3b01      	subs	r3, #1
 8008acc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ace:	4b04      	ldr	r3, [pc, #16]	@ (8008ae0 <vPortSetupTimerInterrupt+0x34>)
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	601a      	str	r2, [r3, #0]
}
 8008ad4:	bf00      	nop
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	e000e010 	.word	0xe000e010
 8008ae4:	e000e018 	.word	0xe000e018
 8008ae8:	24000000 	.word	0x24000000
 8008aec:	10624dd3 	.word	0x10624dd3
 8008af0:	e000e014 	.word	0xe000e014

08008af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008af4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008b04 <vPortEnableVFP+0x10>
 8008af8:	6801      	ldr	r1, [r0, #0]
 8008afa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008afe:	6001      	str	r1, [r0, #0]
 8008b00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b02:	bf00      	nop
 8008b04:	e000ed88 	.word	0xe000ed88

08008b08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b0e:	f3ef 8305 	mrs	r3, IPSR
 8008b12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b0f      	cmp	r3, #15
 8008b18:	d915      	bls.n	8008b46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b1a:	4a18      	ldr	r2, [pc, #96]	@ (8008b7c <vPortValidateInterruptPriority+0x74>)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4413      	add	r3, r2
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b24:	4b16      	ldr	r3, [pc, #88]	@ (8008b80 <vPortValidateInterruptPriority+0x78>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	7afa      	ldrb	r2, [r7, #11]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d20b      	bcs.n	8008b46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	607b      	str	r3, [r7, #4]
}
 8008b40:	bf00      	nop
 8008b42:	bf00      	nop
 8008b44:	e7fd      	b.n	8008b42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b46:	4b0f      	ldr	r3, [pc, #60]	@ (8008b84 <vPortValidateInterruptPriority+0x7c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b88 <vPortValidateInterruptPriority+0x80>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d90b      	bls.n	8008b6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	603b      	str	r3, [r7, #0]
}
 8008b68:	bf00      	nop
 8008b6a:	bf00      	nop
 8008b6c:	e7fd      	b.n	8008b6a <vPortValidateInterruptPriority+0x62>
	}
 8008b6e:	bf00      	nop
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	e000e3f0 	.word	0xe000e3f0
 8008b80:	240010dc 	.word	0x240010dc
 8008b84:	e000ed0c 	.word	0xe000ed0c
 8008b88:	240010e0 	.word	0x240010e0

08008b8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08a      	sub	sp, #40	@ 0x28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b94:	2300      	movs	r3, #0
 8008b96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b98:	f7fe fd74 	bl	8007684 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b9c:	4b5c      	ldr	r3, [pc, #368]	@ (8008d10 <pvPortMalloc+0x184>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d101      	bne.n	8008ba8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ba4:	f000 f924 	bl	8008df0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ba8:	4b5a      	ldr	r3, [pc, #360]	@ (8008d14 <pvPortMalloc+0x188>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4013      	ands	r3, r2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f040 8095 	bne.w	8008ce0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d01e      	beq.n	8008bfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008bbc:	2208      	movs	r2, #8
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d015      	beq.n	8008bfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f023 0307 	bic.w	r3, r3, #7
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f003 0307 	and.w	r3, r3, #7
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00b      	beq.n	8008bfa <pvPortMalloc+0x6e>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	617b      	str	r3, [r7, #20]
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop
 8008bf8:	e7fd      	b.n	8008bf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d06f      	beq.n	8008ce0 <pvPortMalloc+0x154>
 8008c00:	4b45      	ldr	r3, [pc, #276]	@ (8008d18 <pvPortMalloc+0x18c>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d86a      	bhi.n	8008ce0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c0a:	4b44      	ldr	r3, [pc, #272]	@ (8008d1c <pvPortMalloc+0x190>)
 8008c0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c0e:	4b43      	ldr	r3, [pc, #268]	@ (8008d1c <pvPortMalloc+0x190>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c14:	e004      	b.n	8008c20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d903      	bls.n	8008c32 <pvPortMalloc+0xa6>
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1f1      	bne.n	8008c16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c32:	4b37      	ldr	r3, [pc, #220]	@ (8008d10 <pvPortMalloc+0x184>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d051      	beq.n	8008ce0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c3c:	6a3b      	ldr	r3, [r7, #32]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2208      	movs	r2, #8
 8008c42:	4413      	add	r3, r2
 8008c44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	1ad2      	subs	r2, r2, r3
 8008c56:	2308      	movs	r3, #8
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d920      	bls.n	8008ca0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4413      	add	r3, r2
 8008c64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00b      	beq.n	8008c88 <pvPortMalloc+0xfc>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	613b      	str	r3, [r7, #16]
}
 8008c82:	bf00      	nop
 8008c84:	bf00      	nop
 8008c86:	e7fd      	b.n	8008c84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	1ad2      	subs	r2, r2, r3
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c9a:	69b8      	ldr	r0, [r7, #24]
 8008c9c:	f000 f90a 	bl	8008eb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8008d18 <pvPortMalloc+0x18c>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	4a1b      	ldr	r2, [pc, #108]	@ (8008d18 <pvPortMalloc+0x18c>)
 8008cac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cae:	4b1a      	ldr	r3, [pc, #104]	@ (8008d18 <pvPortMalloc+0x18c>)
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d20 <pvPortMalloc+0x194>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d203      	bcs.n	8008cc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008cba:	4b17      	ldr	r3, [pc, #92]	@ (8008d18 <pvPortMalloc+0x18c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a18      	ldr	r2, [pc, #96]	@ (8008d20 <pvPortMalloc+0x194>)
 8008cc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	4b13      	ldr	r3, [pc, #76]	@ (8008d14 <pvPortMalloc+0x188>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008cd6:	4b13      	ldr	r3, [pc, #76]	@ (8008d24 <pvPortMalloc+0x198>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	4a11      	ldr	r2, [pc, #68]	@ (8008d24 <pvPortMalloc+0x198>)
 8008cde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ce0:	f7fe fcde 	bl	80076a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	f003 0307 	and.w	r3, r3, #7
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <pvPortMalloc+0x17a>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	60fb      	str	r3, [r7, #12]
}
 8008d00:	bf00      	nop
 8008d02:	bf00      	nop
 8008d04:	e7fd      	b.n	8008d02 <pvPortMalloc+0x176>
	return pvReturn;
 8008d06:	69fb      	ldr	r3, [r7, #28]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3728      	adds	r7, #40	@ 0x28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	24004cec 	.word	0x24004cec
 8008d14:	24004d00 	.word	0x24004d00
 8008d18:	24004cf0 	.word	0x24004cf0
 8008d1c:	24004ce4 	.word	0x24004ce4
 8008d20:	24004cf4 	.word	0x24004cf4
 8008d24:	24004cf8 	.word	0x24004cf8

08008d28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d04f      	beq.n	8008dda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d3a:	2308      	movs	r3, #8
 8008d3c:	425b      	negs	r3, r3
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	4413      	add	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	4b25      	ldr	r3, [pc, #148]	@ (8008de4 <vPortFree+0xbc>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4013      	ands	r3, r2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10b      	bne.n	8008d6e <vPortFree+0x46>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	60fb      	str	r3, [r7, #12]
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	e7fd      	b.n	8008d6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00b      	beq.n	8008d8e <vPortFree+0x66>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	60bb      	str	r3, [r7, #8]
}
 8008d88:	bf00      	nop
 8008d8a:	bf00      	nop
 8008d8c:	e7fd      	b.n	8008d8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	4b14      	ldr	r3, [pc, #80]	@ (8008de4 <vPortFree+0xbc>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4013      	ands	r3, r2
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d01e      	beq.n	8008dda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d11a      	bne.n	8008dda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	4b0e      	ldr	r3, [pc, #56]	@ (8008de4 <vPortFree+0xbc>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	43db      	mvns	r3, r3
 8008dae:	401a      	ands	r2, r3
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008db4:	f7fe fc66 	bl	8007684 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008de8 <vPortFree+0xc0>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	4a09      	ldr	r2, [pc, #36]	@ (8008de8 <vPortFree+0xc0>)
 8008dc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008dc6:	6938      	ldr	r0, [r7, #16]
 8008dc8:	f000 f874 	bl	8008eb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008dcc:	4b07      	ldr	r3, [pc, #28]	@ (8008dec <vPortFree+0xc4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	4a06      	ldr	r2, [pc, #24]	@ (8008dec <vPortFree+0xc4>)
 8008dd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008dd6:	f7fe fc63 	bl	80076a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008dda:	bf00      	nop
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	24004d00 	.word	0x24004d00
 8008de8:	24004cf0 	.word	0x24004cf0
 8008dec:	24004cfc 	.word	0x24004cfc

08008df0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008df6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008dfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008dfc:	4b27      	ldr	r3, [pc, #156]	@ (8008e9c <prvHeapInit+0xac>)
 8008dfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00c      	beq.n	8008e24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	3307      	adds	r3, #7
 8008e0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 0307 	bic.w	r3, r3, #7
 8008e16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8008e9c <prvHeapInit+0xac>)
 8008e20:	4413      	add	r3, r2
 8008e22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e28:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea0 <prvHeapInit+0xb0>)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea0 <prvHeapInit+0xb0>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	4413      	add	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e3c:	2208      	movs	r2, #8
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	1a9b      	subs	r3, r3, r2
 8008e42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f023 0307 	bic.w	r3, r3, #7
 8008e4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4a15      	ldr	r2, [pc, #84]	@ (8008ea4 <prvHeapInit+0xb4>)
 8008e50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e52:	4b14      	ldr	r3, [pc, #80]	@ (8008ea4 <prvHeapInit+0xb4>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2200      	movs	r2, #0
 8008e58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e5a:	4b12      	ldr	r3, [pc, #72]	@ (8008ea4 <prvHeapInit+0xb4>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	1ad2      	subs	r2, r2, r3
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e70:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea4 <prvHeapInit+0xb4>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8008ea8 <prvHeapInit+0xb8>)
 8008e7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	4a09      	ldr	r2, [pc, #36]	@ (8008eac <prvHeapInit+0xbc>)
 8008e86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e88:	4b09      	ldr	r3, [pc, #36]	@ (8008eb0 <prvHeapInit+0xc0>)
 8008e8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008e8e:	601a      	str	r2, [r3, #0]
}
 8008e90:	bf00      	nop
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	240010e4 	.word	0x240010e4
 8008ea0:	24004ce4 	.word	0x24004ce4
 8008ea4:	24004cec 	.word	0x24004cec
 8008ea8:	24004cf4 	.word	0x24004cf4
 8008eac:	24004cf0 	.word	0x24004cf0
 8008eb0:	24004d00 	.word	0x24004d00

08008eb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ebc:	4b28      	ldr	r3, [pc, #160]	@ (8008f60 <prvInsertBlockIntoFreeList+0xac>)
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	e002      	b.n	8008ec8 <prvInsertBlockIntoFreeList+0x14>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d8f7      	bhi.n	8008ec2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	4413      	add	r3, r2
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d108      	bne.n	8008ef6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	441a      	add	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	441a      	add	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d118      	bne.n	8008f3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	4b15      	ldr	r3, [pc, #84]	@ (8008f64 <prvInsertBlockIntoFreeList+0xb0>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d00d      	beq.n	8008f32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	441a      	add	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	e008      	b.n	8008f44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f32:	4b0c      	ldr	r3, [pc, #48]	@ (8008f64 <prvInsertBlockIntoFreeList+0xb0>)
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	e003      	b.n	8008f44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d002      	beq.n	8008f52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f52:	bf00      	nop
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	24004ce4 	.word	0x24004ce4
 8008f64:	24004cec 	.word	0x24004cec

08008f68 <memset>:
 8008f68:	4402      	add	r2, r0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d100      	bne.n	8008f72 <memset+0xa>
 8008f70:	4770      	bx	lr
 8008f72:	f803 1b01 	strb.w	r1, [r3], #1
 8008f76:	e7f9      	b.n	8008f6c <memset+0x4>

08008f78 <_reclaim_reent>:
 8008f78:	4b29      	ldr	r3, [pc, #164]	@ (8009020 <_reclaim_reent+0xa8>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4283      	cmp	r3, r0
 8008f7e:	b570      	push	{r4, r5, r6, lr}
 8008f80:	4604      	mov	r4, r0
 8008f82:	d04b      	beq.n	800901c <_reclaim_reent+0xa4>
 8008f84:	69c3      	ldr	r3, [r0, #28]
 8008f86:	b1ab      	cbz	r3, 8008fb4 <_reclaim_reent+0x3c>
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	b16b      	cbz	r3, 8008fa8 <_reclaim_reent+0x30>
 8008f8c:	2500      	movs	r5, #0
 8008f8e:	69e3      	ldr	r3, [r4, #28]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	5959      	ldr	r1, [r3, r5]
 8008f94:	2900      	cmp	r1, #0
 8008f96:	d13b      	bne.n	8009010 <_reclaim_reent+0x98>
 8008f98:	3504      	adds	r5, #4
 8008f9a:	2d80      	cmp	r5, #128	@ 0x80
 8008f9c:	d1f7      	bne.n	8008f8e <_reclaim_reent+0x16>
 8008f9e:	69e3      	ldr	r3, [r4, #28]
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	68d9      	ldr	r1, [r3, #12]
 8008fa4:	f000 f872 	bl	800908c <_free_r>
 8008fa8:	69e3      	ldr	r3, [r4, #28]
 8008faa:	6819      	ldr	r1, [r3, #0]
 8008fac:	b111      	cbz	r1, 8008fb4 <_reclaim_reent+0x3c>
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 f86c 	bl	800908c <_free_r>
 8008fb4:	6961      	ldr	r1, [r4, #20]
 8008fb6:	b111      	cbz	r1, 8008fbe <_reclaim_reent+0x46>
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f000 f867 	bl	800908c <_free_r>
 8008fbe:	69e1      	ldr	r1, [r4, #28]
 8008fc0:	b111      	cbz	r1, 8008fc8 <_reclaim_reent+0x50>
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 f862 	bl	800908c <_free_r>
 8008fc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008fca:	b111      	cbz	r1, 8008fd2 <_reclaim_reent+0x5a>
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 f85d 	bl	800908c <_free_r>
 8008fd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fd4:	b111      	cbz	r1, 8008fdc <_reclaim_reent+0x64>
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f000 f858 	bl	800908c <_free_r>
 8008fdc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008fde:	b111      	cbz	r1, 8008fe6 <_reclaim_reent+0x6e>
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f000 f853 	bl	800908c <_free_r>
 8008fe6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008fe8:	b111      	cbz	r1, 8008ff0 <_reclaim_reent+0x78>
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 f84e 	bl	800908c <_free_r>
 8008ff0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008ff2:	b111      	cbz	r1, 8008ffa <_reclaim_reent+0x82>
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f000 f849 	bl	800908c <_free_r>
 8008ffa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008ffc:	b111      	cbz	r1, 8009004 <_reclaim_reent+0x8c>
 8008ffe:	4620      	mov	r0, r4
 8009000:	f000 f844 	bl	800908c <_free_r>
 8009004:	6a23      	ldr	r3, [r4, #32]
 8009006:	b14b      	cbz	r3, 800901c <_reclaim_reent+0xa4>
 8009008:	4620      	mov	r0, r4
 800900a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800900e:	4718      	bx	r3
 8009010:	680e      	ldr	r6, [r1, #0]
 8009012:	4620      	mov	r0, r4
 8009014:	f000 f83a 	bl	800908c <_free_r>
 8009018:	4631      	mov	r1, r6
 800901a:	e7bb      	b.n	8008f94 <_reclaim_reent+0x1c>
 800901c:	bd70      	pop	{r4, r5, r6, pc}
 800901e:	bf00      	nop
 8009020:	24000014 	.word	0x24000014

08009024 <__libc_init_array>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	4d0d      	ldr	r5, [pc, #52]	@ (800905c <__libc_init_array+0x38>)
 8009028:	4c0d      	ldr	r4, [pc, #52]	@ (8009060 <__libc_init_array+0x3c>)
 800902a:	1b64      	subs	r4, r4, r5
 800902c:	10a4      	asrs	r4, r4, #2
 800902e:	2600      	movs	r6, #0
 8009030:	42a6      	cmp	r6, r4
 8009032:	d109      	bne.n	8009048 <__libc_init_array+0x24>
 8009034:	4d0b      	ldr	r5, [pc, #44]	@ (8009064 <__libc_init_array+0x40>)
 8009036:	4c0c      	ldr	r4, [pc, #48]	@ (8009068 <__libc_init_array+0x44>)
 8009038:	f000 f87e 	bl	8009138 <_init>
 800903c:	1b64      	subs	r4, r4, r5
 800903e:	10a4      	asrs	r4, r4, #2
 8009040:	2600      	movs	r6, #0
 8009042:	42a6      	cmp	r6, r4
 8009044:	d105      	bne.n	8009052 <__libc_init_array+0x2e>
 8009046:	bd70      	pop	{r4, r5, r6, pc}
 8009048:	f855 3b04 	ldr.w	r3, [r5], #4
 800904c:	4798      	blx	r3
 800904e:	3601      	adds	r6, #1
 8009050:	e7ee      	b.n	8009030 <__libc_init_array+0xc>
 8009052:	f855 3b04 	ldr.w	r3, [r5], #4
 8009056:	4798      	blx	r3
 8009058:	3601      	adds	r6, #1
 800905a:	e7f2      	b.n	8009042 <__libc_init_array+0x1e>
 800905c:	08009200 	.word	0x08009200
 8009060:	08009200 	.word	0x08009200
 8009064:	08009200 	.word	0x08009200
 8009068:	08009204 	.word	0x08009204

0800906c <__retarget_lock_acquire_recursive>:
 800906c:	4770      	bx	lr

0800906e <__retarget_lock_release_recursive>:
 800906e:	4770      	bx	lr

08009070 <memcpy>:
 8009070:	440a      	add	r2, r1
 8009072:	4291      	cmp	r1, r2
 8009074:	f100 33ff 	add.w	r3, r0, #4294967295
 8009078:	d100      	bne.n	800907c <memcpy+0xc>
 800907a:	4770      	bx	lr
 800907c:	b510      	push	{r4, lr}
 800907e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009086:	4291      	cmp	r1, r2
 8009088:	d1f9      	bne.n	800907e <memcpy+0xe>
 800908a:	bd10      	pop	{r4, pc}

0800908c <_free_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4605      	mov	r5, r0
 8009090:	2900      	cmp	r1, #0
 8009092:	d041      	beq.n	8009118 <_free_r+0x8c>
 8009094:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009098:	1f0c      	subs	r4, r1, #4
 800909a:	2b00      	cmp	r3, #0
 800909c:	bfb8      	it	lt
 800909e:	18e4      	addlt	r4, r4, r3
 80090a0:	f000 f83e 	bl	8009120 <__malloc_lock>
 80090a4:	4a1d      	ldr	r2, [pc, #116]	@ (800911c <_free_r+0x90>)
 80090a6:	6813      	ldr	r3, [r2, #0]
 80090a8:	b933      	cbnz	r3, 80090b8 <_free_r+0x2c>
 80090aa:	6063      	str	r3, [r4, #4]
 80090ac:	6014      	str	r4, [r2, #0]
 80090ae:	4628      	mov	r0, r5
 80090b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090b4:	f000 b83a 	b.w	800912c <__malloc_unlock>
 80090b8:	42a3      	cmp	r3, r4
 80090ba:	d908      	bls.n	80090ce <_free_r+0x42>
 80090bc:	6820      	ldr	r0, [r4, #0]
 80090be:	1821      	adds	r1, r4, r0
 80090c0:	428b      	cmp	r3, r1
 80090c2:	bf01      	itttt	eq
 80090c4:	6819      	ldreq	r1, [r3, #0]
 80090c6:	685b      	ldreq	r3, [r3, #4]
 80090c8:	1809      	addeq	r1, r1, r0
 80090ca:	6021      	streq	r1, [r4, #0]
 80090cc:	e7ed      	b.n	80090aa <_free_r+0x1e>
 80090ce:	461a      	mov	r2, r3
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	b10b      	cbz	r3, 80090d8 <_free_r+0x4c>
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	d9fa      	bls.n	80090ce <_free_r+0x42>
 80090d8:	6811      	ldr	r1, [r2, #0]
 80090da:	1850      	adds	r0, r2, r1
 80090dc:	42a0      	cmp	r0, r4
 80090de:	d10b      	bne.n	80090f8 <_free_r+0x6c>
 80090e0:	6820      	ldr	r0, [r4, #0]
 80090e2:	4401      	add	r1, r0
 80090e4:	1850      	adds	r0, r2, r1
 80090e6:	4283      	cmp	r3, r0
 80090e8:	6011      	str	r1, [r2, #0]
 80090ea:	d1e0      	bne.n	80090ae <_free_r+0x22>
 80090ec:	6818      	ldr	r0, [r3, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	6053      	str	r3, [r2, #4]
 80090f2:	4408      	add	r0, r1
 80090f4:	6010      	str	r0, [r2, #0]
 80090f6:	e7da      	b.n	80090ae <_free_r+0x22>
 80090f8:	d902      	bls.n	8009100 <_free_r+0x74>
 80090fa:	230c      	movs	r3, #12
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	e7d6      	b.n	80090ae <_free_r+0x22>
 8009100:	6820      	ldr	r0, [r4, #0]
 8009102:	1821      	adds	r1, r4, r0
 8009104:	428b      	cmp	r3, r1
 8009106:	bf04      	itt	eq
 8009108:	6819      	ldreq	r1, [r3, #0]
 800910a:	685b      	ldreq	r3, [r3, #4]
 800910c:	6063      	str	r3, [r4, #4]
 800910e:	bf04      	itt	eq
 8009110:	1809      	addeq	r1, r1, r0
 8009112:	6021      	streq	r1, [r4, #0]
 8009114:	6054      	str	r4, [r2, #4]
 8009116:	e7ca      	b.n	80090ae <_free_r+0x22>
 8009118:	bd38      	pop	{r3, r4, r5, pc}
 800911a:	bf00      	nop
 800911c:	24004e40 	.word	0x24004e40

08009120 <__malloc_lock>:
 8009120:	4801      	ldr	r0, [pc, #4]	@ (8009128 <__malloc_lock+0x8>)
 8009122:	f7ff bfa3 	b.w	800906c <__retarget_lock_acquire_recursive>
 8009126:	bf00      	nop
 8009128:	24004e3c 	.word	0x24004e3c

0800912c <__malloc_unlock>:
 800912c:	4801      	ldr	r0, [pc, #4]	@ (8009134 <__malloc_unlock+0x8>)
 800912e:	f7ff bf9e 	b.w	800906e <__retarget_lock_release_recursive>
 8009132:	bf00      	nop
 8009134:	24004e3c 	.word	0x24004e3c

08009138 <_init>:
 8009138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913a:	bf00      	nop
 800913c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800913e:	bc08      	pop	{r3}
 8009140:	469e      	mov	lr, r3
 8009142:	4770      	bx	lr

08009144 <_fini>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr
